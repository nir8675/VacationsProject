{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Downloads\\\\02092024ProjectVacation\\\\Frontend\\\\src\\\\Components\\\\VacationArea\\\\VacationEdit\\\\VacationEdit.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import { VacationModel } from \"../../../Models/VacationModel\";\n// import { vacationsService } from \"../../../Services/VacationsService\";\n// import \"./VacationEdit.css\";\n\n// export function EditVacation(): JSX.Element {\n//   const { id } = useParams<{ id: string }>();\n//   const navigate = useNavigate();\n\n//   const [vacation, setVacation] = useState<VacationModel | null>(null);\n//   const [image, setImage] = useState<File | null>(null);\n//   const [formData, setFormData] = useState<\n//     Omit<VacationModel, \"id\" | \"imageName\">\n//   >({\n//     destination: \"\",\n//     description: \"\",\n//     startDate: \"\",\n//     endDate: \"\",\n//     price: 0,\n//     imageUrl: \"\",\n//     isLiked: 0,\n//     likesCount: 0,\n//   });\n//   const [errors, setErrors] = useState<string[]>([]);\n\n//   // Fetch vacation details and populate the form when the component mounts\n//   useEffect(() => {\n//     const fetchVacation = async () => {\n//       try {\n//         const vacationData = await vacationsService.getVacationById(Number(id));\n//         setVacation(vacationData);\n\n//         // Populate form with existing vacation data\n//         setFormData({\n//           destination: vacationData.destination || \"\",\n//           description: vacationData.description || \"\",\n//           startDate: vacationData.startDate || \"\",\n//           endDate: vacationData.endDate || \"\",\n//           price: vacationData.price || 0,\n//           imageUrl: vacationData.imageUrl || \"\",\n//           isLiked: vacationData.isLiked || 0,\n//           likesCount: vacationData.likesCount || 0,\n//         });\n//       } catch (error) {\n//         console.error(\"Failed to fetch vacation:\", error);\n//       }\n//     };\n\n//     fetchVacation();\n//   }, [id]);\n\n//   const handleInputChange = (\n//     e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n//   ) => {\n//     const { name, value } = e.target;\n//     setFormData((prevData) => ({\n//       ...prevData,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     const file = e.target.files?.[0];\n//     setImage(file || null);\n//   };\n\n//   // Validation for form submission\n//   const validateForm = () => {\n//     const newErrors: string[] = [];\n\n//     // Check required fields (except image)\n//     if (!formData.destination) {\n//       newErrors.push(\"Destination is required.\");\n//     }\n//     if (!formData.description) {\n//       newErrors.push(\"Description is required.\");\n//     }\n//     if (!formData.startDate) {\n//       newErrors.push(\"Start date is required.\");\n//     }\n//     if (!formData.endDate) {\n//       newErrors.push(\"End date is required.\");\n//     }\n\n//     // Check price (should be positive and less than 10,000)\n//     if (formData.price < 0 || formData.price > 10000) {\n//       newErrors.push(\"Price must be between 0 and 10,000.\");\n//     }\n\n//     // Check that end date is not before start date\n//     if (new Date(formData.endDate) < new Date(formData.startDate)) {\n//       newErrors.push(\"End date cannot be before the start date.\");\n//     }\n\n//     return newErrors;\n//   };\n\n//   const handleSubmit = async (e: React.FormEvent) => {\n//     e.preventDefault();\n\n//     // Run validation before submitting the form\n//     const formErrors = validateForm();\n//     if (formErrors.length > 0) {\n//       setErrors(formErrors);\n//       return;\n//     }\n\n//     try {\n//       const updatedVacation = new FormData();\n//       updatedVacation.append(\"destination\", formData.destination);\n//       updatedVacation.append(\"description\", formData.description);\n//       updatedVacation.append(\"startDate\", formData.startDate);\n//       updatedVacation.append(\"endDate\", formData.endDate);\n//       updatedVacation.append(\"price\", formData.price.toString());\n//       updatedVacation.append(\"imageUrl\", formData.imageUrl);\n//       updatedVacation.append(\"isLiked\", formData.isLiked.toString());\n//       updatedVacation.append(\"likesCount\", formData.likesCount.toString());\n\n//       // Append the image only if it's selected\n//       if (image) {\n//         updatedVacation.append(\"imageName\", image);\n//       }\n\n//       // Update vacation in the service\n//       await vacationsService.updateVacation(Number(id), updatedVacation);\n//       navigate(\"/vacations\");\n//     } catch (error) {\n//       console.error(\"Failed to update vacation:\", error);\n//     }\n//   };\n\n//   if (!vacation) return <div>Loading...</div>;\n\n//   return (\n//     <div className=\"EditVacation\">\n//       <h2>Edit Vacation</h2>\n\n//       {errors.length > 0 && (\n//         <ul className=\"error-list\">\n//           {errors.map((error, index) => (\n//             <li key={index} className=\"error-item\">\n//               {error}\n//             </li>\n//           ))}\n//         </ul>\n//       )}\n\n//       <form className=\"edit-form\" onSubmit={handleSubmit}>\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"destination\">Destination:</label>\n//           <input\n//             id=\"destination\"\n//             type=\"text\"\n//             name=\"destination\"\n//             value={formData.destination}\n//             onChange={handleInputChange}\n//           />\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"description\">Description:</label>\n//           <textarea\n//             id=\"description\"\n//             name=\"description\"\n//             value={formData.description}\n//             onChange={handleInputChange}\n//           />\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"startDate\">Start Date:</label>\n//           <input\n//             id=\"startDate\"\n//             type=\"date\"\n//             name=\"startDate\"\n//             value={formData.startDate}\n//             onChange={handleInputChange}\n//           />\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"endDate\">End Date:</label>\n//           <input\n//             id=\"endDate\"\n//             type=\"date\"\n//             name=\"endDate\"\n//             value={formData.endDate}\n//             onChange={handleInputChange}\n//           />\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"price\">Price:</label>\n//           <input\n//             id=\"price\"\n//             type=\"number\"\n//             name=\"price\"\n//             value={formData.price}\n//             onChange={handleInputChange}\n//           />\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"image\">Image (optional):</label>\n//           <input\n//             id=\"image\"\n//             type=\"file\"\n//             accept=\"image/*\"\n//             onChange={handleFileChange}\n//           />\n//         </div>\n\n//         <button className=\"submit-btn\" type=\"submit\">\n//           Update Vacation\n//         </button>\n//       </form>\n//     </div>\n//   );\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { vacationsService } from \"../../../Services/VacationsService\";\nimport \"./VacationEdit.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function EditVacation() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n\n  // Using react-hook-form for form validation\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: {\n      errors\n    }\n  } = useForm();\n  const [image, setImage] = useState(null);\n  useEffect(() => {\n    const fetchVacation = async () => {\n      try {\n        const vacationData = await vacationsService.getVacationById(Number(id));\n\n        // Populate form with existing vacation data\n        setValue(\"destination\", vacationData.destination || \"\");\n        setValue(\"description\", vacationData.description || \"\");\n        setValue(\"startDate\", vacationData.startDate || \"\");\n        setValue(\"endDate\", vacationData.endDate || \"\");\n        setValue(\"price\", vacationData.price || 0);\n      } catch (error) {\n        console.error(\"Failed to fetch vacation:\", error);\n      }\n    };\n    fetchVacation();\n  }, [id, setValue]);\n  const handleFileChange = e => {\n    var _e$target$files;\n    const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    setImage(file || null);\n  };\n\n  // Form submission\n  const onSubmit = async formData => {\n    try {\n      const updatedVacation = new FormData();\n      updatedVacation.append(\"destination\", formData.destination);\n      updatedVacation.append(\"description\", formData.description);\n      updatedVacation.append(\"startDate\", formData.startDate);\n      updatedVacation.append(\"endDate\", formData.endDate);\n      updatedVacation.append(\"price\", formData.price.toString());\n      if (image) {\n        updatedVacation.append(\"imageName\", image);\n      }\n      await vacationsService.updateVacation(Number(id), updatedVacation);\n      navigate(\"/vacations\");\n    } catch (error) {\n      console.error(\"Failed to update vacation:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"EditVacation\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit Vacation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"edit-form\",\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"destination\",\n          children: \"Destination:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"destination\",\n          type: \"text\",\n          ...register(\"destination\", {\n            required: \"Destination is required\"\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), errors.destination && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error\",\n          children: errors.destination.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          children: \"Description:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          ...register(\"description\", {\n            required: \"Description is required\"\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), errors.description && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error\",\n          children: errors.description.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"startDate\",\n          children: \"Start Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"startDate\",\n          type: \"date\",\n          ...register(\"startDate\", {\n            required: \"Start date is required\"\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this), errors.startDate && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error\",\n          children: errors.startDate.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"endDate\",\n          children: \"End Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"endDate\",\n          type: \"date\",\n          ...register(\"endDate\", {\n            required: \"End date is required\",\n            validate: value => new Date(value) >= new Date(setValue(\"startDate\")) || \"End date cannot be before start date\"\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this), errors.endDate && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error\",\n          children: errors.endDate.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"price\",\n          children: \"Price:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"price\",\n          type: \"number\",\n          ...register(\"price\", {\n            required: \"Price is required\",\n            min: {\n              value: 0,\n              message: \"Price must be positive\"\n            },\n            max: {\n              value: 10000,\n              message: \"Price cannot exceed 10,000\"\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), errors.price && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error\",\n          children: errors.price.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"image\",\n          children: \"Image (optional):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"image\",\n          type: \"file\",\n          accept: \"image/*\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-btn\",\n        type: \"submit\",\n        children: \"Update Vacation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n}\n_s(EditVacation, \"+1x+xA12VEYKIzcd6Ks45OEjCUs=\", false, function () {\n  return [useParams, useNavigate, useForm];\n});\n_c = EditVacation;\nvar _c;\n$RefreshReg$(_c, \"EditVacation\");","map":{"version":3,"names":["React","useState","useEffect","useForm","useParams","useNavigate","vacationsService","jsxDEV","_jsxDEV","EditVacation","_s","id","navigate","register","handleSubmit","setValue","formState","errors","image","setImage","fetchVacation","vacationData","getVacationById","Number","destination","description","startDate","endDate","price","error","console","handleFileChange","e","_e$target$files","file","target","files","onSubmit","formData","updatedVacation","FormData","append","toString","updateVacation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","required","message","validate","value","Date","min","max","accept","onChange","_c","$RefreshReg$"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Components/VacationArea/VacationEdit/VacationEdit.tsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import { VacationModel } from \"../../../Models/VacationModel\";\n// import { vacationsService } from \"../../../Services/VacationsService\";\n// import \"./VacationEdit.css\";\n\n// export function EditVacation(): JSX.Element {\n//   const { id } = useParams<{ id: string }>();\n//   const navigate = useNavigate();\n\n//   const [vacation, setVacation] = useState<VacationModel | null>(null);\n//   const [image, setImage] = useState<File | null>(null);\n//   const [formData, setFormData] = useState<\n//     Omit<VacationModel, \"id\" | \"imageName\">\n//   >({\n//     destination: \"\",\n//     description: \"\",\n//     startDate: \"\",\n//     endDate: \"\",\n//     price: 0,\n//     imageUrl: \"\",\n//     isLiked: 0,\n//     likesCount: 0,\n//   });\n//   const [errors, setErrors] = useState<string[]>([]);\n\n//   // Fetch vacation details and populate the form when the component mounts\n//   useEffect(() => {\n//     const fetchVacation = async () => {\n//       try {\n//         const vacationData = await vacationsService.getVacationById(Number(id));\n//         setVacation(vacationData);\n\n//         // Populate form with existing vacation data\n//         setFormData({\n//           destination: vacationData.destination || \"\",\n//           description: vacationData.description || \"\",\n//           startDate: vacationData.startDate || \"\",\n//           endDate: vacationData.endDate || \"\",\n//           price: vacationData.price || 0,\n//           imageUrl: vacationData.imageUrl || \"\",\n//           isLiked: vacationData.isLiked || 0,\n//           likesCount: vacationData.likesCount || 0,\n//         });\n//       } catch (error) {\n//         console.error(\"Failed to fetch vacation:\", error);\n//       }\n//     };\n\n//     fetchVacation();\n//   }, [id]);\n\n//   const handleInputChange = (\n//     e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n//   ) => {\n//     const { name, value } = e.target;\n//     setFormData((prevData) => ({\n//       ...prevData,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     const file = e.target.files?.[0];\n//     setImage(file || null);\n//   };\n\n//   // Validation for form submission\n//   const validateForm = () => {\n//     const newErrors: string[] = [];\n\n//     // Check required fields (except image)\n//     if (!formData.destination) {\n//       newErrors.push(\"Destination is required.\");\n//     }\n//     if (!formData.description) {\n//       newErrors.push(\"Description is required.\");\n//     }\n//     if (!formData.startDate) {\n//       newErrors.push(\"Start date is required.\");\n//     }\n//     if (!formData.endDate) {\n//       newErrors.push(\"End date is required.\");\n//     }\n\n//     // Check price (should be positive and less than 10,000)\n//     if (formData.price < 0 || formData.price > 10000) {\n//       newErrors.push(\"Price must be between 0 and 10,000.\");\n//     }\n\n//     // Check that end date is not before start date\n//     if (new Date(formData.endDate) < new Date(formData.startDate)) {\n//       newErrors.push(\"End date cannot be before the start date.\");\n//     }\n\n//     return newErrors;\n//   };\n\n//   const handleSubmit = async (e: React.FormEvent) => {\n//     e.preventDefault();\n\n//     // Run validation before submitting the form\n//     const formErrors = validateForm();\n//     if (formErrors.length > 0) {\n//       setErrors(formErrors);\n//       return;\n//     }\n\n//     try {\n//       const updatedVacation = new FormData();\n//       updatedVacation.append(\"destination\", formData.destination);\n//       updatedVacation.append(\"description\", formData.description);\n//       updatedVacation.append(\"startDate\", formData.startDate);\n//       updatedVacation.append(\"endDate\", formData.endDate);\n//       updatedVacation.append(\"price\", formData.price.toString());\n//       updatedVacation.append(\"imageUrl\", formData.imageUrl);\n//       updatedVacation.append(\"isLiked\", formData.isLiked.toString());\n//       updatedVacation.append(\"likesCount\", formData.likesCount.toString());\n\n//       // Append the image only if it's selected\n//       if (image) {\n//         updatedVacation.append(\"imageName\", image);\n//       }\n\n//       // Update vacation in the service\n//       await vacationsService.updateVacation(Number(id), updatedVacation);\n//       navigate(\"/vacations\");\n//     } catch (error) {\n//       console.error(\"Failed to update vacation:\", error);\n//     }\n//   };\n\n//   if (!vacation) return <div>Loading...</div>;\n\n//   return (\n//     <div className=\"EditVacation\">\n//       <h2>Edit Vacation</h2>\n\n//       {errors.length > 0 && (\n//         <ul className=\"error-list\">\n//           {errors.map((error, index) => (\n//             <li key={index} className=\"error-item\">\n//               {error}\n//             </li>\n//           ))}\n//         </ul>\n//       )}\n\n//       <form className=\"edit-form\" onSubmit={handleSubmit}>\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"destination\">Destination:</label>\n//           <input\n//             id=\"destination\"\n//             type=\"text\"\n//             name=\"destination\"\n//             value={formData.destination}\n//             onChange={handleInputChange}\n//           />\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"description\">Description:</label>\n//           <textarea\n//             id=\"description\"\n//             name=\"description\"\n//             value={formData.description}\n//             onChange={handleInputChange}\n//           />\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"startDate\">Start Date:</label>\n//           <input\n//             id=\"startDate\"\n//             type=\"date\"\n//             name=\"startDate\"\n//             value={formData.startDate}\n//             onChange={handleInputChange}\n//           />\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"endDate\">End Date:</label>\n//           <input\n//             id=\"endDate\"\n//             type=\"date\"\n//             name=\"endDate\"\n//             value={formData.endDate}\n//             onChange={handleInputChange}\n//           />\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"price\">Price:</label>\n//           <input\n//             id=\"price\"\n//             type=\"number\"\n//             name=\"price\"\n//             value={formData.price}\n//             onChange={handleInputChange}\n//           />\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"image\">Image (optional):</label>\n//           <input\n//             id=\"image\"\n//             type=\"file\"\n//             accept=\"image/*\"\n//             onChange={handleFileChange}\n//           />\n//         </div>\n\n//         <button className=\"submit-btn\" type=\"submit\">\n//           Update Vacation\n//         </button>\n//       </form>\n//     </div>\n//   );\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { VacationModel } from \"../../../Models/VacationModel\";\nimport { vacationsService } from \"../../../Services/VacationsService\";\nimport \"./VacationEdit.css\";\n\nexport function EditVacation(): JSX.Element {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n\n  // Using react-hook-form for form validation\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<VacationModel>();\n\n  const [image, setImage] = useState<File | null>(null);\n\n  useEffect(() => {\n    const fetchVacation = async () => {\n      try {\n        const vacationData = await vacationsService.getVacationById(Number(id));\n\n        // Populate form with existing vacation data\n        setValue(\"destination\", vacationData.destination || \"\");\n        setValue(\"description\", vacationData.description || \"\");\n        setValue(\"startDate\", vacationData.startDate || \"\");\n        setValue(\"endDate\", vacationData.endDate || \"\");\n        setValue(\"price\", vacationData.price || 0);\n      } catch (error) {\n        console.error(\"Failed to fetch vacation:\", error);\n      }\n    };\n\n    fetchVacation();\n  }, [id, setValue]);\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    setImage(file || null);\n  };\n\n  // Form submission\n  const onSubmit = async (formData: VacationModel) => {\n    try {\n      const updatedVacation = new FormData();\n      updatedVacation.append(\"destination\", formData.destination);\n      updatedVacation.append(\"description\", formData.description);\n      updatedVacation.append(\"startDate\", formData.startDate);\n      updatedVacation.append(\"endDate\", formData.endDate);\n      updatedVacation.append(\"price\", formData.price.toString());\n\n      if (image) {\n        updatedVacation.append(\"imageName\", image);\n      }\n\n      await vacationsService.updateVacation(Number(id), updatedVacation);\n      navigate(\"/vacations\");\n    } catch (error) {\n      console.error(\"Failed to update vacation:\", error);\n    }\n  };\n\n  return (\n    <div className=\"EditVacation\">\n      <h2>Edit Vacation</h2>\n\n      <form className=\"edit-form\" onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"input-wrapper\">\n          <label htmlFor=\"destination\">Destination:</label>\n          <input\n            id=\"destination\"\n            type=\"text\"\n            {...register(\"destination\", {\n              required: \"Destination is required\",\n            })}\n          />\n          {errors.destination && (\n            <span className=\"error\">{errors.destination.message}</span>\n          )}\n        </div>\n\n        <div className=\"input-wrapper\">\n          <label htmlFor=\"description\">Description:</label>\n          <textarea\n            id=\"description\"\n            {...register(\"description\", {\n              required: \"Description is required\",\n            })}\n          />\n          {errors.description && (\n            <span className=\"error\">{errors.description.message}</span>\n          )}\n        </div>\n\n        <div className=\"input-wrapper\">\n          <label htmlFor=\"startDate\">Start Date:</label>\n          <input\n            id=\"startDate\"\n            type=\"date\"\n            {...register(\"startDate\", {\n              required: \"Start date is required\",\n            })}\n          />\n          {errors.startDate && (\n            <span className=\"error\">{errors.startDate.message}</span>\n          )}\n        </div>\n\n        <div className=\"input-wrapper\">\n          <label htmlFor=\"endDate\">End Date:</label>\n          <input\n            id=\"endDate\"\n            type=\"date\"\n            {...register(\"endDate\", {\n              required: \"End date is required\",\n              validate: (value) =>\n                new Date(value) >= new Date(setValue(\"startDate\")) ||\n                \"End date cannot be before start date\",\n            })}\n          />\n          {errors.endDate && (\n            <span className=\"error\">{errors.endDate.message}</span>\n          )}\n        </div>\n\n        <div className=\"input-wrapper\">\n          <label htmlFor=\"price\">Price:</label>\n          <input\n            id=\"price\"\n            type=\"number\"\n            {...register(\"price\", {\n              required: \"Price is required\",\n              min: { value: 0, message: \"Price must be positive\" },\n              max: { value: 10000, message: \"Price cannot exceed 10,000\" },\n            })}\n          />\n          {errors.price && (\n            <span className=\"error\">{errors.price.message}</span>\n          )}\n        </div>\n\n        <div className=\"input-wrapper\">\n          <label htmlFor=\"image\">Image (optional):</label>\n          <input\n            id=\"image\"\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleFileChange}\n          />\n        </div>\n\n        <button className=\"submit-btn\" type=\"submit\">\n          Update Vacation\n        </button>\n      </form>\n    </div>\n  );\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AAEzD,SAASC,gBAAgB,QAAQ,oCAAoC;AACrE,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,OAAO,S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"},"metadata":{},"sourceType":"module","externalDependencies":[]}