{"ast":null,"code":"// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n//   public async getAllVacations() {\n//     // If vacations are already in the Redux store, return them to avoid unnecessary API calls\n//     if (store.getState().vacations) return store.getState().vacations;\n//     const response = await axios.get<VacationModel[]>(appConfig.vacationsUrl, {\n//       headers: { Authorization: `Bearer ${store.getState().auth?.token}` },\n//     });\n//     const vacations = response.data;\n\n//     // Sort vacations by start date in ascending order\n//     vacations.sort(\n//       (a, b) =>\n//         new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//     );\n\n//     const action = vacationActions.initVacations(vacations);\n//     store.dispatch(action);\n//     return vacations;\n//   }\n\n//   public async addVacation(vacation: VacationModel) {\n//     const options: AxiosRequestConfig = {\n//       headers: { \"Content-Type\": \"multipart/form-data\" },\n//     };\n//     const response = await axios.post<VacationModel>(\n//       appConfig.vacationsUrl,\n//       vacation,\n//       options\n//     );\n//     if (!store.getState().vacations) return;\n//     const addedVacation = response.data;\n\n//     // Dispatch the added vacation to the Redux store\n//     const action = vacationActions.addVacation(addedVacation);\n//     store.dispatch(action);\n\n//     // Return sorted vacations after adding the new one\n//     this.sortVacations();\n//   }\n\n//   // Function to delete a vacation by id\n//   public async deleteVacation(vacationId: number) {\n//     const response = await axios.delete<VacationModel>(\n//       appConfig.vacationsUrl + vacationId\n//     );\n//     const deletedVacation = response.data;\n//     const action = vacationActions.deleteVacation(deletedVacation.id);\n//     store.dispatch(action);\n//   }\n\n//   // Function to toggle like a vacation by id\n//   public async toggleLike(vacationId: number) {\n//     try {\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${store.getState().auth?.token}` },\n//         }\n//       );\n\n//       const updatedVacation = response.data;\n\n//       // Update the Redux store with the updated vacation\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n\n//       // Return the updated vacation\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // function to sort vacations in the Redux store\n//   private sortVacations() {\n//     const sortedVacations = [...store.getState().vacations].sort(\n//       (a, b) =>\n//         new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//     );\n//     const action = vacationActions.initVacations(sortedVacations);\n//     store.dispatch(action);\n//   }\n// }\n\n// export const vacationsService = new VacationsService();\n\nimport axios from \"axios\";\nimport { store, vacationActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\nclass VacationsService {\n  // Function to get all vacations\n  async getAllVacations() {\n    try {\n      var _store$getState$auth;\n      axios.get(appConfig.vacationsUrl, {\n        headers: {\n          Authorization: `Bearer ${(_store$getState$auth = store.getState().auth) === null || _store$getState$auth === void 0 ? void 0 : _store$getState$auth.token}`\n        }\n      });\n    } catch {}\n  }\n\n  // Function to add a vacation\n  async addVacation(vacation) {\n    try {\n      var _store$getState$auth2;\n      const token = (_store$getState$auth2 = store.getState().auth) === null || _store$getState$auth2 === void 0 ? void 0 : _store$getState$auth2.token;\n      if (!token) {\n        console.warn(\"Token is not available.\");\n        throw new Error(\"Unauthorized access. Please log in.\");\n      }\n      const options = {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `Bearer ${token}`\n        }\n      };\n      const response = await axios.post(appConfig.vacationsUrl, vacation, options);\n      const addedVacation = response.data;\n\n      // Dispatch the added vacation to the Redux store\n      const action = vacationActions.addVacation(addedVacation);\n      store.dispatch(action);\n\n      // Fetch all vacations again to ensure the list is up-to-date\n      await this.getAllVacations();\n    } catch (error) {\n      console.error(\"Failed to add vacation:\", error);\n      throw error;\n    }\n  }\n\n  // Function to delete a vacation by id\n  async deleteVacation(vacationId) {\n    try {\n      var _store$getState$auth3;\n      const token = (_store$getState$auth3 = store.getState().auth) === null || _store$getState$auth3 === void 0 ? void 0 : _store$getState$auth3.token;\n      if (!token) {\n        console.warn(\"Token is not available.\");\n        throw new Error(\"Unauthorized access. Please log in.\");\n      }\n      await axios.delete(`${appConfig.vacationsUrl}${vacationId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const action = vacationActions.deleteVacation(vacationId);\n      store.dispatch(action);\n    } catch (error) {\n      console.error(\"Failed to delete vacation:\", error);\n      throw error;\n    }\n  }\n\n  // Function to toggle like a vacation by id\n  async toggleLike(vacationId) {\n    try {\n      var _store$getState$auth4;\n      const token = (_store$getState$auth4 = store.getState().auth) === null || _store$getState$auth4 === void 0 ? void 0 : _store$getState$auth4.token;\n      if (!token) {\n        console.warn(\"Token is not available.\");\n        throw new Error(\"Unauthorized access. Please log in.\");\n      }\n      const response = await axios.patch(`${appConfig.vacationsUrl}toggle-like/${vacationId}`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const updatedVacation = response.data;\n\n      // Update the Redux store with the updated vacation\n      const action = vacationActions.updateVacation(updatedVacation);\n      store.dispatch(action);\n      return updatedVacation;\n    } catch (error) {\n      console.error(\"Failed to toggle like:\", error);\n      throw error;\n    }\n  }\n\n  // Function to sort vacations in the Redux store\n  sortVacations() {\n    const state = store.getState();\n    if (!state.vacations || state.vacations.length === 0) return;\n    const sortedVacations = [...state.vacations].sort((a, b) => new Date(a.startDate).getTime() - new Date(b.startDate).getTime());\n    const action = vacationActions.initVacations(sortedVacations);\n    store.dispatch(action);\n  }\n}\nexport const vacationsService = new VacationsService();","map":{"version":3,"names":["axios","store","vacationActions","appConfig","VacationsService","getAllVacations","_store$getState$auth","get","vacationsUrl","headers","Authorization","getState","auth","token","addVacation","vacation","_store$getState$auth2","console","warn","Error","options","response","post","addedVacation","data","action","dispatch","error","deleteVacation","vacationId","_store$getState$auth3","delete","toggleLike","_store$getState$auth4","patch","updatedVacation","updateVacation","sortVacations","state","vacations","length","sortedVacations","sort","a","b","Date","startDate","getTime","initVacations","vacationsService"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Services/VacationsService.ts"],"sourcesContent":["// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n//   public async getAllVacations() {\n//     // If vacations are already in the Redux store, return them to avoid unnecessary API calls\n//     if (store.getState().vacations) return store.getState().vacations;\n//     const response = await axios.get<VacationModel[]>(appConfig.vacationsUrl, {\n//       headers: { Authorization: `Bearer ${store.getState().auth?.token}` },\n//     });\n//     const vacations = response.data;\n\n//     // Sort vacations by start date in ascending order\n//     vacations.sort(\n//       (a, b) =>\n//         new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//     );\n\n//     const action = vacationActions.initVacations(vacations);\n//     store.dispatch(action);\n//     return vacations;\n//   }\n\n//   public async addVacation(vacation: VacationModel) {\n//     const options: AxiosRequestConfig = {\n//       headers: { \"Content-Type\": \"multipart/form-data\" },\n//     };\n//     const response = await axios.post<VacationModel>(\n//       appConfig.vacationsUrl,\n//       vacation,\n//       options\n//     );\n//     if (!store.getState().vacations) return;\n//     const addedVacation = response.data;\n\n//     // Dispatch the added vacation to the Redux store\n//     const action = vacationActions.addVacation(addedVacation);\n//     store.dispatch(action);\n\n//     // Return sorted vacations after adding the new one\n//     this.sortVacations();\n//   }\n\n//   // Function to delete a vacation by id\n//   public async deleteVacation(vacationId: number) {\n//     const response = await axios.delete<VacationModel>(\n//       appConfig.vacationsUrl + vacationId\n//     );\n//     const deletedVacation = response.data;\n//     const action = vacationActions.deleteVacation(deletedVacation.id);\n//     store.dispatch(action);\n//   }\n\n//   // Function to toggle like a vacation by id\n//   public async toggleLike(vacationId: number) {\n//     try {\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${store.getState().auth?.token}` },\n//         }\n//       );\n\n//       const updatedVacation = response.data;\n\n//       // Update the Redux store with the updated vacation\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n\n//       // Return the updated vacation\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // function to sort vacations in the Redux store\n//   private sortVacations() {\n//     const sortedVacations = [...store.getState().vacations].sort(\n//       (a, b) =>\n//         new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//     );\n//     const action = vacationActions.initVacations(sortedVacations);\n//     store.dispatch(action);\n//   }\n// }\n\n// export const vacationsService = new VacationsService();\n\nimport axios, { AxiosRequestConfig } from \"axios\";\nimport { VacationModel } from \"../Models/VacationModel\";\nimport { store, vacationActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\n\nclass VacationsService {\n  // Function to get all vacations\n  public async getAllVacations(): Promise<VacationModel[]> {\n    try {\n      axios.get<VacationModel[]>(appConfig.vacationsUrl, {\n        headers: { Authorization: `Bearer ${store.getState().auth?.token}` },\n      }) \n    }catch {\n\n    }\n  }\n\n  // Function to add a vacation\n  public async addVacation(vacation: VacationModel): Promise<void> {\n    try {\n      const token = store.getState().auth?.token;\n      if (!token) {\n        console.warn(\"Token is not available.\");\n        throw new Error(\"Unauthorized access. Please log in.\");\n      }\n\n      const options: AxiosRequestConfig = {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `Bearer ${token}`,\n        },\n      };\n\n      const response = await axios.post<VacationModel>(\n        appConfig.vacationsUrl,\n        vacation,\n        options\n      );\n\n      const addedVacation = response.data;\n\n      // Dispatch the added vacation to the Redux store\n      const action = vacationActions.addVacation(addedVacation);\n      store.dispatch(action);\n\n      // Fetch all vacations again to ensure the list is up-to-date\n      await this.getAllVacations();\n    } catch (error) {\n      console.error(\"Failed to add vacation:\", error);\n      throw error;\n    }\n  }\n\n  // Function to delete a vacation by id\n  public async deleteVacation(vacationId: number): Promise<void> {\n    try {\n      const token = store.getState().auth?.token;\n      if (!token) {\n        console.warn(\"Token is not available.\");\n        throw new Error(\"Unauthorized access. Please log in.\");\n      }\n\n      await axios.delete<VacationModel>(\n        `${appConfig.vacationsUrl}${vacationId}`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n\n      const action = vacationActions.deleteVacation(vacationId);\n      store.dispatch(action);\n    } catch (error) {\n      console.error(\"Failed to delete vacation:\", error);\n      throw error;\n    }\n  }\n\n  // Function to toggle like a vacation by id\n  public async toggleLike(vacationId: number): Promise<VacationModel> {\n    try {\n      const token = store.getState().auth?.token;\n      if (!token) {\n        console.warn(\"Token is not available.\");\n        throw new Error(\"Unauthorized access. Please log in.\");\n      }\n\n      const response = await axios.patch<VacationModel>(\n        `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n        {},\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n\n      const updatedVacation = response.data;\n\n      // Update the Redux store with the updated vacation\n      const action = vacationActions.updateVacation(updatedVacation);\n      store.dispatch(action);\n\n      return updatedVacation;\n    } catch (error) {\n      console.error(\"Failed to toggle like:\", error);\n      throw error;\n    }\n  }\n\n  // Function to sort vacations in the Redux store\n  private sortVacations(): void {\n    const state = store.getState();\n    if (!state.vacations || state.vacations.length === 0) return;\n\n    const sortedVacations = [...state.vacations].sort(\n      (a, b) =>\n        new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n    );\n\n    const action = vacationActions.initVacations(sortedVacations);\n    store.dispatch(action);\n  }\n}\n\nexport const vacationsService = new VacationsService();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}