{"ast":null,"code":"// import axios from \"axios\";\n// import { jwtDecode } from \"jwt-decode\";\n// import { CredentialsModel } from \"../Models/CredentialsModel\";\n// import { UserModel } from \"../Models/UserModel\";\n// import { store, userActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class UserService {\n//   public constructor() {\n//     const token = localStorage.getItem(\"token\");\n//     if (!token) return;\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async register(user: UserModel) {\n//     // Send user to backend:\n//     const response = await axios.post<{ token: string; user: UserModel }>(\n//       appConfig.registerUrl,\n//       user\n//     );\n\n//     // Get token and user:\n//     const { token, user: dbUser } = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async login(credentials: CredentialsModel): Promise<UserModel> {\n//     // Send credentials to backend:\n//     const response = await axios.post<{ token: string; user: UserModel }>(\n//       appConfig.loginUrl,\n//       credentials\n//     );\n\n//     // Get token and user:\n//     const { token, user: dbUser } = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n\n//     // Return user object\n//     return dbUser;\n//   }\n\n//   public logout() {\n//     // Remove token from storage\n//     localStorage.removeItem(\"token\");\n\n//     // Remove token from Axios header\n//     delete axios.defaults.headers.common[\"Authorization\"];\n\n//     const action = userActions.logoutUser();\n//     store.dispatch(action);\n//   }\n// }\n\n// export const userService = new UserService();\n\n// UserService.ts\n\n// src/Services/UserService.ts\n// src/Services/UserService.ts\n// src/Services/UserService.ts\n\nimport axios from \"axios\";\n// import { jwtDecode } from \"jwt-decode\";\n\nimport { store, authActions, userActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\nclass UserService {\n  constructor() {\n    const token = localStorage.getItem(\"token\");\n    if (!token) return;\n\n    // Set token in Axios header\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    try {\n      const container = jwtDecode(token);\n      const dbUser = container.user;\n\n      // Dispatch the user to redux store\n      store.dispatch(userActions.initUser(dbUser));\n    } catch (error) {\n      console.error(\"Error decoding token in UserService constructor:\", error);\n    }\n  }\n  async register(user) {\n    store.dispatch(authActions.loginStart());\n    try {\n      const response = await axios.post(appConfig.registerUrl, user);\n      const {\n        token,\n        user: dbUser\n      } = response.data;\n      localStorage.setItem(\"token\", token);\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n      store.dispatch(userActions.initUser(dbUser));\n      store.dispatch(authActions.loginSuccess(token));\n    } catch (error) {\n      store.dispatch(authActions.loginFailure());\n      throw error;\n    }\n  }\n  async login(credentials) {\n    store.dispatch(authActions.loginStart());\n    try {\n      const response = await axios.post(appConfig.loginUrl, credentials);\n      const {\n        token,\n        user: dbUser\n      } = response.data;\n      localStorage.setItem(\"token\", token);\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n      store.dispatch(userActions.initUser(dbUser));\n      store.dispatch(authActions.loginSuccess(token));\n      return dbUser;\n    } catch (error) {\n      store.dispatch(authActions.loginFailure());\n      throw error;\n    }\n  }\n  logout() {\n    store.dispatch(userActions.logoutUser());\n    store.dispatch(authActions.logout());\n    delete axios.defaults.headers.common[\"Authorization\"];\n  }\n}\nexport const userService = new UserService();","map":{"version":3,"names":["axios","store","authActions","userActions","appConfig","UserService","constructor","token","localStorage","getItem","defaults","headers","common","container","jwtDecode","dbUser","user","dispatch","initUser","error","console","register","loginStart","response","post","registerUrl","data","setItem","loginSuccess","loginFailure","login","credentials","loginUrl","logout","logoutUser","userService"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Services/UserService.ts"],"sourcesContent":["// import axios from \"axios\";\n// import { jwtDecode } from \"jwt-decode\";\n// import { CredentialsModel } from \"../Models/CredentialsModel\";\n// import { UserModel } from \"../Models/UserModel\";\n// import { store, userActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class UserService {\n//   public constructor() {\n//     const token = localStorage.getItem(\"token\");\n//     if (!token) return;\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async register(user: UserModel) {\n//     // Send user to backend:\n//     const response = await axios.post<{ token: string; user: UserModel }>(\n//       appConfig.registerUrl,\n//       user\n//     );\n\n//     // Get token and user:\n//     const { token, user: dbUser } = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async login(credentials: CredentialsModel): Promise<UserModel> {\n//     // Send credentials to backend:\n//     const response = await axios.post<{ token: string; user: UserModel }>(\n//       appConfig.loginUrl,\n//       credentials\n//     );\n\n//     // Get token and user:\n//     const { token, user: dbUser } = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n\n//     // Return user object\n//     return dbUser;\n//   }\n\n//   public logout() {\n//     // Remove token from storage\n//     localStorage.removeItem(\"token\");\n\n//     // Remove token from Axios header\n//     delete axios.defaults.headers.common[\"Authorization\"];\n\n//     const action = userActions.logoutUser();\n//     store.dispatch(action);\n//   }\n// }\n\n// export const userService = new UserService();\n\n// UserService.ts\n\n// src/Services/UserService.ts\n// src/Services/UserService.ts\n// src/Services/UserService.ts\n\nimport axios from \"axios\";\n// import { jwtDecode } from \"jwt-decode\";\nimport { CredentialsModel } from \"../Models/CredentialsModel\";\nimport { UserModel } from \"../Models/UserModel\";\nimport { store, authActions, userActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\n\nclass UserService {\n  public constructor() {\n    const token = localStorage.getItem(\"token\");\n    if (!token) return;\n\n    // Set token in Axios header\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n    try {\n      const container = jwtDecode<{ user: UserModel }>(token);\n      const dbUser = container.user;\n\n      // Dispatch the user to redux store\n      store.dispatch(userActions.initUser(dbUser));\n    } catch (error) {\n      console.error(\"Error decoding token in UserService constructor:\", error);\n    }\n  }\n\n  public async register(user: UserModel) {\n    store.dispatch(authActions.loginStart());\n    try {\n      const response = await axios.post<{ token: string; user: UserModel }>(\n        appConfig.registerUrl,\n        user\n      );\n      const { token, user: dbUser } = response.data;\n\n      localStorage.setItem(\"token\", token);\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n      store.dispatch(userActions.initUser(dbUser));\n      store.dispatch(authActions.loginSuccess(token));\n    } catch (error) {\n      store.dispatch(authActions.loginFailure());\n      throw error;\n    }\n  }\n\n  public async login(credentials: CredentialsModel): Promise<UserModel> {\n    store.dispatch(authActions.loginStart());\n    try {\n      const response = await axios.post<{ token: string; user: UserModel }>(\n        appConfig.loginUrl,\n        credentials\n      );\n      const { token, user: dbUser } = response.data;\n\n      localStorage.setItem(\"token\", token);\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n      store.dispatch(userActions.initUser(dbUser));\n      store.dispatch(authActions.loginSuccess(token));\n\n      return dbUser;\n    } catch (error) {\n      store.dispatch(authActions.loginFailure());\n      throw error;\n    }\n  }\n\n  public logout() {\n    store.dispatch(userActions.logoutUser());\n    store.dispatch(authActions.logout());\n    delete axios.defaults.headers.common[\"Authorization\"];\n  }\n}\n\nexport const userService = new UserService();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}