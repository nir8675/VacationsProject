{"ast":null,"code":"// store.ts\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\";\nimport { addVacation, deleteVacation, updateVacation, initVacations } from \"./reducers\";\n\n// Application state:\n\n// Creating Vacations slice:\nconst vacationSlice = createSlice({\n  name: \"vacations\",\n  // Internal use\n  initialState: [],\n  reducers: {\n    initVacations,\n    addVacation,\n    deleteVacation,\n    updateVacation\n  }\n});\n\n// Create user slice:\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: null,\n  reducers: {\n    initUser(state, action) {\n      return action.payload; // Update user state with user data\n    },\n    logoutUser() {\n      return null; // Clear user state on logout\n    }\n  }\n});\n\n// Create auth slice:\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    token: localStorage.getItem(\"token\"),\n    loading: false\n  },\n  reducers: {\n    loginStart(state) {\n      state.loading = true;\n    },\n    loginSuccess(state, action) {\n      state.token = action.payload.token;\n      localStorage.setItem(\"token\", action.payload.token); // Save token in localStorage\n\n      // Dispatch an action to update user state\n      store.dispatch(userActions.initUser(action.payload.user));\n      state.loading = false;\n    },\n    loginFailure(state) {\n      state.loading = false;\n    },\n    logout(state) {\n      state.token = null;\n      localStorage.removeItem(\"token\"); // Remove token from localStorage\n      store.dispatch(userActions.logoutUser()); // Clear user state\n      state.loading = false;\n    }\n  }\n});\n\n// Export action creators:\nexport const vacationActions = vacationSlice.actions;\nexport const userActions = userSlice.actions;\nexport const authActions = authSlice.actions;\n\n// Main redux object:\nexport const store = configureStore({\n  reducer: {\n    vacations: vacationSlice.reducer,\n    // Vacation state.\n    user: userSlice.reducer,\n    // User state\n    auth: authSlice.reducer // Auth state\n  }\n});\n\n// import { configureStore, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n// import { UserModel } from \"../Models/UserModel\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import {\n//   addVacation,\n//   deleteVacation,\n//   updateVacation,\n//   initUser,\n//   initVacations,\n//   logoutUser,\n// } from \"./reducers\";\n\n// // Application state:\n// export type AppState = {\n//   vacations: VacationModel[];\n//   user: UserModel | null;\n//   auth: { token: string | null; loading: boolean };\n// };\n\n// // Creating Vacations slice:\n// const vacationSlice = createSlice({\n//   name: \"vacations\", // Internal use\n//   initialState: [] as VacationModel[],\n//   reducers: { initVacations, addVacation, deleteVacation, updateVacation },\n// });\n\n// // Create user slice:\n// const userSlice = createSlice({\n//   name: \"user\",\n//   initialState: null as UserModel | null,\n//   reducers: { initUser, logoutUser },\n// });\n\n// // Create auth slice:\n// const authSlice = createSlice({\n//   name: \"auth\",\n//   initialState: {\n//     token: localStorage.getItem(\"token\"),\n//     loading: false,\n//   },\n//   reducers: {\n//     loginStart(state) {\n//       state.loading = true;\n//     },\n//     loginSuccess(state, action: PayloadAction<string>) {\n//       state.token = action.payload;\n//       localStorage.setItem(\"token\", action.payload); // Save token in localStorage\n//       state.loading = false;\n//     },\n//     loginFailure(state) {\n//       state.loading = false;\n//     },\n//     logout(state) {\n//       state.token = null;\n//       localStorage.removeItem(\"token\"); // Remove token from localStorage\n//       state.loading = false;\n//     },\n//   },\n// });\n\n// // Export action creators:\n// export const vacationActions = vacationSlice.actions;\n// export const userActions = userSlice.actions;\n// export const authActions = authSlice.actions;\n\n// // Main redux object:\n// export const store = configureStore({\n//   reducer: {\n//     vacations: vacationSlice.reducer, // Vacation state.\n//     user: userSlice.reducer, // User state\n//     auth: authSlice.reducer, // Auth state\n//   },\n// });","map":{"version":3,"names":["configureStore","createSlice","addVacation","deleteVacation","updateVacation","initVacations","vacationSlice","name","initialState","reducers","userSlice","initUser","state","action","payload","logoutUser","authSlice","token","localStorage","getItem","loading","loginStart","loginSuccess","setItem","store","dispatch","userActions","user","loginFailure","logout","removeItem","vacationActions","actions","authActions","reducer","vacations","auth"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Redux/store.ts"],"sourcesContent":["// store.ts\r\nimport { configureStore, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { UserModel } from \"../Models/UserModel\";\r\nimport { VacationModel } from \"../Models/VacationModel\";\r\nimport {\r\n  addVacation,\r\n  deleteVacation,\r\n  updateVacation,\r\n  initUser,\r\n  initVacations,\r\n  logoutUser,\r\n} from \"./reducers\";\r\n\r\n// Application state:\r\nexport type AppState = {\r\n  vacations: VacationModel[];\r\n  user: UserModel | null;\r\n  auth: { token: string | null; loading: boolean };\r\n};\r\n\r\n// Creating Vacations slice:\r\nconst vacationSlice = createSlice({\r\n  name: \"vacations\", // Internal use\r\n  initialState: [] as VacationModel[],\r\n  reducers: { initVacations, addVacation, deleteVacation, updateVacation },\r\n});\r\n\r\n// Create user slice:\r\nconst userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: null as UserModel | null,\r\n  reducers: {\r\n    initUser(state, action: PayloadAction<UserModel>) {\r\n      return action.payload; // Update user state with user data\r\n    },\r\n    logoutUser() {\r\n      return null; // Clear user state on logout\r\n    },\r\n  },\r\n});\r\n\r\n// Create auth slice:\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    token: localStorage.getItem(\"token\"),\r\n    loading: false,\r\n  },\r\n  reducers: {\r\n    loginStart(state) {\r\n      state.loading = true;\r\n    },\r\n    loginSuccess(state, action: PayloadAction<{ token: string, user: UserModel }>) {\r\n      state.token = action.payload.token;\r\n      localStorage.setItem(\"token\", action.payload.token); // Save token in localStorage\r\n\r\n      // Dispatch an action to update user state\r\n      store.dispatch(userActions.initUser(action.payload.user));\r\n\r\n      state.loading = false;\r\n    },\r\n    loginFailure(state) {\r\n      state.loading = false;\r\n    },\r\n    logout(state) {\r\n      state.token = null;\r\n      localStorage.removeItem(\"token\"); // Remove token from localStorage\r\n      store.dispatch(userActions.logoutUser()); // Clear user state\r\n      state.loading = false;\r\n    },\r\n  },\r\n});\r\n\r\n// Export action creators:\r\nexport const vacationActions = vacationSlice.actions;\r\nexport const userActions = userSlice.actions;\r\nexport const authActions = authSlice.actions;\r\n\r\n// Main redux object:\r\nexport const store = configureStore({\r\n  reducer: {\r\n    vacations: vacationSlice.reducer, // Vacation state.\r\n    user: userSlice.reducer, // User state\r\n    auth: authSlice.reducer, // Auth state\r\n  },\r\n});\r\n\r\n// import { configureStore, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n// import { UserModel } from \"../Models/UserModel\";\r\n// import { VacationModel } from \"../Models/VacationModel\";\r\n// import {\r\n//   addVacation,\r\n//   deleteVacation,\r\n//   updateVacation,\r\n//   initUser,\r\n//   initVacations,\r\n//   logoutUser,\r\n// } from \"./reducers\";\r\n\r\n// // Application state:\r\n// export type AppState = {\r\n//   vacations: VacationModel[];\r\n//   user: UserModel | null;\r\n//   auth: { token: string | null; loading: boolean };\r\n// };\r\n\r\n// // Creating Vacations slice:\r\n// const vacationSlice = createSlice({\r\n//   name: \"vacations\", // Internal use\r\n//   initialState: [] as VacationModel[],\r\n//   reducers: { initVacations, addVacation, deleteVacation, updateVacation },\r\n// });\r\n\r\n// // Create user slice:\r\n// const userSlice = createSlice({\r\n//   name: \"user\",\r\n//   initialState: null as UserModel | null,\r\n//   reducers: { initUser, logoutUser },\r\n// });\r\n\r\n// // Create auth slice:\r\n// const authSlice = createSlice({\r\n//   name: \"auth\",\r\n//   initialState: {\r\n//     token: localStorage.getItem(\"token\"),\r\n//     loading: false,\r\n//   },\r\n//   reducers: {\r\n//     loginStart(state) {\r\n//       state.loading = true;\r\n//     },\r\n//     loginSuccess(state, action: PayloadAction<string>) {\r\n//       state.token = action.payload;\r\n//       localStorage.setItem(\"token\", action.payload); // Save token in localStorage\r\n//       state.loading = false;\r\n//     },\r\n//     loginFailure(state) {\r\n//       state.loading = false;\r\n//     },\r\n//     logout(state) {\r\n//       state.token = null;\r\n//       localStorage.removeItem(\"token\"); // Remove token from localStorage\r\n//       state.loading = false;\r\n//     },\r\n//   },\r\n// });\r\n\r\n// // Export action creators:\r\n// export const vacationActions = vacationSlice.actions;\r\n// export const userActions = userSlice.actions;\r\n// export const authActions = authSlice.actions;\r\n\r\n// // Main redux object:\r\n// export const store = configureStore({\r\n//   reducer: {\r\n//     vacations: vacationSlice.reducer, // Vacation state.\r\n//     user: userSlice.reducer, // User state\r\n//     auth: authSlice.reducer, // Auth state\r\n//   },\r\n// });\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}