{"ast":null,"code":"import axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { store, authActions, userActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\nclass UserService {\n  constructor() {\n    const token = localStorage.getItem(\"token\");\n    if (!token) return;\n\n    // Set token in Axios header\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    try {\n      const container = jwtDecode(token);\n      const dbUser = container.user;\n\n      // Dispatch the user to redux store\n      store.dispatch(userActions.initUser(dbUser));\n    } catch (error) {\n      console.error(\"Error decoding token in UserService constructor:\", error);\n    }\n  }\n  async register(user) {\n    // Notify Redux that the login process is starting\n    store.dispatch(authActions.loginStart());\n    try {\n      // Sending the registration request to the backend\n      const response = await axios.post(appConfig.registerUrl,\n      // URL for registration\n      user // user data sent to the backend\n      );\n\n      // Extract the token and user details from the server response\n      const {\n        token,\n        user: dbUser\n      } = response.data;\n\n      // Save the token in localStorage for session persistence\n      localStorage.setItem(\"token\", token);\n\n      // Set the token in Axios default headers for all future requests\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n      // Dispatch user information to Redux store\n      store.dispatch(userActions.initUser(dbUser));\n\n      // Dispatch success action with the token to mark login completion\n      store.dispatch(authActions.loginSuccess(token));\n    } catch (error) {\n      // If there's an error, dispatch the login failure action\n      store.dispatch(authActions.loginFailure());\n      throw error;\n    }\n  }\n  async login(credentials) {\n    store.dispatch(authActions.loginStart());\n    try {\n      const response = await axios.post(appConfig.loginUrl, credentials);\n      const {\n        token,\n        user: dbUser\n      } = response.data;\n      localStorage.setItem(\"token\", token);\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n      store.dispatch(userActions.initUser(dbUser));\n      store.dispatch(authActions.loginSuccess(token));\n      return dbUser;\n    } catch (error) {\n      store.dispatch(authActions.loginFailure());\n      throw error;\n    }\n  }\n  logout() {\n    store.dispatch(userActions.logoutUser());\n    store.dispatch(authActions.logout());\n    delete axios.defaults.headers.common[\"Authorization\"];\n  }\n}\nexport const userService = new UserService();","map":{"version":3,"names":["axios","jwtDecode","store","authActions","userActions","appConfig","UserService","constructor","token","localStorage","getItem","defaults","headers","common","container","dbUser","user","dispatch","initUser","error","console","register","loginStart","response","post","registerUrl","data","setItem","loginSuccess","loginFailure","login","credentials","loginUrl","logout","logoutUser","userService"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Services/UserService.ts"],"sourcesContent":["import axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { CredentialsModel } from \"../Models/CredentialsModel\";\nimport { UserModel } from \"../Models/UserModel\";\nimport { store, authActions, userActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\n\nclass UserService {\n  public constructor() {\n    const token = localStorage.getItem(\"token\");\n    if (!token) return;\n\n    // Set token in Axios header\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n    try {\n      const container = jwtDecode<{ user: UserModel }>(token);\n      const dbUser = container.user;\n\n      // Dispatch the user to redux store\n      store.dispatch(userActions.initUser(dbUser));\n    } catch (error) {\n      console.error(\"Error decoding token in UserService constructor:\", error);\n    }\n  }\n\n  public async register(user: UserModel) {\n    // Notify Redux that the login process is starting\n    store.dispatch(authActions.loginStart());\n    try {\n      // Sending the registration request to the backend\n      const response = await axios.post<{ token: string; user: UserModel }>(\n        appConfig.registerUrl, // URL for registration\n        user // user data sent to the backend\n      );\n\n      // Extract the token and user details from the server response\n      const { token, user: dbUser } = response.data;\n\n      // Save the token in localStorage for session persistence\n      localStorage.setItem(\"token\", token);\n\n      // Set the token in Axios default headers for all future requests\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n      // Dispatch user information to Redux store\n      store.dispatch(userActions.initUser(dbUser));\n\n      // Dispatch success action with the token to mark login completion\n      store.dispatch(authActions.loginSuccess(token));\n    } catch (error) {\n      // If there's an error, dispatch the login failure action\n      store.dispatch(authActions.loginFailure());\n      throw error;\n    }\n  }\n\n  public async login(credentials: CredentialsModel): Promise<UserModel> {\n    store.dispatch(authActions.loginStart());\n    try {\n      const response = await axios.post<{ token: string; user: UserModel }>(\n        appConfig.loginUrl,\n        credentials\n      );\n      const { token, user: dbUser } = response.data;\n\n      localStorage.setItem(\"token\", token);\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n      store.dispatch(userActions.initUser(dbUser));\n      store.dispatch(authActions.loginSuccess(token));\n\n      return dbUser;\n    } catch (error) {\n      store.dispatch(authActions.loginFailure());\n      throw error;\n    }\n  }\n\n  public logout() {\n    store.dispatch(userActions.logoutUser());\n    store.dispatch(authActions.logout());\n    delete axios.defaults.headers.common[\"Authorization\"];\n  }\n}\n\nexport const userService = new UserService();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}