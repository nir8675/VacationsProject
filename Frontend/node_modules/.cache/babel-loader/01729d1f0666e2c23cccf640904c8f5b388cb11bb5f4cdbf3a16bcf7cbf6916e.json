{"ast":null,"code":"// import axios from \"axios\";\n// import { jwtDecode } from \"jwt-decode\";\n// import { CredentialsModel } from \"../Models/CredentialsModel\";\n// import { UserModel } from \"../Models/UserModel\";\n// import { store, userActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class UserService {\n//   public constructor() {\n//     const token = localStorage.getItem(\"token\");\n//     if (!token) return;\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async register(user: UserModel) {\n//     // Send user to backend:\n//     const response = await axios.post<{ token: string; user: UserModel }>(\n//       appConfig.registerUrl,\n//       user\n//     );\n\n//     // Get token and user:\n//     const { token, user: dbUser } = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async login(credentials: CredentialsModel): Promise<UserModel> {\n//     // Send credentials to backend:\n//     const response = await axios.post<{ token: string; user: UserModel }>(\n//       appConfig.loginUrl,\n//       credentials\n//     );\n\n//     // Get token and user:\n//     const { token, user: dbUser } = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n\n//     // Return user object\n//     return dbUser;\n//   }\n\n//   public logout() {\n//     // Remove token from storage\n//     localStorage.removeItem(\"token\");\n\n//     // Remove token from Axios header\n//     delete axios.defaults.headers.common[\"Authorization\"];\n\n//     const action = userActions.logoutUser();\n//     store.dispatch(action);\n//   }\n// }\n\n// export const userService = new UserService();\n\n// UserService.ts\n\n// src/Services/UserService.ts\n// src/Services/UserService.ts\n\nimport axios from \"axios\";\n//import { jwtDecode } from \"jwt-decode\";\n\nimport { store, userActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\nclass UserService {\n  // סטטוס טעינה\n\n  constructor() {\n    this.isLoading = false;\n    const token = localStorage.getItem(\"token\");\n    console.log(\"Loaded token in UserService constructor:\", token); // לוג לבדיקה\n\n    if (!token) return;\n\n    // Set token in Axios header\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    console.log(\"Token set in Axios in UserService constructor:\", axios.defaults.headers.common[\"Authorization\"]);\n    try {\n      // Decode the token to get user details\n      const container = jwtDecode(token);\n      const dbUser = container.user;\n      console.log(\"Decoded user in UserService constructor:\", dbUser);\n\n      // Dispatch the user to redux store\n      const action = userActions.initUser(dbUser);\n      store.dispatch(action);\n    } catch (error) {\n      console.error(\"Error decoding token in UserService constructor:\", error);\n    }\n  }\n  async register(user) {\n    this.isLoading = true; // התחל טעינה\n    const response = await axios.post(appConfig.registerUrl, user);\n    const {\n      token,\n      user: dbUser\n    } = response.data;\n    localStorage.setItem(\"token\", token);\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    console.log(\"Token set in Axios after register:\", axios.defaults.headers.common[\"Authorization\"]);\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n    this.isLoading = false; // סיום טעינה\n  }\n  async login(credentials) {\n    this.isLoading = true; // התחל טעינה\n    const response = await axios.post(appConfig.loginUrl, credentials);\n    const {\n      token,\n      user: dbUser\n    } = response.data;\n    localStorage.setItem(\"token\", token);\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    console.log(\"Token set in Axios after login:\", axios.defaults.headers.common[\"Authorization\"]);\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n    this.isLoading = false; // סיום טעינה\n    return dbUser;\n  }\n  logout() {\n    localStorage.removeItem(\"token\");\n    delete axios.defaults.headers.common[\"Authorization\"];\n    console.log(\"Token removed from Axios after logout\");\n    const action = userActions.logoutUser();\n    store.dispatch(action);\n  }\n}\nexport const userService = new UserService();","map":{"version":3,"names":["axios","store","userActions","appConfig","UserService","constructor","isLoading","token","localStorage","getItem","console","log","defaults","headers","common","container","jwtDecode","dbUser","user","action","initUser","dispatch","error","register","response","post","registerUrl","data","setItem","login","credentials","loginUrl","logout","removeItem","logoutUser","userService"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Services/UserService.ts"],"sourcesContent":["// import axios from \"axios\";\n// import { jwtDecode } from \"jwt-decode\";\n// import { CredentialsModel } from \"../Models/CredentialsModel\";\n// import { UserModel } from \"../Models/UserModel\";\n// import { store, userActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class UserService {\n//   public constructor() {\n//     const token = localStorage.getItem(\"token\");\n//     if (!token) return;\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async register(user: UserModel) {\n//     // Send user to backend:\n//     const response = await axios.post<{ token: string; user: UserModel }>(\n//       appConfig.registerUrl,\n//       user\n//     );\n\n//     // Get token and user:\n//     const { token, user: dbUser } = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async login(credentials: CredentialsModel): Promise<UserModel> {\n//     // Send credentials to backend:\n//     const response = await axios.post<{ token: string; user: UserModel }>(\n//       appConfig.loginUrl,\n//       credentials\n//     );\n\n//     // Get token and user:\n//     const { token, user: dbUser } = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n\n//     // Return user object\n//     return dbUser;\n//   }\n\n//   public logout() {\n//     // Remove token from storage\n//     localStorage.removeItem(\"token\");\n\n//     // Remove token from Axios header\n//     delete axios.defaults.headers.common[\"Authorization\"];\n\n//     const action = userActions.logoutUser();\n//     store.dispatch(action);\n//   }\n// }\n\n// export const userService = new UserService();\n\n// UserService.ts\n\n// src/Services/UserService.ts\n// src/Services/UserService.ts\n\nimport axios from \"axios\";\n//import { jwtDecode } from \"jwt-decode\";\nimport { CredentialsModel } from \"../Models/CredentialsModel\";\nimport { UserModel } from \"../Models/UserModel\";\nimport { store, userActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\n\nclass UserService {\n  public isLoading: boolean = false; // סטטוס טעינה\n\n  public constructor() {\n    const token = localStorage.getItem(\"token\");\n    console.log(\"Loaded token in UserService constructor:\", token); // לוג לבדיקה\n\n    if (!token) return;\n\n    // Set token in Axios header\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    console.log(\n      \"Token set in Axios in UserService constructor:\",\n      axios.defaults.headers.common[\"Authorization\"]\n    );\n\n    try {\n      // Decode the token to get user details\n      const container = jwtDecode<{ user: UserModel }>(token);\n      const dbUser = container.user;\n      console.log(\"Decoded user in UserService constructor:\", dbUser);\n\n      // Dispatch the user to redux store\n      const action = userActions.initUser(dbUser);\n      store.dispatch(action);\n    } catch (error) {\n      console.error(\"Error decoding token in UserService constructor:\", error);\n    }\n  }\n\n  public async register(user: UserModel) {\n    this.isLoading = true; // התחל טעינה\n    const response = await axios.post<{ token: string; user: UserModel }>(\n      appConfig.registerUrl,\n      user\n    );\n    const { token, user: dbUser } = response.data;\n\n    localStorage.setItem(\"token\", token);\n\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    console.log(\n      \"Token set in Axios after register:\",\n      axios.defaults.headers.common[\"Authorization\"]\n    );\n\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n\n    this.isLoading = false; // סיום טעינה\n  }\n\n  public async login(credentials: CredentialsModel): Promise<UserModel> {\n    this.isLoading = true; // התחל טעינה\n    const response = await axios.post<{ token: string; user: UserModel }>(\n      appConfig.loginUrl,\n      credentials\n    );\n    const { token, user: dbUser } = response.data;\n\n    localStorage.setItem(\"token\", token);\n\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    console.log(\n      \"Token set in Axios after login:\",\n      axios.defaults.headers.common[\"Authorization\"]\n    );\n\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n\n    this.isLoading = false; // סיום טעינה\n    return dbUser;\n  }\n\n  public logout() {\n    localStorage.removeItem(\"token\");\n\n    delete axios.defaults.headers.common[\"Authorization\"];\n    console.log(\"Token removed from Axios after logout\");\n\n    const action = userActions.logoutUser();\n    store.dispatch(action);\n  }\n}\n\nexport const userService = new UserService();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}