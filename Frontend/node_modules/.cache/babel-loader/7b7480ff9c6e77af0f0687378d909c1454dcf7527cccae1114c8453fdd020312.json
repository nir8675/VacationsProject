{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Downloads\\\\02092024ProjectVacation\\\\Frontend\\\\src\\\\Components\\\\VacationArea\\\\VacationCards\\\\VacationCards.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { VacationModel } from \"../../../Models/VacationModel\";\n// import { vacationsService } from '../../../Services/VacationsService';\n\n// import \"./VacationCards.css\";\n\n// // Define VacationCardProps to include the vacation and the onToggleLike function\n\n// interface VacationCardProps {\n//     vacation: VacationModel;\n//     onToggleLike: () => void; // Function to handle like toggle from parent\n// }\n\n// export function VacationCards(props: VacationCardProps): JSX.Element {\n//     const { vacation, onToggleLike } = props;\n\n//     // Ensure likesCount is a number and initialize isLiked state correctly\n//     const initialLikesCount = Number(vacation.likesCount) || 0;\n//     const initialIsLiked = vacation.isLiked === 1;\n\n//     const [likesCount, setLikesCount] = useState<number>(initialLikesCount);\n//     const [isLiked, setIsLiked] = useState<boolean>(initialIsLiked);\n\n//     const handleToggleLike = async () => {\n//         try {\n//             // Call the service to toggle the like and update the Redux store\n//             const updatedVacation = await vacationsService.toggleLike(vacation.id);\n//             setLikesCount(updatedVacation.likesCount);\n//             setIsLiked(updatedVacation.isLiked === 1);\n//             onToggleLike(); // Call the parent function to handle like\n//         } catch (error) {\n//             console.error('Failed to toggle like:', error);\n//         }\n//     };\n\n//     const formatDate = (date: string): string => {\n//         return new Date(date).toLocaleDateString('he-IL'); // Format date to DD/MM/YYYY\n//     };\n\n//     useEffect(() => {\n//         // Update local state when props change\n//         setLikesCount(Number(vacation.likesCount) || 0);\n//         setIsLiked(vacation.isLiked === 1);\n//     }, [vacation.likesCount, vacation.isLiked]);\n\n//     return (\n//         <div className=\"VacationCards\">\n//             <div className=\"card\">\n//                 <img className=\"card-img-top\" src={vacation.imageUrl} alt=\"vacation\" />\n//                 <div className=\"card-body\">\n//                     <div className=\"like-container\">\n//                         <button className={`like-button ${isLiked ? \"liked\" : \"\"}`} onClick={handleToggleLike}>\n//                             <span>❤️</span> {likesCount}\n//                         </button>\n//                     </div>\n//                     <h5 className=\"card-title\">{vacation.destination}</h5>\n//                     <span className=\"date-range\">\n//                         {formatDate(vacation.startDate)} - {formatDate(vacation.endDate)}\n//                     </span>\n//                     <p className=\"card-text\">{vacation.description}</p>\n//                     <div className=\"price-box\">${vacation.price}</div>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport { vacationsService } from '../../../Services/VacationsService';\nimport { Link } from 'react-router-dom'; // Assuming you're using react-router for navigation\n\nimport \"./VacationCards.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function VacationCards(props) {\n  _s();\n  const {\n    vacation,\n    onToggleLike,\n    isAdmin\n  } = props;\n  const initialLikesCount = Number(vacation.likesCount) || 0;\n  const initialIsLiked = vacation.isLiked === 1;\n  const [likesCount, setLikesCount] = useState(initialLikesCount);\n  const [isLiked, setIsLiked] = useState(initialIsLiked);\n  const handleToggleLike = async () => {\n    try {\n      const updatedVacation = await vacationsService.toggleLike(vacation.id);\n      setLikesCount(updatedVacation.likesCount);\n      setIsLiked(updatedVacation.isLiked === 1);\n      onToggleLike();\n    } catch (error) {\n      console.error('Failed to toggle like:', error);\n    }\n  };\n  const formatDate = date => {\n    return new Date(date).toLocaleDateString('he-IL');\n  };\n  useEffect(() => {\n    setLikesCount(Number(vacation.likesCount) || 0);\n    setIsLiked(vacation.isLiked === 1);\n  }, [vacation.likesCount, vacation.isLiked]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"VacationCards\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"card-img-top\",\n        src: vacation.imageUrl,\n        alt: \"vacation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"like-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `like-button ${isLiked ? \"liked\" : \"\"}`,\n            onClick: handleToggleLike,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u2764\\uFE0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 29\n            }, this), \" \", likesCount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"card-title\",\n          children: vacation.destination\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"date-range\",\n          children: [formatDate(vacation.startDate), \" - \", formatDate(vacation.endDate)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text\",\n          children: vacation.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"price-box\",\n          children: [\"$\", vacation.price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), isAdmin && /*#__PURE__*/_jsxDEV(Link, {\n          to: `/edit-vacation/${vacation.id}`,\n          className: \"btn btn-primary\",\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n}\n_s(VacationCards, \"GnZPnepPcpJ8ZCq7CHtzEEgsCbI=\");\n_c = VacationCards;\nvar _c;\n$RefreshReg$(_c, \"VacationCards\");","map":{"version":3,"names":["React","useState","useEffect","vacationsService","Link","jsxDEV","_jsxDEV","VacationCards","props","_s","vacation","onToggleLike","isAdmin","initialLikesCount","Number","likesCount","initialIsLiked","isLiked","setLikesCount","setIsLiked","handleToggleLike","updatedVacation","toggleLike","id","error","console","formatDate","date","Date","toLocaleDateString","className","children","src","imageUrl","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","destination","startDate","endDate","description","price","to","_c","$RefreshReg$"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Components/VacationArea/VacationCards/VacationCards.tsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { VacationModel } from \"../../../Models/VacationModel\";\n// import { vacationsService } from '../../../Services/VacationsService';\n\n// import \"./VacationCards.css\";\n\n// // Define VacationCardProps to include the vacation and the onToggleLike function\n\n// interface VacationCardProps {\n//     vacation: VacationModel;\n//     onToggleLike: () => void; // Function to handle like toggle from parent\n// }\n\n// export function VacationCards(props: VacationCardProps): JSX.Element {\n//     const { vacation, onToggleLike } = props;\n\n//     // Ensure likesCount is a number and initialize isLiked state correctly\n//     const initialLikesCount = Number(vacation.likesCount) || 0;\n//     const initialIsLiked = vacation.isLiked === 1;\n\n//     const [likesCount, setLikesCount] = useState<number>(initialLikesCount);\n//     const [isLiked, setIsLiked] = useState<boolean>(initialIsLiked);\n\n//     const handleToggleLike = async () => {\n//         try {\n//             // Call the service to toggle the like and update the Redux store\n//             const updatedVacation = await vacationsService.toggleLike(vacation.id);\n//             setLikesCount(updatedVacation.likesCount);\n//             setIsLiked(updatedVacation.isLiked === 1);\n//             onToggleLike(); // Call the parent function to handle like\n//         } catch (error) {\n//             console.error('Failed to toggle like:', error);\n//         }\n//     };\n\n//     const formatDate = (date: string): string => {\n//         return new Date(date).toLocaleDateString('he-IL'); // Format date to DD/MM/YYYY\n//     };\n\n//     useEffect(() => {\n//         // Update local state when props change\n//         setLikesCount(Number(vacation.likesCount) || 0);\n//         setIsLiked(vacation.isLiked === 1);\n//     }, [vacation.likesCount, vacation.isLiked]);\n\n//     return (\n//         <div className=\"VacationCards\">\n//             <div className=\"card\">\n//                 <img className=\"card-img-top\" src={vacation.imageUrl} alt=\"vacation\" />\n//                 <div className=\"card-body\">\n//                     <div className=\"like-container\">\n//                         <button className={`like-button ${isLiked ? \"liked\" : \"\"}`} onClick={handleToggleLike}>\n//                             <span>❤️</span> {likesCount}\n//                         </button>\n//                     </div>\n//                     <h5 className=\"card-title\">{vacation.destination}</h5>\n//                     <span className=\"date-range\">\n//                         {formatDate(vacation.startDate)} - {formatDate(vacation.endDate)}\n//                     </span>\n//                     <p className=\"card-text\">{vacation.description}</p>\n//                     <div className=\"price-box\">${vacation.price}</div>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport { VacationModel } from \"../../../Models/VacationModel\";\nimport { vacationsService } from '../../../Services/VacationsService';\nimport { Link } from 'react-router-dom'; // Assuming you're using react-router for navigation\n\nimport \"./VacationCards.css\";\n\ninterface VacationCardProps {\n    vacation: VacationModel;\n    onToggleLike: () => void;\n    isAdmin: boolean; // Add this prop to check if the user is admin\n}\n\nexport function VacationCards(props: VacationCardProps): JSX.Element {\n    const { vacation, onToggleLike, isAdmin } = props;\n\n    const initialLikesCount = Number(vacation.likesCount) || 0;\n    const initialIsLiked = vacation.isLiked === 1;\n\n    const [likesCount, setLikesCount] = useState<number>(initialLikesCount);\n    const [isLiked, setIsLiked] = useState<boolean>(initialIsLiked);\n\n    const handleToggleLike = async () => {\n        try {\n            const updatedVacation = await vacationsService.toggleLike(vacation.id);\n            setLikesCount(updatedVacation.likesCount);\n            setIsLiked(updatedVacation.isLiked === 1);\n            onToggleLike();\n        } catch (error) {\n            console.error('Failed to toggle like:', error);\n        }\n    };\n\n    const formatDate = (date: string): string => {\n        return new Date(date).toLocaleDateString('he-IL');\n    };\n\n    useEffect(() => {\n        setLikesCount(Number(vacation.likesCount) || 0);\n        setIsLiked(vacation.isLiked === 1);\n    }, [vacation.likesCount, vacation.isLiked]);\n\n    return (\n        <div className=\"VacationCards\">\n            <div className=\"card\">\n                <img className=\"card-img-top\" src={vacation.imageUrl} alt=\"vacation\" />\n                <div className=\"card-body\">\n                    <div className=\"like-container\">\n                        <button className={`like-button ${isLiked ? \"liked\" : \"\"}`} onClick={handleToggleLike}>\n                            <span>❤️</span> {likesCount}\n                        </button>\n                    </div>\n                    <h5 className=\"card-title\">{vacation.destination}</h5>\n                    <span className=\"date-range\">\n                        {formatDate(vacation.startDate)} - {formatDate(vacation.endDate)}\n                    </span>\n                    <p className=\"card-text\">{vacation.description}</p>\n                    <div className=\"price-box\">${vacation.price}</div>\n                    {/* Add Edit button if user is an admin */}\n                    {isAdmin && (\n                        <Link to={`/edit-vacation/${vacation.id}`} className=\"btn btn-primary\">\n                            Edit\n                        </Link>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}