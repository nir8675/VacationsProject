{"ast":null,"code":"// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n//   public async getAllVacations() {\n//     // If vacations are already in the Redux store, return them to avoid unnecessary API calls\n//     if (store.getState().vacations) return store.getState().vacations;\n//     const response = await axios.get<VacationModel[]>(appConfig.vacationsUrl, {\n//       headers: { Authorization: `Bearer ${store.getState().auth?.token}` },\n//     });\n//     const vacations = response.data;\n\n//     // Sort vacations by start date in ascending order\n//     vacations.sort(\n//       (a, b) =>\n//         new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//     );\n\n//     const action = vacationActions.initVacations(vacations);\n//     store.dispatch(action);\n//     return vacations;\n//   }\n\n//   public async addVacation(vacation: VacationModel) {\n//     const options: AxiosRequestConfig = {\n//       headers: { \"Content-Type\": \"multipart/form-data\" },\n//     };\n//     const response = await axios.post<VacationModel>(\n//       appConfig.vacationsUrl,\n//       vacation,\n//       options\n//     );\n//     if (!store.getState().vacations) return;\n//     const addedVacation = response.data;\n\n//     // Dispatch the added vacation to the Redux store\n//     const action = vacationActions.addVacation(addedVacation);\n//     store.dispatch(action);\n\n//     // Return sorted vacations after adding the new one\n//     this.sortVacations();\n//   }\n\n//   // Function to delete a vacation by id\n//   public async deleteVacation(vacationId: number) {\n//     const response = await axios.delete<VacationModel>(\n//       appConfig.vacationsUrl + vacationId\n//     );\n//     const deletedVacation = response.data;\n//     const action = vacationActions.deleteVacation(deletedVacation.id);\n//     store.dispatch(action);\n//   }\n\n//   // Function to toggle like a vacation by id\n//   public async toggleLike(vacationId: number) {\n//     try {\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${store.getState().auth?.token}` },\n//         }\n//       );\n\n//       const updatedVacation = response.data;\n\n//       // Update the Redux store with the updated vacation\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n\n//       // Return the updated vacation\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // function to sort vacations in the Redux store\n//   private sortVacations() {\n//     const sortedVacations = [...store.getState().vacations].sort(\n//       (a, b) =>\n//         new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//     );\n//     const action = vacationActions.initVacations(sortedVacations);\n//     store.dispatch(action);\n//   }\n// }\n\n// export const vacationsService = new VacationsService();\n\nimport axios from \"axios\";\nimport { store, vacationActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\nclass VacationsService {\n  // Function to get all vacations\n  async getAllVacations() {\n    try {\n      var _state$auth;\n      // Retrieve the current state\n      const state = store.getState();\n\n      // If vacations are already in the Redux store, return them to avoid unnecessary API calls\n      if (state.vacations && state.vacations.length > 0) {\n        return state.vacations;\n      }\n\n      // Retrieve token from Redux store\n      const token = (_state$auth = state.auth) === null || _state$auth === void 0 ? void 0 : _state$auth.token;\n      if (!token) {\n        console.warn(\"Token is not available.\");\n        throw new Error(\"Unauthorized access. Please log in.\");\n      }\n      console.log(\"Token before request:\", token); // Debugging token\n\n      const response = await axios.get(appConfig.vacationsUrl, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const vacations = response.data;\n\n      // Sort vacations by start date in ascending order\n      vacations.sort((a, b) => new Date(a.startDate).getTime() - new Date(b.startDate).getTime());\n      const action = vacationActions.initVacations(vacations);\n      store.dispatch(action);\n      return vacations;\n    } catch (error) {\n      console.error(\"Failed to fetch vacations:\", error);\n      throw error;\n    }\n  }\n\n  // Function to add a vacation\n  async addVacation(vacation) {\n    try {\n      var _store$getState$auth;\n      const token = (_store$getState$auth = store.getState().auth) === null || _store$getState$auth === void 0 ? void 0 : _store$getState$auth.token;\n      if (!token) {\n        console.warn(\"Token is not available.\");\n        throw new Error(\"Unauthorized access. Please log in.\");\n      }\n      const options = {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `Bearer ${token}`\n        }\n      };\n      const response = await axios.post(appConfig.vacationsUrl, vacation, options);\n      const addedVacation = response.data;\n\n      // Dispatch the added vacation to the Redux store\n      const action = vacationActions.addVacation(addedVacation);\n      store.dispatch(action);\n\n      // Return sorted vacations after adding the new one\n      this.sortVacations();\n    } catch (error) {\n      console.error(\"Failed to add vacation:\", error);\n      throw error;\n    }\n  }\n\n  // Function to delete a vacation by id\n  async deleteVacation(vacationId) {\n    try {\n      var _store$getState$auth2;\n      const token = (_store$getState$auth2 = store.getState().auth) === null || _store$getState$auth2 === void 0 ? void 0 : _store$getState$auth2.token;\n      if (!token) {\n        console.warn(\"Token is not available.\");\n        throw new Error(\"Unauthorized access. Please log in.\");\n      }\n      await axios.delete(`${appConfig.vacationsUrl}${vacationId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const action = vacationActions.deleteVacation(vacationId);\n      store.dispatch(action);\n    } catch (error) {\n      console.error(\"Failed to delete vacation:\", error);\n      throw error;\n    }\n  }\n\n  // Function to toggle like a vacation by id\n  async toggleLike(vacationId) {\n    try {\n      var _store$getState$auth3;\n      const token = (_store$getState$auth3 = store.getState().auth) === null || _store$getState$auth3 === void 0 ? void 0 : _store$getState$auth3.token;\n      if (!token) {\n        console.warn(\"Token is not available.\");\n        throw new Error(\"Unauthorized access. Please log in.\");\n      }\n      const response = await axios.patch(`${appConfig.vacationsUrl}toggle-like/${vacationId}`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const updatedVacation = response.data;\n\n      // Update the Redux store with the updated vacation\n      const action = vacationActions.updateVacation(updatedVacation);\n      store.dispatch(action);\n      return updatedVacation;\n    } catch (error) {\n      console.error(\"Failed to toggle like:\", error);\n      throw error;\n    }\n  }\n\n  // Function to sort vacations in the Redux store\n  sortVacations() {\n    const state = store.getState();\n    if (!state.vacations || state.vacations.length === 0) return;\n    const sortedVacations = [...state.vacations].sort((a, b) => new Date(a.startDate).getTime() - new Date(b.startDate).getTime());\n    const action = vacationActions.initVacations(sortedVacations);\n    store.dispatch(action);\n  }\n}\nexport const vacationsService = new VacationsService();","map":{"version":3,"names":["axios","store","vacationActions","appConfig","VacationsService","getAllVacations","_state$auth","state","getState","vacations","length","token","auth","console","warn","Error","log","response","get","vacationsUrl","headers","Authorization","data","sort","a","b","Date","startDate","getTime","action","initVacations","dispatch","error","addVacation","vacation","_store$getState$auth","options","post","addedVacation","sortVacations","deleteVacation","vacationId","_store$getState$auth2","delete","toggleLike","_store$getState$auth3","patch","updatedVacation","updateVacation","sortedVacations","vacationsService"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Services/VacationsService.ts"],"sourcesContent":["// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n//   public async getAllVacations() {\n//     // If vacations are already in the Redux store, return them to avoid unnecessary API calls\n//     if (store.getState().vacations) return store.getState().vacations;\n//     const response = await axios.get<VacationModel[]>(appConfig.vacationsUrl, {\n//       headers: { Authorization: `Bearer ${store.getState().auth?.token}` },\n//     });\n//     const vacations = response.data;\n\n//     // Sort vacations by start date in ascending order\n//     vacations.sort(\n//       (a, b) =>\n//         new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//     );\n\n//     const action = vacationActions.initVacations(vacations);\n//     store.dispatch(action);\n//     return vacations;\n//   }\n\n//   public async addVacation(vacation: VacationModel) {\n//     const options: AxiosRequestConfig = {\n//       headers: { \"Content-Type\": \"multipart/form-data\" },\n//     };\n//     const response = await axios.post<VacationModel>(\n//       appConfig.vacationsUrl,\n//       vacation,\n//       options\n//     );\n//     if (!store.getState().vacations) return;\n//     const addedVacation = response.data;\n\n//     // Dispatch the added vacation to the Redux store\n//     const action = vacationActions.addVacation(addedVacation);\n//     store.dispatch(action);\n\n//     // Return sorted vacations after adding the new one\n//     this.sortVacations();\n//   }\n\n//   // Function to delete a vacation by id\n//   public async deleteVacation(vacationId: number) {\n//     const response = await axios.delete<VacationModel>(\n//       appConfig.vacationsUrl + vacationId\n//     );\n//     const deletedVacation = response.data;\n//     const action = vacationActions.deleteVacation(deletedVacation.id);\n//     store.dispatch(action);\n//   }\n\n//   // Function to toggle like a vacation by id\n//   public async toggleLike(vacationId: number) {\n//     try {\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${store.getState().auth?.token}` },\n//         }\n//       );\n\n//       const updatedVacation = response.data;\n\n//       // Update the Redux store with the updated vacation\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n\n//       // Return the updated vacation\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // function to sort vacations in the Redux store\n//   private sortVacations() {\n//     const sortedVacations = [...store.getState().vacations].sort(\n//       (a, b) =>\n//         new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//     );\n//     const action = vacationActions.initVacations(sortedVacations);\n//     store.dispatch(action);\n//   }\n// }\n\n// export const vacationsService = new VacationsService();\n\nimport axios, { AxiosRequestConfig } from \"axios\";\nimport { VacationModel } from \"../Models/VacationModel\";\nimport { store, vacationActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\n\nclass VacationsService {\n  // Function to get all vacations\n  public async getAllVacations(): Promise<VacationModel[]> {\n    try {\n      // Retrieve the current state\n      const state = store.getState();\n\n      // If vacations are already in the Redux store, return them to avoid unnecessary API calls\n      if (state.vacations && state.vacations.length > 0) {\n        return state.vacations;\n      }\n\n      // Retrieve token from Redux store\n      const token = state.auth?.token;\n      if (!token) {\n        console.warn(\"Token is not available.\");\n        throw new Error(\"Unauthorized access. Please log in.\");\n      }\n\n      console.log(\"Token before request:\", token); // Debugging token\n\n      const response = await axios.get<VacationModel[]>(\n        appConfig.vacationsUrl,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n\n      const vacations = response.data;\n\n      // Sort vacations by start date in ascending order\n      vacations.sort(\n        (a, b) =>\n          new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n      );\n\n      const action = vacationActions.initVacations(vacations);\n      store.dispatch(action);\n\n      return vacations;\n    } catch (error) {\n      console.error(\"Failed to fetch vacations:\", error);\n      throw error;\n    }\n  }\n\n  // Function to add a vacation\n  public async addVacation(vacation: VacationModel): Promise<void> {\n    try {\n      const token = store.getState().auth?.token;\n      if (!token) {\n        console.warn(\"Token is not available.\");\n        throw new Error(\"Unauthorized access. Please log in.\");\n      }\n\n      const options: AxiosRequestConfig = {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `Bearer ${token}`,\n        },\n      };\n\n      const response = await axios.post<VacationModel>(\n        appConfig.vacationsUrl,\n        vacation,\n        options\n      );\n\n      const addedVacation = response.data;\n\n      // Dispatch the added vacation to the Redux store\n      const action = vacationActions.addVacation(addedVacation);\n      store.dispatch(action);\n\n      // Return sorted vacations after adding the new one\n      this.sortVacations();\n    } catch (error) {\n      console.error(\"Failed to add vacation:\", error);\n      throw error;\n    }\n  }\n\n  // Function to delete a vacation by id\n  public async deleteVacation(vacationId: number): Promise<void> {\n    try {\n      const token = store.getState().auth?.token;\n      if (!token) {\n        console.warn(\"Token is not available.\");\n        throw new Error(\"Unauthorized access. Please log in.\");\n      }\n\n      await axios.delete<VacationModel>(\n        `${appConfig.vacationsUrl}${vacationId}`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n\n      const action = vacationActions.deleteVacation(vacationId);\n      store.dispatch(action);\n    } catch (error) {\n      console.error(\"Failed to delete vacation:\", error);\n      throw error;\n    }\n  }\n\n  // Function to toggle like a vacation by id\n  public async toggleLike(vacationId: number): Promise<VacationModel> {\n    try {\n      const token = store.getState().auth?.token;\n      if (!token) {\n        console.warn(\"Token is not available.\");\n        throw new Error(\"Unauthorized access. Please log in.\");\n      }\n\n      const response = await axios.patch<VacationModel>(\n        `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n        {},\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n\n      const updatedVacation = response.data;\n\n      // Update the Redux store with the updated vacation\n      const action = vacationActions.updateVacation(updatedVacation);\n      store.dispatch(action);\n\n      return updatedVacation;\n    } catch (error) {\n      console.error(\"Failed to toggle like:\", error);\n      throw error;\n    }\n  }\n\n  // Function to sort vacations in the Redux store\n  private sortVacations(): void {\n    const state = store.getState();\n    if (!state.vacations || state.vacations.length === 0) return;\n\n    const sortedVacations = [...state.vacations].sort(\n      (a, b) =>\n        new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n    );\n\n    const action = vacationActions.initVacations(sortedVacations);\n    store.dispatch(action);\n  }\n}\n\nexport const vacationsService = new VacationsService();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}