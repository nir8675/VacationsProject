{"ast":null,"code":"// import axios from \"axios\";\n// import { jwtDecode } from \"jwt-decode\"; // npm i jwt-decode\n// import { CredentialsModel } from \"../Models/CredentialsModel\";\n// import { UserModel } from \"../Models/UserModel\";\n// import { store, userActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class UserService {\n//   public constructor() {\n//     const token = localStorage.getItem(\"token\");\n//     if (!token) return;\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async register(user: UserModel) {\n//     // Send user to backend:\n//     const response = await axios.post<string>(appConfig.registerUrl, user);\n\n//     // Get token:\n//     const token = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Extract db user from token:\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async login(credentials: CredentialsModel) {\n//     // Send credentials to backend:\n//     const response = await axios.post<string>(appConfig.loginUrl, credentials);\n\n//     // Get token:\n//     const token = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Extract db user from token:\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public logout() {\n//     localStorage.removeItem(\"token\");\n//     const action = userActions.logoutUser();\n//     store.dispatch(action);\n//   }\n// }\n\n// export const userService = new UserService();\n\nimport axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport { store, userActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\nclass UserService {\n  constructor() {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      this.setUserFromToken(token);\n    }\n  }\n  setUserFromToken(token) {\n    try {\n      const container = jwtDecode(token);\n      const dbUser = container.user;\n      const action = userActions.initUser(dbUser);\n      store.dispatch(action);\n    } catch (error) {\n      console.error(\"Failed to decode token:\", error);\n      this.logout();\n    }\n  }\n  async register(user) {\n    try {\n      const response = await axios.post(appConfig.registerUrl, user);\n      const token = response.data;\n      localStorage.setItem(\"token\", token);\n      this.setUserFromToken(token);\n    } catch (error) {\n      console.error(\"Failed to register user:\", error);\n      throw error;\n    }\n  }\n  async login(credentials) {\n    try {\n      const response = await axios.post(appConfig.loginUrl, credentials);\n      const token = response.data;\n      localStorage.setItem(\"token\", token);\n      this.setUserFromToken(token);\n    } catch (error) {\n      console.error(\"Failed to log in:\", error);\n      throw error;\n    }\n  }\n  logout() {\n    localStorage.removeItem(\"token\");\n    const action = userActions.logoutUser();\n    store.dispatch(action);\n  }\n}\nexport const userService = new UserService();","map":{"version":3,"names":["axios","jwtDecode","store","userActions","appConfig","UserService","constructor","token","localStorage","getItem","setUserFromToken","container","dbUser","user","action","initUser","dispatch","error","console","logout","register","response","post","registerUrl","data","setItem","login","credentials","loginUrl","removeItem","logoutUser","userService"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Services/UserService.ts"],"sourcesContent":["// import axios from \"axios\";\n// import { jwtDecode } from \"jwt-decode\"; // npm i jwt-decode\n// import { CredentialsModel } from \"../Models/CredentialsModel\";\n// import { UserModel } from \"../Models/UserModel\";\n// import { store, userActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class UserService {\n//   public constructor() {\n//     const token = localStorage.getItem(\"token\");\n//     if (!token) return;\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async register(user: UserModel) {\n//     // Send user to backend:\n//     const response = await axios.post<string>(appConfig.registerUrl, user);\n\n//     // Get token:\n//     const token = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Extract db user from token:\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async login(credentials: CredentialsModel) {\n//     // Send credentials to backend:\n//     const response = await axios.post<string>(appConfig.loginUrl, credentials);\n\n//     // Get token:\n//     const token = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Extract db user from token:\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public logout() {\n//     localStorage.removeItem(\"token\");\n//     const action = userActions.logoutUser();\n//     store.dispatch(action);\n//   }\n// }\n\n// export const userService = new UserService();\n\n\nimport axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport { CredentialsModel } from \"../Models/CredentialsModel\";\nimport { UserModel } from \"../Models/UserModel\";\nimport { store, userActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\n\nclass UserService {\n  public constructor() {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      this.setUserFromToken(token);\n    }\n  }\n\n  private setUserFromToken(token: string) {\n    try {\n      const container = jwtDecode<{ user: UserModel }>(token);\n      const dbUser = container.user;\n      const action = userActions.initUser(dbUser);\n      store.dispatch(action);\n    } catch (error) {\n      console.error(\"Failed to decode token:\", error);\n      this.logout();\n    }\n  }\n\n  public async register(user: UserModel) {\n    try {\n      const response = await axios.post<string>(appConfig.registerUrl, user);\n      const token = response.data;\n      localStorage.setItem(\"token\", token);\n      this.setUserFromToken(token);\n    } catch (error) {\n      console.error(\"Failed to register user:\", error);\n      throw error;\n    }\n  }\n\n  public async login(credentials: CredentialsModel) {\n    try {\n      const response = await axios.post<string>(appConfig.loginUrl, credentials);\n      const token = response.data;\n      localStorage.setItem(\"token\", token);\n      this.setUserFromToken(token);\n    } catch (error) {\n      console.error(\"Failed to log in:\", error);\n      throw error;\n    }\n  }\n\n  public logout() {\n    localStorage.removeItem(\"token\");\n    const action = userActions.logoutUser();\n    store.dispatch(action);\n  }\n}\n\nexport const userService = new UserService();\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAGlC,SAASC,KAAK,EAAEC,WAAW,QAAQ,gBAAgB;AACnD,SAASC,SAAS,QAAQ,oBAAoB;AAE9C,MAAMC,WAAW,CAAC;EACTC,WAAWA,CAAA,EAAG;IACnB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACT,IAAI,CAACG,gBAAgB,CAACH,KAAK,CAAC;IAC9B;EACF;EAEQG,gBAAgBA,CAACH,KAAa,EAAE;IACtC,IAAI;MACF,MAAMI,SAAS,GAAGV,SAAS,CAAsBM,KAAK,CAAC;MACvD,MAAMK,MAAM,GAAGD,SAAS,CAACE,IAAI;MAC7B,MAAMC,MAAM,GAAGX,WAAW,CAACY,QAAQ,CAACH,MAAM,CAAC;MAC3CV,KAAK,CAACc,QAAQ,CAACF,MAAM,CAAC;IACxB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,IAAI,CAACE,MAAM,CAAC,CAAC;IACf;EACF;EAEA,MAAaC,QAAQA,CAACP,IAAe,EAAE;IACrC,IAAI;MACF,MAAMQ,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,IAAI,CAASlB,SAAS,CAACmB,WAAW,EAAEV,IAAI,CAAC;MACtE,MAAMN,KAAK,GAAGc,QAAQ,CAACG,IAAI;MAC3BhB,YAAY,CAACiB,OAAO,CAAC,OAAO,EAAElB,KAAK,CAAC;MACpC,IAAI,CAACG,gBAAgB,CAACH,KAAK,CAAC;IAC9B,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF;EAEA,MAAaS,KAAKA,CAACC,WAA6B,EAAE;IAChD,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,IAAI,CAASlB,SAAS,CAACwB,QAAQ,EAAED,WAAW,CAAC;MAC1E,MAAMpB,KAAK,GAAGc,QAAQ,CAACG,IAAI;MAC3BhB,YAAY,CAACiB,OAAO,CAAC,OAAO,EAAElB,KAAK,CAAC;MACpC,IAAI,CAACG,gBAAgB,CAACH,KAAK,CAAC;IAC9B,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,MAAMA,KAAK;IACb;EACF;EAEOE,MAAMA,CAAA,EAAG;IACdX,YAAY,CAACqB,UAAU,CAAC,OAAO,CAAC;IAChC,MAAMf,MAAM,GAAGX,WAAW,CAAC2B,UAAU,CAAC,CAAC;IACvC5B,KAAK,CAACc,QAAQ,CAACF,MAAM,CAAC;EACxB;AACF;AAEA,OAAO,MAAMiB,WAAW,GAAG,IAAI1B,WAAW,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}