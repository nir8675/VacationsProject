{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Downloads\\\\02092024ProjectVacation\\\\Frontend\\\\src\\\\Components\\\\VacationArea\\\\VacationReport\\\\VacationReport.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { vacationsService } from \"../../../Services/VacationsService\";\nimport { Chart, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { saveAs } from \"file-saver\"; // file-saver for CSV download\nimport { useNavigate } from \"react-router-dom\";\nimport \"./VacationReport.css\";\n\n// Register necessary components for Chart.js to work with bar charts\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\n// VacationReport component to display a report of vacation likes in a bar chart format\nexport function VacationReport() {\n  _s();\n  // State to hold the report data fetched from the API, containing vacation destinations and their corresponding likes count\n  const [reportData, setReportData] = useState([]);\n\n  // useNavigate is used to navigate programmatically within the application\n  const navigate = useNavigate();\n\n  // useEffect to fetch report data when the component mounts\n  useEffect(() => {\n    // Function to fetch report data from the vacations service\n    const fetchReportData = async () => {\n      try {\n        // Fetch the vacation likes report from the API\n        const data = await vacationsService.getVacationLikesReport();\n\n        // Update the state with the fetched data\n        setReportData(data);\n      } catch (err) {\n        // Log an error if the fetch fails\n        console.error(\"Failed to fetch vacation report:\", err);\n      }\n    };\n\n    // Call the fetch function to retrieve report data\n    fetchReportData();\n  }, []); // Dependency array is empty, so this effect runs once when the component mounts\n\n  // Prepare the data for the chart\n  // 'labels' contains the destination names, and 'data' contains the number of likes for each vacation\n\n  const chartData = {\n    labels: reportData.map(vacation => vacation.destination),\n    // Extract destination names as labels\n    datasets: [{\n      label: \"Number of Likes\",\n      // Label for the dataset\n\n      data: reportData.map(vacation => vacation.likesCount),\n      // Extract likes count for each destination\n\n      backgroundColor: \"rgb(13, 110, 253)\" // Set the color for the bars in the chart\n    }]\n  };\n\n  // Options to configure the appearance and behavior of the chart\n  const chartOptions = {\n    responsive: true,\n    // Make the chart responsive to different screen sizes\n    maintainAspectRatio: false,\n    // Allow the chart to adjust dynamically to container size\n\n    plugins: {\n      legend: {\n        display: true,\n        // Display the legend on the chart\n        position: \"top\" // Use a valid string position for the legend\n      },\n      title: {\n        display: true,\n        // Display the title on the chart\n        text: \"Vacation Likes Report\" // Title text for the chart\n      }\n    },\n    layout: {\n      padding: {\n        left: 10,\n        right: 10,\n        top: 10,\n        bottom: 10\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: true // Ensure the Y-axis starts at zero\n      }\n    }\n  };\n  const handleDownloadCSV = () => {\n    // Step 1: Create the CSV content with headers and report data\n    const csvContent = [[\"Destination\", \"Likes\"],\n    // Column headers\n    ...reportData.map(vacation => [vacation.destination, vacation.likesCount]) // Map through the report data.\n    ].map(row => row.join(\",\")) // Join each row with a comma\n    .join(\"\\n\"); // Join rows with a new line\n\n    // Step 2: Add BOM (Byte Order Mark) to ensure UTF-8 encoding with Excel\n    const bom = \"\\uFEFF\"; // BOM for UTF-8\n\n    // Step 3: Create a Blob with BOM + CSV content\n    const blob = new Blob([bom + csvContent], {\n      type: \"text/csv;charset=utf-8;\"\n    });\n\n    // Step 4: Use file-saver's 'saveAs' function to trigger the download\n    saveAs(blob, \"vacation-likes-report.csv\");\n  };\n  const handleBackToVacations = () => {\n    navigate(\"/vacations\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"VacationReport\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-back\",\n      onClick: handleBackToVacations,\n      children: \"\\u25C0 Back to Vacations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-download\",\n      onClick: handleDownloadCSV,\n      children: \"Export CSV \\u25BC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Vacations Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(VacationReport, \"4IpZhggZJhOxaIMUWmPNI0VOd90=\", false, function () {\n  return [useNavigate];\n});\n_c = VacationReport;\nvar _c;\n$RefreshReg$(_c, \"VacationReport\");","map":{"version":3,"names":["React","useEffect","useState","Bar","vacationsService","Chart","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","saveAs","useNavigate","jsxDEV","_jsxDEV","register","VacationReport","_s","reportData","setReportData","navigate","fetchReportData","data","getVacationLikesReport","err","console","error","chartData","labels","map","vacation","destination","datasets","label","likesCount","backgroundColor","chartOptions","responsive","maintainAspectRatio","plugins","legend","display","position","title","text","layout","padding","left","right","top","bottom","scales","y","beginAtZero","handleDownloadCSV","csvContent","row","join","bom","blob","Blob","type","handleBackToVacations","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","options","_c","$RefreshReg$"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Components/VacationArea/VacationReport/VacationReport.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { vacationsService } from \"../../../Services/VacationsService\";\nimport {\n  Chart,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { saveAs } from \"file-saver\"; // file-saver for CSV download\nimport { useNavigate } from \"react-router-dom\";\nimport \"./VacationReport.css\";\n\n// Register necessary components for Chart.js to work with bar charts\nChart.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\n// VacationReport component to display a report of vacation likes in a bar chart format\nexport function VacationReport(): JSX.Element {\n  // State to hold the report data fetched from the API, containing vacation destinations and their corresponding likes count\n  const [reportData, setReportData] = useState<\n    { destination: string; likesCount: number }[]\n  >([]);\n\n  // useNavigate is used to navigate programmatically within the application\n  const navigate = useNavigate();\n\n  // useEffect to fetch report data when the component mounts\n  useEffect(() => {\n    // Function to fetch report data from the vacations service\n    const fetchReportData = async () => {\n      try {\n        // Fetch the vacation likes report from the API\n        const data = await vacationsService.getVacationLikesReport();\n\n        // Update the state with the fetched data\n        setReportData(data);\n      } catch (err) {\n        // Log an error if the fetch fails\n        console.error(\"Failed to fetch vacation report:\", err);\n      }\n    };\n\n    // Call the fetch function to retrieve report data\n    fetchReportData();\n  }, []); // Dependency array is empty, so this effect runs once when the component mounts\n\n  // Prepare the data for the chart\n  // 'labels' contains the destination names, and 'data' contains the number of likes for each vacation\n\n  const chartData = {\n    labels: reportData.map((vacation) => vacation.destination), // Extract destination names as labels\n    datasets: [\n      {\n        label: \"Number of Likes\", // Label for the dataset\n\n        data: reportData.map((vacation) => vacation.likesCount), // Extract likes count for each destination\n\n        backgroundColor: \"rgb(13, 110, 253)\", // Set the color for the bars in the chart\n      },\n    ],\n  };\n\n  // Options to configure the appearance and behavior of the chart\n  const chartOptions = {\n    responsive: true, // Make the chart responsive to different screen sizes\n    maintainAspectRatio: false, // Allow the chart to adjust dynamically to container size\n\n    plugins: {\n      legend: {\n        display: true, // Display the legend on the chart\n        position: \"top\", // Use a valid string position for the legend\n      },\n      title: {\n        display: true, // Display the title on the chart\n        text: \"Vacation Likes Report\", // Title text for the chart\n      },\n    },\n\n    layout: {\n      padding: {\n        left: 10,\n        right: 10,\n        top: 10,\n        bottom: 10,\n      },\n    },\n\n    scales: {\n      y: {\n        beginAtZero: true, // Ensure the Y-axis starts at zero\n      },\n    },\n  };\n\n  const handleDownloadCSV = () => {\n    // Step 1: Create the CSV content with headers and report data\n    const csvContent = [\n      [\"Destination\", \"Likes\"], // Column headers\n      ...reportData.map((vacation) => [\n        vacation.destination,\n        vacation.likesCount,\n      ]), // Map through the report data.\n    ]\n      .map((row) => row.join(\",\")) // Join each row with a comma\n      .join(\"\\n\"); // Join rows with a new line\n\n    // Step 2: Add BOM (Byte Order Mark) to ensure UTF-8 encoding with Excel\n    const bom = \"\\uFEFF\"; // BOM for UTF-8\n\n    // Step 3: Create a Blob with BOM + CSV content\n    const blob = new Blob([bom + csvContent], {\n      type: \"text/csv;charset=utf-8;\",\n    });\n\n    // Step 4: Use file-saver's 'saveAs' function to trigger the download\n    saveAs(blob, \"vacation-likes-report.csv\");\n  };\n\n  const handleBackToVacations = () => {\n    navigate(\"/vacations\");\n  };\n\n  return (\n    <div className=\"VacationReport\">\n      <button className=\"btn-back\" onClick={handleBackToVacations}>\n        ◀ Back to Vacations\n      </button>\n\n      <button className=\"btn-download\" onClick={handleDownloadCSV}>\n        Export CSV ▼\n      </button>\n\n      <h2>Vacations Report</h2>\n      <Bar data={chartData} options={chartOptions} />\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,GAAG,QAAQ,iBAAiB;AACrC,SAASC,gBAAgB,QAAQ,oCAAoC;AACrE,SACEC,KAAK,EACLC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;AACjB,SAASC,MAAM,QAAQ,YAAY,CAAC,CAAC;AACrC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,sBAAsB;;AAE7B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAV,KAAK,CAACW,QAAQ,CAACV,aAAa,EAAEC,WAAW,EAAEC,UAAU,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,CAAC;;AAE9E;AACA,OAAO,SAASM,cAAcA,CAAA,EAAgB;EAAAC,EAAA;EAC5C;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAE1C,EAAE,CAAC;;EAEL;EACA,MAAMmB,QAAQ,GAAGR,WAAW,CAAC,CAAC;;EAE9B;EACAZ,SAAS,CAAC,MAAM;IACd;IACA,MAAMqB,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF;QACA,MAAMC,IAAI,GAAG,MAAMnB,gBAAgB,CAACoB,sBAAsB,CAAC,CAAC;;QAE5D;QACAJ,aAAa,CAACG,IAAI,CAAC;MACrB,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZ;QACAC,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEF,GAAG,CAAC;MACxD;IACF,CAAC;;IAED;IACAH,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA;;EAEA,MAAMM,SAAS,GAAG;IAChBC,MAAM,EAAEV,UAAU,CAACW,GAAG,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,WAAW,CAAC;IAAE;IAC5DC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,iBAAiB;MAAE;;MAE1BX,IAAI,EAAEJ,UAAU,CAACW,GAAG,CAAEC,QAAQ,IAAKA,QAAQ,CAACI,UAAU,CAAC;MAAE;;MAEzDC,eAAe,EAAE,mBAAmB,CAAE;IACxC,CAAC;EAEL,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG;IACnBC,UAAU,EAAE,IAAI;IAAE;IAClBC,mBAAmB,EAAE,KAAK;IAAE;;IAE5BC,OAAO,EAAE;MACPC,MAAM,EAAE;QACNC,OAAO,EAAE,IAAI;QAAE;QACfC,QAAQ,EAAE,KAAK,CAAE;MACnB,CAAC;MACDC,KAAK,EAAE;QACLF,OAAO,EAAE,IAAI;QAAE;QACfG,IAAI,EAAE,uBAAuB,CAAE;MACjC;IACF,CAAC;IAEDC,MAAM,EAAE;MACNC,OAAO,EAAE;QACPC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,GAAG,EAAE,EAAE;QACPC,MAAM,EAAE;MACV;IACF,CAAC;IAEDC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,WAAW,EAAE,IAAI,CAAE;MACrB;IACF;EACF,CAAC;EAED,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC9B;IACA,MAAMC,UAAU,GAAG,CACjB,CAAC,aAAa,EAAE,OAAO,CAAC;IAAE;IAC1B,GAAGrC,UAAU,CAACW,GAAG,CAAEC,QAAQ,IAAK,CAC9BA,QAAQ,CAACC,WAAW,EACpBD,QAAQ,CAACI,UAAU,CACpB,CAAC,CAAE;IAAA,CACL,CACEL,GAAG,CAAE2B,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAAA,CAC5BA,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;IAEf;IACA,MAAMC,GAAG,GAAG,QAAQ,CAAC,CAAC;;IAEtB;IACA,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACF,GAAG,GAAGH,UAAU,CAAC,EAAE;MACxCM,IAAI,EAAE;IACR,CAAC,CAAC;;IAEF;IACAlD,MAAM,CAACgD,IAAI,EAAE,2BAA2B,CAAC;EAC3C,CAAC;EAED,MAAMG,qBAAqB,GAAGA,CAAA,KAAM;IAClC1C,QAAQ,CAAC,YAAY,CAAC;EACxB,CAAC;EAED,oBACEN,OAAA;IAAKiD,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BlD,OAAA;MAAQiD,SAAS,EAAC,UAAU;MAACE,OAAO,EAAEH,qBAAsB;MAAAE,QAAA,EAAC;IAE7D;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAETvD,OAAA;MAAQiD,SAAS,EAAC,cAAc;MAACE,OAAO,EAAEX,iBAAkB;MAAAU,QAAA,EAAC;IAE7D;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAETvD,OAAA;MAAAkD,QAAA,EAAI;IAAgB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBvD,OAAA,CAACZ,GAAG;MAACoB,IAAI,EAAEK,SAAU;MAAC2C,OAAO,EAAElC;IAAa;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEV;AAACpD,EAAA,CAvHeD,cAAc;EAAA,QAOXJ,WAAW;AAAA;AAAA2D,EAAA,GAPdvD,cAAc;AAAA,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}