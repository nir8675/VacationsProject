{"ast":null,"code":"// import { configureStore, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n// import { UserModel } from \"../Models/UserModel\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import {\n//   addVacation,\n//   deleteVacation,\n//   updateVacation,\n//   initUser,\n//   initVacations,\n//   logoutUser,\n// } from \"./reducers\";\n\n// // Application state:\n// export type AppState = {\n//   vacations: VacationModel[];\n//   user: UserModel;\n//   auth: { token: string };\n// };\n\n// // Creating Vacations slice:\n// const vacationSlice = createSlice({\n//   name: \"vacations\", // Internal use\n//   initialState: [] as VacationModel[],\n//   reducers: { initVacations, addVacation, deleteVacation, updateVacation },\n// });\n\n// // Create user slice:\n// const userSlice = createSlice({\n//   name: \"user\",\n//   initialState: null as UserModel | null,\n//   reducers: { initUser, logoutUser },\n// });\n\n// // Create auth slice:\n// const authSlice = createSlice({\n//   name: \"auth\",\n//   initialState: {\n//     token: localStorage.getItem(\"token\") || null,\n//   },\n//   reducers: {\n//     login(state, action: PayloadAction<string>) {\n//       state.token = action.payload;\n//       localStorage.setItem(\"token\", action.payload); // Save token in localStorage\n//     },\n//     logout(state) {\n//       state.token = null;\n//       localStorage.removeItem(\"token\"); // Remove token from localStorage\n//     },\n//   },\n// });\n\n// // Export action creators:\n// export const vacationActions = vacationSlice.actions;\n// export const userActions = userSlice.actions;\n// export const authActions = authSlice.actions;\n\n// // Main redux object:\n// export const store = configureStore({\n//   reducer: {\n//     vacations: vacationSlice.reducer, // Vacation state.\n//     user: userSlice.reducer, // User state\n//     auth: authSlice.reducer, // Auth state\n//   },\n// });\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { addVacation, deleteVacation, updateVacation, initUser, initVacations, logoutUser } from \"./reducers\";\n\n// Application state:\n\n// Creating Vacations slice:\nconst vacationSlice = createSlice({\n  name: \"vacations\",\n  // Internal use\n  initialState: [],\n  reducers: {\n    initVacations,\n    addVacation,\n    deleteVacation,\n    updateVacation\n  }\n});\n\n// Create user slice:\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: null,\n  reducers: {\n    initUser,\n    logoutUser\n  }\n});\n\n// Create auth slice:\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    token: localStorage.getItem(\"token\"),\n    loading: false\n  },\n  reducers: {\n    loginStart(state) {\n      state.loading = true;\n    },\n    loginSuccess(state, action) {\n      state.token = action.payload;\n      localStorage.setItem(\"token\", action.payload); // Save token in localStorage\n      state.loading = false;\n    },\n    loginFailure(state) {\n      state.loading = false;\n    },\n    logout(state) {\n      state.token = null;\n      localStorage.removeItem(\"token\"); // Remove token from localStorage\n      state.loading = false;\n    }\n  }\n});\n\n// Export action creators:\nexport const vacationActions = vacationSlice.actions;\nexport const userActions = userSlice.actions;\nexport const authActions = authSlice.actions;","map":{"version":3,"names":["createSlice","addVacation","deleteVacation","updateVacation","initUser","initVacations","logoutUser","vacationSlice","name","initialState","reducers","userSlice","authSlice","token","localStorage","getItem","loading","loginStart","state","loginSuccess","action","payload","setItem","loginFailure","logout","removeItem","vacationActions","actions","userActions","authActions"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Redux/store.ts"],"sourcesContent":["// import { configureStore, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n// import { UserModel } from \"../Models/UserModel\";\r\n// import { VacationModel } from \"../Models/VacationModel\";\r\n// import {\r\n//   addVacation,\r\n//   deleteVacation,\r\n//   updateVacation,\r\n//   initUser,\r\n//   initVacations,\r\n//   logoutUser,\r\n// } from \"./reducers\";\r\n\r\n// // Application state:\r\n// export type AppState = {\r\n//   vacations: VacationModel[];\r\n//   user: UserModel;\r\n//   auth: { token: string };\r\n// };\r\n\r\n// // Creating Vacations slice:\r\n// const vacationSlice = createSlice({\r\n//   name: \"vacations\", // Internal use\r\n//   initialState: [] as VacationModel[],\r\n//   reducers: { initVacations, addVacation, deleteVacation, updateVacation },\r\n// });\r\n\r\n// // Create user slice:\r\n// const userSlice = createSlice({\r\n//   name: \"user\",\r\n//   initialState: null as UserModel | null,\r\n//   reducers: { initUser, logoutUser },\r\n// });\r\n\r\n// // Create auth slice:\r\n// const authSlice = createSlice({\r\n//   name: \"auth\",\r\n//   initialState: {\r\n//     token: localStorage.getItem(\"token\") || null,\r\n//   },\r\n//   reducers: {\r\n//     login(state, action: PayloadAction<string>) {\r\n//       state.token = action.payload;\r\n//       localStorage.setItem(\"token\", action.payload); // Save token in localStorage\r\n//     },\r\n//     logout(state) {\r\n//       state.token = null;\r\n//       localStorage.removeItem(\"token\"); // Remove token from localStorage\r\n//     },\r\n//   },\r\n// });\r\n\r\n// // Export action creators:\r\n// export const vacationActions = vacationSlice.actions;\r\n// export const userActions = userSlice.actions;\r\n// export const authActions = authSlice.actions;\r\n\r\n// // Main redux object:\r\n// export const store = configureStore({\r\n//   reducer: {\r\n//     vacations: vacationSlice.reducer, // Vacation state.\r\n//     user: userSlice.reducer, // User state\r\n//     auth: authSlice.reducer, // Auth state\r\n//   },\r\n// });\r\n\r\nimport { configureStore, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { UserModel } from \"../Models/UserModel\";\r\nimport { VacationModel } from \"../Models/VacationModel\";\r\nimport {\r\n  addVacation,\r\n  deleteVacation,\r\n  updateVacation,\r\n  initUser,\r\n  initVacations,\r\n  logoutUser,\r\n} from \"./reducers\";\r\n\r\n// Application state:\r\nexport type AppState = {\r\n  vacations: VacationModel[];\r\n  user: UserModel | null;\r\n  auth: { token: string | null; loading: boolean };\r\n};\r\n\r\n// Creating Vacations slice:\r\nconst vacationSlice = createSlice({\r\n  name: \"vacations\", // Internal use\r\n  initialState: [] as VacationModel[],\r\n  reducers: { initVacations, addVacation, deleteVacation, updateVacation },\r\n});\r\n\r\n// Create user slice:\r\nconst userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: null as UserModel | null,\r\n  reducers: { initUser, logoutUser },\r\n});\r\n\r\n// Create auth slice:\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    token: localStorage.getItem(\"token\"),\r\n    loading: false,\r\n  },\r\n  reducers: {\r\n    loginStart(state) {\r\n      state.loading = true;\r\n    },\r\n    loginSuccess(state, action: PayloadAction<string>) {\r\n      state.token = action.payload;\r\n      localStorage.setItem(\"token\", action.payload); // Save token in localStorage\r\n      state.loading = false;\r\n    },\r\n    loginFailure(state) {\r\n      state.loading = false;\r\n    },\r\n    logout(state) {\r\n      state.token = null;\r\n      localStorage.removeItem(\"token\"); // Remove token from localStorage\r\n      state.loading = false;\r\n    },\r\n  },\r\n});\r\n\r\n// Export action creators:\r\nexport const vacationActions = vacationSlice.actions;\r\nexport const userActions = userSlice.actions;\r\nexport const authActions = authSlice.actions;\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAyBA,WAAW,QAAuB,kBAAkB;AAG7E,SACEC,WAAW,EACXC,cAAc,EACdC,cAAc,EACdC,QAAQ,EACRC,aAAa,EACbC,UAAU,QACL,YAAY;;AAEnB;;AAOA;AACA,MAAMC,aAAa,GAAGP,WAAW,CAAC;EAChCQ,IAAI,EAAE,WAAW;EAAE;EACnBC,YAAY,EAAE,EAAqB;EACnCC,QAAQ,EAAE;IAAEL,aAAa;IAAEJ,WAAW;IAAEC,cAAc;IAAEC;EAAe;AACzE,CAAC,CAAC;;AAEF;AACA,MAAMQ,SAAS,GAAGX,WAAW,CAAC;EAC5BQ,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE,IAAwB;EACtCC,QAAQ,EAAE;IAAEN,QAAQ;IAAEE;EAAW;AACnC,CAAC,CAAC;;AAEF;AACA,MAAMM,SAAS,GAAGZ,WAAW,CAAC;EAC5BQ,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZI,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACpCC,OAAO,EAAE;EACX,CAAC;EACDN,QAAQ,EAAE;IACRO,UAAUA,CAACC,KAAK,EAAE;MAChBA,KAAK,CAACF,OAAO,GAAG,IAAI;IACtB,CAAC;IACDG,YAAYA,CAACD,KAAK,EAAEE,MAA6B,EAAE;MACjDF,KAAK,CAACL,KAAK,GAAGO,MAAM,CAACC,OAAO;MAC5BP,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAEF,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;MAC/CH,KAAK,CAACF,OAAO,GAAG,KAAK;IACvB,CAAC;IACDO,YAAYA,CAACL,KAAK,EAAE;MAClBA,KAAK,CAACF,OAAO,GAAG,KAAK;IACvB,CAAC;IACDQ,MAAMA,CAACN,KAAK,EAAE;MACZA,KAAK,CAACL,KAAK,GAAG,IAAI;MAClBC,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;MAClCP,KAAK,CAACF,OAAO,GAAG,KAAK;IACvB;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMU,eAAe,GAAGnB,aAAa,CAACoB,OAAO;AACpD,OAAO,MAAMC,WAAW,GAAGjB,SAAS,CAACgB,OAAO;AAC5C,OAAO,MAAME,WAAW,GAAGjB,SAAS,CAACe,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}