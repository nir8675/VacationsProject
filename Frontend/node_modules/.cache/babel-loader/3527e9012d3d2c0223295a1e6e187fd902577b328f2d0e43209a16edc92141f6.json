{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { AppState } from \"../../../Redux/store\";\n// import { VacationModel } from \"../../../Models/VacationModel\";\n// import { vacationActions } from \"../../../Redux/store\";\n// import { vacationsService } from \"../../../Services/VacationsService\";\n// import { VacationCards } from \"../VacationCards/VacationCards\";\n// import { Role } from \"../../../Models/enums\";\n// import \"./VacationList.css\";\n\n// export function VacationList(): JSX.Element {\n//   const [vacations, setVacations] = useState<VacationModel[]>([]);\n//   const [currentPage, setCurrentPage] = useState<number>(1);\n//   const [showLiked, setShowLiked] = useState<boolean>(false); // Toggle state\n//   const itemsPerPage = 9;\n//   const dispatch = useDispatch();\n\n//   // Retrieve the token and roleId from Redux state\n//   const token = useSelector((state: AppState) => state.auth.token);\n//   const roleId = useSelector((state: AppState) => state.user.roleId); // Select roleId from state\n\n//   // Convert roleId to a number and check if the user is an admin\n//   const isAdmin = Number(roleId) === Role.Admin;\n\n//   const userId = useSelector<AppState, number>((state) => state.user.id); // Select userId from state\n\n//   // Fetch vacations based on the userId\n//   useEffect(() => {\n//     if (!token) {\n//       console.warn(\"User is not logged in.\");\n//       return;\n//     }\n\n//     vacationsService\n//       .getAllVacationsByUserId(userId)\n//       .then((vacations) => {\n//         if (vacations.length > 0) {\n//           setVacations(vacations);\n//           const action = vacationActions.initVacations(vacations);\n//           dispatch(action);\n//         } else {\n//           console.warn(\"No vacations were fetched from the API.\");\n//         }\n//       })\n//       .catch((err) => {\n//         alert(err.message);\n//       });\n//   }, [token, dispatch, userId]);\n\n//   // Pagination logic\n//   const indexOfLastItem = currentPage * itemsPerPage;\n//   const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n//   const currentVacations = vacations\n//     .filter((vacation) => !showLiked || vacation.isLiked === 1) // Filter for liked vacations when toggled\n//     .slice(indexOfFirstItem, indexOfLastItem);\n\n//   // Go to the next page\n//   const nextPage = () => {\n//     if (currentPage < Math.ceil(vacations.length / itemsPerPage)) {\n//       setCurrentPage(currentPage + 1);\n//     }\n//   };\n\n//   // Go to the previous page\n//   const prevPage = () => {\n//     if (currentPage > 1) {\n//       setCurrentPage(currentPage - 1);\n//     }\n//   };\n\n//   // Toggle show liked vacations\n//   const toggleShowLiked = () => {\n//     setShowLiked((prevShowLiked) => !prevShowLiked);\n//     setCurrentPage(1); // Reset pagination to the first page\n//   };\n\n//   return (\n//     <div className=\"VacationList\">\n//       <div className=\"header d-flex\">\n//         {!isAdmin && (\n//           <div className=\"form-check form-switch\">\n//             <input\n//               className=\"form-check-input\"\n//               type=\"checkbox\"\n//               role=\"switch\"\n//               id=\"flexSwitchCheckChecked\"\n//               checked={showLiked}\n//               onChange={toggleShowLiked}\n//             />\n//             <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckChecked\">\n//               {showLiked ? \"Show All Vacations\" : \"Show Liked Vacations\"}\n//             </label>\n//           </div>\n//         )}\n//       </div>\n\n//       <div className=\"vacation-cards-container\">\n//         {currentVacations.length > 0 ? (\n//           currentVacations.map((vacation) => (\n//             <VacationCards\n//               key={vacation.id}\n//               vacation={vacation}\n//               isAdmin={isAdmin} // Pass isAdmin based on roleId\n//               onToggleLike={() => {\n//                 console.log(\"Like toggle function called\");\n//               }}\n//             />\n//           ))\n//         ) : (\n//           <p>No vacations available</p>\n//         )}\n//       </div>\n\n//       {/* Pagination controls */}\n//       <div className=\"pagination\">\n//         <button onClick={prevPage} disabled={currentPage === 1}>\n//           Previous\n//         </button>\n//         <span>Page {currentPage}</span>\n//         <button\n//           onClick={nextPage}\n//           disabled={currentPage === Math.ceil(vacations.length / itemsPerPage)}\n//         >\n//           Next\n//         </button>\n//       </div>\n//     </div>\n\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Components/VacationArea/VacationList/VacationList.tsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { AppState } from \"../../../Redux/store\";\n// import { VacationModel } from \"../../../Models/VacationModel\";\n// import { vacationActions } from \"../../../Redux/store\";\n// import { vacationsService } from \"../../../Services/VacationsService\";\n// import { VacationCards } from \"../VacationCards/VacationCards\";\n// import { Role } from \"../../../Models/enums\";\n// import \"./VacationList.css\";\n\n// export function VacationList(): JSX.Element {\n//   const [vacations, setVacations] = useState<VacationModel[]>([]);\n//   const [currentPage, setCurrentPage] = useState<number>(1);\n//   const [showLiked, setShowLiked] = useState<boolean>(false); // Toggle state\n//   const itemsPerPage = 9;\n//   const dispatch = useDispatch();\n\n//   // Retrieve the token and roleId from Redux state\n//   const token = useSelector((state: AppState) => state.auth.token);\n//   const roleId = useSelector((state: AppState) => state.user.roleId); // Select roleId from state\n\n//   // Convert roleId to a number and check if the user is an admin\n//   const isAdmin = Number(roleId) === Role.Admin;\n\n//   const userId = useSelector<AppState, number>((state) => state.user.id); // Select userId from state\n\n//   // Fetch vacations based on the userId\n//   useEffect(() => {\n//     if (!token) {\n//       console.warn(\"User is not logged in.\");\n//       return;\n//     }\n\n//     vacationsService\n//       .getAllVacationsByUserId(userId)\n//       .then((vacations) => {\n//         if (vacations.length > 0) {\n//           setVacations(vacations);\n//           const action = vacationActions.initVacations(vacations);\n//           dispatch(action);\n//         } else {\n//           console.warn(\"No vacations were fetched from the API.\");\n//         }\n//       })\n//       .catch((err) => {\n//         alert(err.message);\n//       });\n//   }, [token, dispatch, userId]);\n\n//   // Pagination logic\n//   const indexOfLastItem = currentPage * itemsPerPage;\n//   const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n//   const currentVacations = vacations\n//     .filter((vacation) => !showLiked || vacation.isLiked === 1) // Filter for liked vacations when toggled\n//     .slice(indexOfFirstItem, indexOfLastItem);\n\n//   // Go to the next page\n//   const nextPage = () => {\n//     if (currentPage < Math.ceil(vacations.length / itemsPerPage)) {\n//       setCurrentPage(currentPage + 1);\n//     }\n//   };\n\n//   // Go to the previous page\n//   const prevPage = () => {\n//     if (currentPage > 1) {\n//       setCurrentPage(currentPage - 1);\n//     }\n//   };\n\n//   // Toggle show liked vacations\n//   const toggleShowLiked = () => {\n//     setShowLiked((prevShowLiked) => !prevShowLiked);\n//     setCurrentPage(1); // Reset pagination to the first page\n//   };\n\n//   return (\n//     <div className=\"VacationList\">\n//       <div className=\"header d-flex\">\n//         {!isAdmin && (\n//           <div className=\"form-check form-switch\">\n//             <input\n//               className=\"form-check-input\"\n//               type=\"checkbox\"\n//               role=\"switch\"\n//               id=\"flexSwitchCheckChecked\"\n//               checked={showLiked}\n//               onChange={toggleShowLiked}\n//             />\n//             <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckChecked\">\n//               {showLiked ? \"Show All Vacations\" : \"Show Liked Vacations\"}\n//             </label>\n//           </div>\n//         )}\n//       </div>\n\n//       <div className=\"vacation-cards-container\">\n//         {currentVacations.length > 0 ? (\n//           currentVacations.map((vacation) => (\n//             <VacationCards\n//               key={vacation.id}\n//               vacation={vacation}\n//               isAdmin={isAdmin} // Pass isAdmin based on roleId\n//               onToggleLike={() => {\n//                 console.log(\"Like toggle function called\");\n//               }}\n//             />\n//           ))\n//         ) : (\n//           <p>No vacations available</p>\n//         )}\n//       </div>\n\n//       {/* Pagination controls */}\n//       <div className=\"pagination\">\n//         <button onClick={prevPage} disabled={currentPage === 1}>\n//           Previous\n//         </button>\n//         <span>Page {currentPage}</span>\n//         <button\n//           onClick={nextPage}\n//           disabled={currentPage === Math.ceil(vacations.length / itemsPerPage)}\n//         >\n//           Next\n//         </button>\n//       </div>\n//     </div>\n\n//   );\n// }\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}