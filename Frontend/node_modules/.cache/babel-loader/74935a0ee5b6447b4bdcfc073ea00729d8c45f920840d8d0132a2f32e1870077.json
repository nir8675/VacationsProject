{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Downloads\\\\02092024ProjectVacation\\\\Frontend\\\\src\\\\Components\\\\VacationArea\\\\VacationEdit\\\\VacationEdit.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useForm } from \"react-hook-form\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import { VacationModel } from \"../../../Models/VacationModel\";\n// import { vacationsService } from \"../../../Services/VacationsService\";\n// import \"./VacationEdit.css\";\n\n// export function EditVacation(): JSX.Element {\n//   // Extract the 'id' parameter from the URL using react-router's useParams\n//   // The 'id' represents the ID of the vacation being edited\n//   const { id } = useParams<{ id: string }>();\n\n//   // Use the useNavigate hook from react-router to navigate programmatically\n//   const navigate = useNavigate();\n\n//   // Using react-hook-form for form validation and state management\n//   // 'register' is used to register form inputs, 'handleSubmit' handles form submission,\n//   // 'setValue' sets form field values, 'getValues' retrieves form field values,\n//   // and 'errors' captures validation errors\n//   const {\n//     register,\n//     handleSubmit,\n//     setValue,\n//     getValues,\n//     formState: { errors },\n//   } = useForm<VacationModel>();\n\n//   // State to manage the selected image file, which is either a File or null\n//   const [image, setImage] = useState<File | null>(null);\n\n//   // useEffect runs when the component mounts or when 'id' or 'setValue' changes\n//   // It fetches the vacation data based on the vacation ID from the API\n//   useEffect(() => {\n//     const fetchVacation = async () => {\n//       try {\n//         // Call the service to fetch the vacation details by ID\n//         const vacationData = await vacationsService.getVacationById(Number(id));\n//         console.log(\"Vacation Data:\", vacationData); // Log the data\n\n//         // Populate the form with the existing vacation data using setValue\n//         setValue(\"destination\", vacationData.destination || \"\"); // Set the destination field\n//         setValue(\"description\", vacationData.description || \"\"); // Set the description field\n//         setValue(\"startDate\", vacationData.startDate || \"\"); // Set the start date\n//         setValue(\"endDate\", vacationData.endDate || \"\"); // Set the end date\n//         setValue(\"price\", vacationData.price || 0); // Set the price\n//       } catch (error) {\n//         console.error(\"Failed to fetch vacation:\", error);\n//       }\n//     };\n\n//     fetchVacation(); // Fetch the vacation data when the component loads\n//   }, [id, setValue]); // Dependencies: 'id' and 'setValue'\n\n//   // It updates the 'image' state with the selected file or sets it to null if no file is selected\n//   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     const file = e.target.files?.[0]; // Get the first file from the input\n//     setImage(file || null); // Set the 'image' state or null if no file is selected\n//   };\n\n//   // Function called when the form is submitted\n//   const onSubmit = async (formData: VacationModel) => {\n//     try {\n//       // Create a FormData object to hold the form values and image file\n//       const updatedVacation = new FormData();\n//       updatedVacation.append(\"destination\", formData.destination); // Append destination to the FormData\n//       updatedVacation.append(\"description\", formData.description); // Append description to the FormData\n//       updatedVacation.append(\"startDate\", formData.startDate); // Append start date to the FormData\n//       updatedVacation.append(\"endDate\", formData.endDate); // Append end date to the FormData\n//       updatedVacation.append(\"price\", formData.price.toString()); // Append price to the FormData\n\n//       // If an image file was selected, append it to the FormData\n//       if (image) {\n//         updatedVacation.append(\"imageName\", image);\n//       }\n\n//       // Send the updated vacation data to the API using the editVacation service method\n//       await vacationsService.editVacation(Number(id), updatedVacation);\n\n//       // Navigate to the vacations page after successful submission\n//       navigate(\"/vacations\");\n//     } catch (error) {\n//       console.error(\"Failed to update vacation:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"EditVacation\">\n//       <h2>Edit Vacation</h2>\n\n//       <form className=\"edit-form\" onSubmit={handleSubmit(onSubmit)}>\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"destination\">Destination:</label>\n//           <input\n//             id=\"destination\"\n//             type=\"text\"\n//             {...register(\"destination\", {\n//               required: \"Destination is required\",\n//               minLength: {\n//                 value: 3,\n//                 message: \"Destination must be at least 3 characters long\",\n//               },\n//             })}\n//           />\n//           {errors.destination && (\n//             <span className=\"error\">{errors.destination.message}</span>\n//           )}\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"description\">Description:</label>\n//           <textarea\n//             id=\"description\"\n//             {...register(\"description\", {\n//               required: \"Description is required\",\n//               maxLength: {\n//                 value: 500,\n//                 message: \"Description cannot exceed 500 characters\",\n//               },\n//             })}\n//           />\n//           {errors.description && (\n//             <span className=\"error\">{errors.description.message}</span>\n//           )}\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"startDate\">Start Date:</label>\n//           <input\n//             id=\"startDate\"\n//             type=\"date\"\n//             {...register(\"startDate\", {\n//               required: \"Start date is required\",\n//             })}\n//           />\n//           {errors.startDate && (\n//             <span className=\"error\">{errors.startDate.message}</span>\n//           )}\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"endDate\">End Date:</label>\n//           <input\n//             id=\"endDate\"\n//             type=\"date\"\n//             {...register(\"endDate\", {\n//               required: \"End date is required\",\n//               validate: (value) =>\n//                 new Date(value) >= new Date(getValues(\"startDate\")) ||\n//                 \"End date cannot be before start date\",\n//             })}\n//           />\n//           {errors.endDate && (\n//             <span className=\"error\">{errors.endDate.message}</span>\n//           )}\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"price\">Price:</label>\n//           <input\n//             id=\"price\"\n//             type=\"number\"\n//             {...register(\"price\", {\n//               required: \"Price is required\",\n//               min: { value: 1, message: \"Price must be positive\" },\n//               max: { value: 10000, message: \"Price cannot exceed 10,000\" },\n//             })}\n//           />\n//           {errors.price && (\n//             <span className=\"error\">{errors.price.message}</span>\n//           )}\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"image\">Image (optional):</label>\n//           <input\n//             id=\"image\"\n//             type=\"file\"\n//             accept=\"image/*\"\n//             onChange={handleFileChange}\n//           />\n//         </div>\n\n//         <button className=\"submit-btn\" type=\"submit\">\n//           Update Vacation\n//         </button>\n//       </form>\n//     </div>\n//   );\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { vacationsService } from \"../../../Services/VacationsService\";\nimport \"./VacationEdit.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function EditVacation() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    // Use reset to update the form fields with fetched data\n    formState: {\n      errors\n    }\n  } = useForm({\n    defaultValues: {\n      destination: \"\",\n      description: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      price: 0\n    }\n  });\n  const [image, setImage] = useState(null);\n  useEffect(() => {\n    const fetchVacation = async () => {\n      try {\n        const vacationData = await vacationsService.getVacationById(Number(id));\n        console.log(\"Vacation Data:\", vacationData);\n\n        // Use reset to update all form fields at once\n        reset({\n          destination: vacationData.destination || \"\",\n          description: vacationData.description || \"\",\n          startDate: vacationData.startDate || \"\",\n          endDate: vacationData.endDate || \"\",\n          price: vacationData.price || 0\n        });\n      } catch (error) {\n        console.error(\"Failed to fetch vacation:\", error);\n      }\n    };\n    fetchVacation();\n  }, [id, reset]);\n  const handleFileChange = e => {\n    var _e$target$files;\n    const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    setImage(file || null);\n  };\n  const onSubmit = async formData => {\n    try {\n      const updatedVacation = new FormData();\n      updatedVacation.append(\"destination\", formData.destination);\n      updatedVacation.append(\"description\", formData.description);\n      updatedVacation.append(\"startDate\", formData.startDate);\n      updatedVacation.append(\"endDate\", formData.endDate);\n      updatedVacation.append(\"price\", formData.price.toString());\n      if (image) {\n        updatedVacation.append(\"imageName\", image);\n      }\n      await vacationsService.editVacation(Number(id), updatedVacation);\n      navigate(\"/vacations\");\n    } catch (error) {\n      console.error(\"Failed to update vacation:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"edit-vacation\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit Vacation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Destination:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ...register(\"destination\", {\n            required: true\n          }),\n          placeholder: \"Enter vacation destination\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), errors.destination && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error\",\n          children: \"This field is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Description:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          ...register(\"description\", {\n            required: true\n          }),\n          placeholder: \"Enter vacation description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), errors.description && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error\",\n          children: \"This field is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Start Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          ...register(\"startDate\", {\n            required: true\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), errors.startDate && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error\",\n          children: \"This field is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"End Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          ...register(\"endDate\", {\n            required: true\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this), errors.endDate && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error\",\n          children: \"This field is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Price:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          ...register(\"price\", {\n            required: true\n          }),\n          placeholder: \"Enter vacation price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this), errors.price && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error\",\n          children: \"This field is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Image:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"image/*\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Vacation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n}\n_s(EditVacation, \"zzQZ2Oa4SYvd36TgJ60mzwmAa3o=\", false, function () {\n  return [useParams, useNavigate, useForm];\n});\n_c = EditVacation;\nvar _c;\n$RefreshReg$(_c, \"EditVacation\");","map":{"version":3,"names":["React","useState","useEffect","useForm","useParams","useNavigate","vacationsService","jsxDEV","_jsxDEV","EditVacation","_s","id","navigate","register","handleSubmit","reset","formState","errors","defaultValues","destination","description","startDate","endDate","price","image","setImage","fetchVacation","vacationData","getVacationById","Number","console","log","error","handleFileChange","e","_e$target$files","file","target","files","onSubmit","formData","updatedVacation","FormData","append","toString","editVacation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","required","placeholder","accept","onChange","_c","$RefreshReg$"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Components/VacationArea/VacationEdit/VacationEdit.tsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { useForm } from \"react-hook-form\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import { VacationModel } from \"../../../Models/VacationModel\";\n// import { vacationsService } from \"../../../Services/VacationsService\";\n// import \"./VacationEdit.css\";\n\n// export function EditVacation(): JSX.Element {\n//   // Extract the 'id' parameter from the URL using react-router's useParams\n//   // The 'id' represents the ID of the vacation being edited\n//   const { id } = useParams<{ id: string }>();\n\n//   // Use the useNavigate hook from react-router to navigate programmatically\n//   const navigate = useNavigate();\n\n//   // Using react-hook-form for form validation and state management\n//   // 'register' is used to register form inputs, 'handleSubmit' handles form submission,\n//   // 'setValue' sets form field values, 'getValues' retrieves form field values,\n//   // and 'errors' captures validation errors\n//   const {\n//     register,\n//     handleSubmit,\n//     setValue,\n//     getValues,\n//     formState: { errors },\n//   } = useForm<VacationModel>();\n\n//   // State to manage the selected image file, which is either a File or null\n//   const [image, setImage] = useState<File | null>(null);\n\n//   // useEffect runs when the component mounts or when 'id' or 'setValue' changes\n//   // It fetches the vacation data based on the vacation ID from the API\n//   useEffect(() => {\n//     const fetchVacation = async () => {\n//       try {\n//         // Call the service to fetch the vacation details by ID\n//         const vacationData = await vacationsService.getVacationById(Number(id));\n//         console.log(\"Vacation Data:\", vacationData); // Log the data\n\n//         // Populate the form with the existing vacation data using setValue\n//         setValue(\"destination\", vacationData.destination || \"\"); // Set the destination field\n//         setValue(\"description\", vacationData.description || \"\"); // Set the description field\n//         setValue(\"startDate\", vacationData.startDate || \"\"); // Set the start date\n//         setValue(\"endDate\", vacationData.endDate || \"\"); // Set the end date\n//         setValue(\"price\", vacationData.price || 0); // Set the price\n//       } catch (error) {\n//         console.error(\"Failed to fetch vacation:\", error);\n//       }\n//     };\n\n//     fetchVacation(); // Fetch the vacation data when the component loads\n//   }, [id, setValue]); // Dependencies: 'id' and 'setValue'\n\n//   // It updates the 'image' state with the selected file or sets it to null if no file is selected\n//   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     const file = e.target.files?.[0]; // Get the first file from the input\n//     setImage(file || null); // Set the 'image' state or null if no file is selected\n//   };\n\n//   // Function called when the form is submitted\n//   const onSubmit = async (formData: VacationModel) => {\n//     try {\n//       // Create a FormData object to hold the form values and image file\n//       const updatedVacation = new FormData();\n//       updatedVacation.append(\"destination\", formData.destination); // Append destination to the FormData\n//       updatedVacation.append(\"description\", formData.description); // Append description to the FormData\n//       updatedVacation.append(\"startDate\", formData.startDate); // Append start date to the FormData\n//       updatedVacation.append(\"endDate\", formData.endDate); // Append end date to the FormData\n//       updatedVacation.append(\"price\", formData.price.toString()); // Append price to the FormData\n\n//       // If an image file was selected, append it to the FormData\n//       if (image) {\n//         updatedVacation.append(\"imageName\", image);\n//       }\n\n//       // Send the updated vacation data to the API using the editVacation service method\n//       await vacationsService.editVacation(Number(id), updatedVacation);\n\n//       // Navigate to the vacations page after successful submission\n//       navigate(\"/vacations\");\n//     } catch (error) {\n//       console.error(\"Failed to update vacation:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"EditVacation\">\n//       <h2>Edit Vacation</h2>\n\n//       <form className=\"edit-form\" onSubmit={handleSubmit(onSubmit)}>\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"destination\">Destination:</label>\n//           <input\n//             id=\"destination\"\n//             type=\"text\"\n//             {...register(\"destination\", {\n//               required: \"Destination is required\",\n//               minLength: {\n//                 value: 3,\n//                 message: \"Destination must be at least 3 characters long\",\n//               },\n//             })}\n//           />\n//           {errors.destination && (\n//             <span className=\"error\">{errors.destination.message}</span>\n//           )}\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"description\">Description:</label>\n//           <textarea\n//             id=\"description\"\n//             {...register(\"description\", {\n//               required: \"Description is required\",\n//               maxLength: {\n//                 value: 500,\n//                 message: \"Description cannot exceed 500 characters\",\n//               },\n//             })}\n//           />\n//           {errors.description && (\n//             <span className=\"error\">{errors.description.message}</span>\n//           )}\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"startDate\">Start Date:</label>\n//           <input\n//             id=\"startDate\"\n//             type=\"date\"\n//             {...register(\"startDate\", {\n//               required: \"Start date is required\",\n//             })}\n//           />\n//           {errors.startDate && (\n//             <span className=\"error\">{errors.startDate.message}</span>\n//           )}\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"endDate\">End Date:</label>\n//           <input\n//             id=\"endDate\"\n//             type=\"date\"\n//             {...register(\"endDate\", {\n//               required: \"End date is required\",\n//               validate: (value) =>\n//                 new Date(value) >= new Date(getValues(\"startDate\")) ||\n//                 \"End date cannot be before start date\",\n//             })}\n//           />\n//           {errors.endDate && (\n//             <span className=\"error\">{errors.endDate.message}</span>\n//           )}\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"price\">Price:</label>\n//           <input\n//             id=\"price\"\n//             type=\"number\"\n//             {...register(\"price\", {\n//               required: \"Price is required\",\n//               min: { value: 1, message: \"Price must be positive\" },\n//               max: { value: 10000, message: \"Price cannot exceed 10,000\" },\n//             })}\n//           />\n//           {errors.price && (\n//             <span className=\"error\">{errors.price.message}</span>\n//           )}\n//         </div>\n\n//         <div className=\"input-wrapper\">\n//           <label htmlFor=\"image\">Image (optional):</label>\n//           <input\n//             id=\"image\"\n//             type=\"file\"\n//             accept=\"image/*\"\n//             onChange={handleFileChange}\n//           />\n//         </div>\n\n//         <button className=\"submit-btn\" type=\"submit\">\n//           Update Vacation\n//         </button>\n//       </form>\n//     </div>\n//   );\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { VacationModel } from \"../../../Models/VacationModel\";\nimport { vacationsService } from \"../../../Services/VacationsService\";\nimport \"./VacationEdit.css\";\n\nexport function EditVacation(): JSX.Element {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n\n  const {\n    register,\n    handleSubmit,\n    reset, // Use reset to update the form fields with fetched data\n    formState: { errors },\n  } = useForm<VacationModel>({\n    defaultValues: {\n      destination: \"\",\n      description: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      price: 0,\n    },\n  });\n\n  const [image, setImage] = useState<File | null>(null);\n\n  useEffect(() => {\n    const fetchVacation = async () => {\n      try {\n        const vacationData = await vacationsService.getVacationById(Number(id));\n        console.log(\"Vacation Data:\", vacationData);\n\n        // Use reset to update all form fields at once\n        reset({\n          destination: vacationData.destination || \"\",\n          description: vacationData.description || \"\",\n          startDate: vacationData.startDate || \"\",\n          endDate: vacationData.endDate || \"\",\n          price: vacationData.price || 0,\n        });\n      } catch (error) {\n        console.error(\"Failed to fetch vacation:\", error);\n      }\n    };\n\n    fetchVacation();\n  }, [id, reset]);\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    setImage(file || null);\n  };\n\n  const onSubmit = async (formData: VacationModel) => {\n    try {\n      const updatedVacation = new FormData();\n      updatedVacation.append(\"destination\", formData.destination);\n      updatedVacation.append(\"description\", formData.description);\n      updatedVacation.append(\"startDate\", formData.startDate);\n      updatedVacation.append(\"endDate\", formData.endDate);\n      updatedVacation.append(\"price\", formData.price.toString());\n\n      if (image) {\n        updatedVacation.append(\"imageName\", image);\n      }\n\n      await vacationsService.editVacation(Number(id), updatedVacation);\n      navigate(\"/vacations\");\n    } catch (error) {\n      console.error(\"Failed to update vacation:\", error);\n    }\n  };\n\n  return (\n    <div className=\"edit-vacation\">\n      <h2>Edit Vacation</h2>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <label>\n          Destination:\n          <input\n            type=\"text\"\n            {...register(\"destination\", { required: true })}\n            placeholder=\"Enter vacation destination\"\n          />\n          {errors.destination && (\n            <span className=\"error\">This field is required</span>\n          )}\n        </label>\n\n        <label>\n          Description:\n          <textarea\n            {...register(\"description\", { required: true })}\n            placeholder=\"Enter vacation description\"\n          />\n          {errors.description && (\n            <span className=\"error\">This field is required</span>\n          )}\n        </label>\n\n        <label>\n          Start Date:\n          <input type=\"date\" {...register(\"startDate\", { required: true })} />\n          {errors.startDate && (\n            <span className=\"error\">This field is required</span>\n          )}\n        </label>\n\n        <label>\n          End Date:\n          <input type=\"date\" {...register(\"endDate\", { required: true })} />\n          {errors.endDate && (\n            <span className=\"error\">This field is required</span>\n          )}\n        </label>\n\n        <label>\n          Price:\n          <input\n            type=\"number\"\n            {...register(\"price\", { required: true })}\n            placeholder=\"Enter vacation price\"\n          />\n          {errors.price && (\n            <span className=\"error\">This field is required</span>\n          )}\n        </label>\n\n        <label>\n          Image:\n          <input type=\"file\" accept=\"image/*\" onChange={handleFileChange} />\n        </label>\n\n        <button type=\"submit\">Update Vacation</button>\n      </form>\n    </div>\n  );\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AAEzD,SAASC,gBAAgB,QAAQ,oCAAoC;AACrE,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,OAAO,SAASC,YAAYA,CAAA,EAAgB;EAAAC,EAAA;EAC1C,MAAM;IAAEC;EAAG,CAAC,GAAGP,SAAS,CAAiB,CAAC;EAC1C,MAAMQ,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAE9B,M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"},"metadata":{},"sourceType":"module","externalDependencies":[]}