{"ast":null,"code":"// import axios from \"axios\";\n// import { jwtDecode } from \"jwt-decode\";\n// import { CredentialsModel } from \"../Models/CredentialsModel\";\n// import { UserModel } from \"../Models/UserModel\";\n// import { store, userActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class UserService {\n//   public constructor() {\n//     const token = localStorage.getItem(\"token\");\n//     if (!token) return;\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async register(user: UserModel) {\n//     // Send user to backend:\n//     const response = await axios.post<{ token: string; user: UserModel }>(\n//       appConfig.registerUrl,\n//       user\n//     );\n\n//     // Get token and user:\n//     const { token, user: dbUser } = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async login(credentials: CredentialsModel): Promise<UserModel> {\n//     // Send credentials to backend:\n//     const response = await axios.post<{ token: string; user: UserModel }>(\n//       appConfig.loginUrl,\n//       credentials\n//     );\n\n//     // Get token and user:\n//     const { token, user: dbUser } = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n\n//     // Return user object\n//     return dbUser;\n//   }\n\n//   public logout() {\n//     // Remove token from storage\n//     localStorage.removeItem(\"token\");\n\n//     // Remove token from Axios header\n//     delete axios.defaults.headers.common[\"Authorization\"];\n\n//     const action = userActions.logoutUser();\n//     store.dispatch(action);\n//   }\n// }\n\n// export const userService = new UserService();\n\nimport axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { store, userActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\nclass UserService {\n  constructor() {\n    const token = localStorage.getItem(\"token\");\n    if (!token) return;\n\n    // Set token in Axios header\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    const container = jwtDecode(token);\n    const dbUser = container.user;\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n  }\n  async register(user) {\n    // Send user to backend:\n    const response = await axios.post(appConfig.registerUrl, user);\n\n    // Get token and user:\n    const {\n      token,\n      user: dbUser\n    } = response.data;\n\n    // Save token to storage:\n    localStorage.setItem(\"token\", token);\n\n    // Set token in Axios header\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n    // Send to redux:\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n  }\n  async login(credentials) {\n    // Send credentials to backend:\n    const response = await axios.post(appConfig.loginUrl, credentials);\n\n    // Get token and user from response:\n    const {\n      token,\n      user: dbUser\n    } = response.data;\n\n    // Save token to localStorage:\n    localStorage.setItem(\"token\", token);\n\n    // Set token in Axios default headers for future requests:\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n    // Dispatch user to redux:\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n\n    // Return the logged-in user object:\n    return dbUser;\n  }\n  logout() {\n    // Remove token from storage\n    localStorage.removeItem(\"token\");\n\n    // Remove token from Axios header\n    delete axios.defaults.headers.common[\"Authorization\"];\n    const action = userActions.logoutUser();\n    store.dispatch(action);\n  }\n}\nexport const userService = new UserService();","map":{"version":3,"names":["axios","jwtDecode","store","userActions","appConfig","UserService","constructor","token","localStorage","getItem","defaults","headers","common","container","dbUser","user","action","initUser","dispatch","register","response","post","registerUrl","data","setItem","login","credentials","loginUrl","logout","removeItem","logoutUser","userService"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Services/UserService.ts"],"sourcesContent":["// import axios from \"axios\";\n// import { jwtDecode } from \"jwt-decode\";\n// import { CredentialsModel } from \"../Models/CredentialsModel\";\n// import { UserModel } from \"../Models/UserModel\";\n// import { store, userActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class UserService {\n//   public constructor() {\n//     const token = localStorage.getItem(\"token\");\n//     if (!token) return;\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async register(user: UserModel) {\n//     // Send user to backend:\n//     const response = await axios.post<{ token: string; user: UserModel }>(\n//       appConfig.registerUrl,\n//       user\n//     );\n\n//     // Get token and user:\n//     const { token, user: dbUser } = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async login(credentials: CredentialsModel): Promise<UserModel> {\n//     // Send credentials to backend:\n//     const response = await axios.post<{ token: string; user: UserModel }>(\n//       appConfig.loginUrl,\n//       credentials\n//     );\n\n//     // Get token and user:\n//     const { token, user: dbUser } = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n\n//     // Return user object\n//     return dbUser;\n//   }\n\n//   public logout() {\n//     // Remove token from storage\n//     localStorage.removeItem(\"token\");\n\n//     // Remove token from Axios header\n//     delete axios.defaults.headers.common[\"Authorization\"];\n\n//     const action = userActions.logoutUser();\n//     store.dispatch(action);\n//   }\n// }\n\n// export const userService = new UserService();\n\nimport axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { CredentialsModel } from \"../Models/CredentialsModel\";\nimport { UserModel } from \"../Models/UserModel\";\nimport { store, userActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\n\nclass UserService {\n  public constructor() {\n    const token = localStorage.getItem(\"token\");\n    if (!token) return;\n\n    // Set token in Axios header\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n    const container = jwtDecode<{ user: UserModel }>(token);\n    const dbUser = container.user;\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n  }\n\n  public async register(user: UserModel) {\n    // Send user to backend:\n    const response = await axios.post<{ token: string; user: UserModel }>(\n      appConfig.registerUrl,\n      user\n    );\n\n    // Get token and user:\n    const { token, user: dbUser } = response.data;\n\n    // Save token to storage:\n    localStorage.setItem(\"token\", token);\n\n    // Set token in Axios header\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n    // Send to redux:\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n  }\n\n  public async login(credentials: CredentialsModel): Promise<UserModel> {\n    // Send credentials to backend:\n    const response = await axios.post<{ token: string; user: UserModel }>(\n        appConfig.loginUrl,\n        credentials\n    );\n\n    // Get token and user from response:\n    const { token, user: dbUser } = response.data;\n\n    // Save token to localStorage:\n    localStorage.setItem(\"token\", token);\n\n    // Set token in Axios default headers for future requests:\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n    // Dispatch user to redux:\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n\n    // Return the logged-in user object:\n    return dbUser;\n}\n\n\n\n  public logout() {\n    // Remove token from storage\n    localStorage.removeItem(\"token\");\n\n    // Remove token from Axios header\n    delete axios.defaults.headers.common[\"Authorization\"];\n\n    const action = userActions.logoutUser();\n    store.dispatch(action);\n  }\n}\n\nexport const userService = new UserService();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}