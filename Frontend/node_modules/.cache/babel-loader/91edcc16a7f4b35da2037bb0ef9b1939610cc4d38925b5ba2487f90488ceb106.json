{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Downloads\\\\02092024ProjectVacation\\\\Frontend\\\\src\\\\Components\\\\VacationArea\\\\VacationList\\\\VacationList.tsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { useDispatch } from \"react-redux\";\n// import { VacationModel } from \"../../../Models/VacationModel\";\n// import { vacationActions } from \"../../../Redux/store\";\n// import { vacationsService } from \"../../../Services/VacationsService\";\n// import { VacationCards } from \"../VacationCards/VacationCards\";\n// import \"./VacationList.css\";\n// import axios from \"axios\";\n\n// export function VacationList(): JSX.Element {\n//     const [vacations, setVacations] = useState<VacationModel[]>([]);\n//     const [currentPage, setCurrentPage] = useState<number>(1);\n//     const [itemsPerPage] = useState<number>(9);\n//     const dispatch = useDispatch();\n\n//     // Set token in the header for all axios requests\n//     useEffect(() => {\n//         const token = localStorage.getItem(\"token\"); // Get the token from local storage\n//         if (token) {\n//             axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`; // Set token in the headers\n//         }\n\n//         // Fetch vacations only if the token exists\n//         if (token) {\n//             vacationsService.getAllVacations()\n//                 .then(vacations => {\n//                     setVacations(vacations);\n//                     const action = vacationActions.initVacations(vacations);\n//                     dispatch(action);\n//                 })\n//                 .catch(err => alert(err.message));\n//         } else {\n//             alert(\"You are not logged in.\"); // Notify the user that they are not logged in\n//         }\n//     }, [dispatch]);\n\n//     const indexOfLastItem = currentPage * itemsPerPage;\n//     const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n//     const currentVacations = vacations.slice(indexOfFirstItem, indexOfLastItem);\n\n//     const nextPage = () => {\n//         if (currentPage < Math.ceil(vacations.length / itemsPerPage)) {\n//             setCurrentPage(currentPage + 1);\n//         }\n//     };\n\n//     const prevPage = () => {\n//         if (currentPage > 1) {\n//             setCurrentPage(currentPage - 1);\n//         }\n//     };\n\n//     return (\n//         <div className=\"VacationList\">\n//             <div className=\"vacation-cards-container\">\n//                 {currentVacations.map(vacation => (\n//                     <VacationCards\n//                         key={vacation.id}\n//                         vacation={vacation}\n//                         onToggleLike={() => { }}\n//                     />\n//                 ))}\n//             </div>\n\n//             <div className=\"pagination\">\n//                 <button onClick={prevPage} disabled={currentPage === 1}>Previous</button>\n//                 <span>Page {currentPage}</span>\n//                 <button onClick={nextPage} disabled={currentPage === Math.ceil(vacations.length / itemsPerPage)}>Next</button>\n//             </div>\n//         </div>\n//     );\n// }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { vacationActions } from \"../../../Redux/store\";\nimport { vacationsService } from \"../../../Services/VacationsService\";\nimport { VacationCards } from \"../VacationCards/VacationCards\";\nimport \"./VacationList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function VacationList() {\n  _s();\n  const [vacations, setVacations] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage] = useState(9);\n  const dispatch = useDispatch();\n\n  // Retrieve the token from Redux state\n  const token = useSelector(state => state.auth.token);\n  useEffect(() => {\n    if (token) {\n      console.log(\"Fetching vacations with token:\", token); // Debugging log\n      // If the token exists, proceed with the API call\n      vacationsService.getAllVacations().then(vacations => {\n        console.log(\"Fetched vacations:\", vacations); // Debugging log\n        setVacations(vacations); // Update local state with fetched vacations\n        const action = vacationActions.initVacations(vacations); // Create an action to initialize vacations in Redux\n        dispatch(action); // Dispatch the action to update the Redux store\n      }).catch(err => console.error(\"Error fetching vacations:\", err)); // Handle errors in fetching vacations\n    }\n  }, [token, dispatch]); // Dependency array ensures the effect runs when token or dispatch changes\n\n  // Get vacations from Redux state\n  const vacationsFromRedux = useSelector(state => state.vacations.vacations);\n\n  // Calculate total number of pages based on vacations count\n  const totalPages = Math.ceil(vacationsFromRedux.length / itemsPerPage); // Use vacationsFromRedux to calculate pages\n\n  // Determine which vacations to show on the current page\n  const currentVacations = vacationsFromRedux.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);\n\n  // Define the toggleLike function to pass to VacationCards\n  const handleToggleLike = vacationId => {\n    // Your toggle like logic here\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"VacationList\",\n    children: [vacationsFromRedux.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No vacations available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this) // Show message if no vacations are available\n    : currentVacations.map(v => /*#__PURE__*/_jsxDEV(VacationCards, {\n      vacation: v,\n      onToggleLike: handleToggleLike // Pass the required prop\n    }, v.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }, this)), vacationsFromRedux.length > itemsPerPage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Pagination\",\n      children: Array.from({\n        length: totalPages\n      }, (_, page) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(page + 1),\n        className: currentPage === page + 1 ? \"Active\" : \"\",\n        children: page + 1\n      }, page, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n_s(VacationList, \"UuW7dn7exhyVVCPF8tcWQwlV9iQ=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = VacationList;\nvar _c;\n$RefreshReg$(_c, \"VacationList\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","vacationActions","vacationsService","VacationCards","jsxDEV","_jsxDEV","VacationList","_s","vacations","setVacations","currentPage","setCurrentPage","itemsPerPage","dispatch","token","state","auth","console","log","getAllVacations","then","action","initVacations","catch","err","error","vacationsFromRedux","totalPages","Math","ceil","length","currentVacations","slice","handleToggleLike","vacationId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","v","vacation","onToggleLike","id","Array","from","_","page","onClick","_c","$RefreshReg$"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Components/VacationArea/VacationList/VacationList.tsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { useDispatch } from \"react-redux\";\n// import { VacationModel } from \"../../../Models/VacationModel\";\n// import { vacationActions } from \"../../../Redux/store\";\n// import { vacationsService } from \"../../../Services/VacationsService\";\n// import { VacationCards } from \"../VacationCards/VacationCards\";\n// import \"./VacationList.css\";\n// import axios from \"axios\";\n\n// export function VacationList(): JSX.Element {\n//     const [vacations, setVacations] = useState<VacationModel[]>([]);\n//     const [currentPage, setCurrentPage] = useState<number>(1);\n//     const [itemsPerPage] = useState<number>(9);\n//     const dispatch = useDispatch();\n\n//     // Set token in the header for all axios requests\n//     useEffect(() => {\n//         const token = localStorage.getItem(\"token\"); // Get the token from local storage\n//         if (token) {\n//             axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`; // Set token in the headers\n//         }\n\n//         // Fetch vacations only if the token exists\n//         if (token) {\n//             vacationsService.getAllVacations()\n//                 .then(vacations => {\n//                     setVacations(vacations);\n//                     const action = vacationActions.initVacations(vacations);\n//                     dispatch(action);\n//                 })\n//                 .catch(err => alert(err.message));\n//         } else {\n//             alert(\"You are not logged in.\"); // Notify the user that they are not logged in\n//         }\n//     }, [dispatch]);\n\n//     const indexOfLastItem = currentPage * itemsPerPage;\n//     const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n//     const currentVacations = vacations.slice(indexOfFirstItem, indexOfLastItem);\n\n//     const nextPage = () => {\n//         if (currentPage < Math.ceil(vacations.length / itemsPerPage)) {\n//             setCurrentPage(currentPage + 1);\n//         }\n//     };\n\n//     const prevPage = () => {\n//         if (currentPage > 1) {\n//             setCurrentPage(currentPage - 1);\n//         }\n//     };\n\n//     return (\n//         <div className=\"VacationList\">\n//             <div className=\"vacation-cards-container\">\n//                 {currentVacations.map(vacation => (\n//                     <VacationCards\n//                         key={vacation.id}\n//                         vacation={vacation}\n//                         onToggleLike={() => { }}\n//                     />\n//                 ))}\n//             </div>\n\n//             <div className=\"pagination\">\n//                 <button onClick={prevPage} disabled={currentPage === 1}>Previous</button>\n//                 <span>Page {currentPage}</span>\n//                 <button onClick={nextPage} disabled={currentPage === Math.ceil(vacations.length / itemsPerPage)}>Next</button>\n//             </div>\n//         </div>\n//     );\n// }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppState } from \"../../../Redux/store\";\nimport { VacationModel } from \"../../../Models/VacationModel\";\nimport { vacationActions } from \"../../../Redux/store\";\nimport { vacationsService } from \"../../../Services/VacationsService\";\nimport { VacationCards } from \"../VacationCards/VacationCards\";\nimport \"./VacationList.css\";\n\nexport function VacationList(): JSX.Element {\n  const [vacations, setVacations] = useState<VacationModel[]>([]);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [itemsPerPage] = useState<number>(9);\n  const dispatch = useDispatch();\n\n  // Retrieve the token from Redux state\n  const token = useSelector((state: AppState) => state.auth.token);\n\n  useEffect(() => {\n    if (token) {\n      console.log(\"Fetching vacations with token:\", token); // Debugging log\n      // If the token exists, proceed with the API call\n      vacationsService\n        .getAllVacations()\n        .then((vacations) => {\n          console.log(\"Fetched vacations:\", vacations); // Debugging log\n          setVacations(vacations); // Update local state with fetched vacations\n          const action = vacationActions.initVacations(vacations); // Create an action to initialize vacations in Redux\n          dispatch(action); // Dispatch the action to update the Redux store\n        })\n        .catch((err) => console.error(\"Error fetching vacations:\", err)); // Handle errors in fetching vacations\n    }\n  }, [token, dispatch]); // Dependency array ensures the effect runs when token or dispatch changes\n\n  // Get vacations from Redux state\n  const vacationsFromRedux = useSelector(\n    (state: AppState) => state.vacations.vacations\n  );\n\n  // Calculate total number of pages based on vacations count\n  const totalPages = Math.ceil(vacationsFromRedux.length / itemsPerPage); // Use vacationsFromRedux to calculate pages\n\n  // Determine which vacations to show on the current page\n  const currentVacations = vacationsFromRedux.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  // Define the toggleLike function to pass to VacationCards\n  const handleToggleLike = (vacationId: number) => {\n    // Your toggle like logic here\n  };\n\n  return (\n    <div className=\"VacationList\">\n      {vacationsFromRedux.length === 0 ? (\n        <p>No vacations available</p> // Show message if no vacations are available\n      ) : (\n        currentVacations.map((v) => (\n          <VacationCards\n            key={v.id}\n            vacation={v}\n            onToggleLike={handleToggleLike} // Pass the required prop\n          />\n        ))\n      )}\n\n      {/* Pagination controls */}\n      {vacationsFromRedux.length > itemsPerPage && (\n        <div className=\"Pagination\">\n          {Array.from({ length: totalPages }, (_, page) => (\n            <button\n              key={page}\n              onClick={() => setCurrentPage(page + 1)}\n              className={currentPage === page + 1 ? \"Active\" : \"\"}\n            >\n              {page + 1}\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAGtD,SAASC,eAAe,QAAQ,sBAAsB;AACtD,SAASC,gBAAgB,QAAQ,oCAAoC;AACrE,SAASC,aAAa,QAAQ,gCAAgC;AAC9D,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,OAAO,SAASC,YAAYA,CAAA,EAAgB;EAAAC,EAAA;EAC1C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAkB,EAAE,CAAC;EAC/D,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAS,CAAC,CAAC;EACzD,MAAM,CAACc,YAAY,CAAC,GAAGd,QAAQ,CAAS,CAAC,CAAC;EAC1C,MAAMe,QAAQ,GAAGd,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMe,KAAK,GAAGd,WAAW,CAAEe,KAAe,IAAKA,KAAK,CAACC,IAAI,CAACF,KAAK,CAAC;EAEhEjB,SAAS,CAAC,MAAM;IACd,IAAIiB,KAAK,EAAE;MACTG,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEJ,KAAK,CAAC,CAAC,CAAC;MACtD;MACAZ,gBAAgB,CACbiB,eAAe,CAAC,CAAC,CACjBC,IAAI,CAAEZ,SAAS,IAAK;QACnBS,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEV,SAAS,CAAC,CAAC,CAAC;QAC9CC,YAAY,CAACD,SAAS,CAAC,CAAC,CAAC;QACzB,MAAMa,MAAM,GAAGpB,eAAe,CAACqB,aAAa,CAACd,SAAS,CAAC,CAAC,CAAC;QACzDK,QAAQ,CAACQ,MAAM,CAAC,CAAC,CAAC;MACpB,CAAC,CAAC,CACDE,KAAK,CAAEC,GAAG,IAAKP,OAAO,CAACQ,KAAK,CAAC,2BAA2B,EAAED,GAAG,CAAC,CAAC,CAAC,CAAC;IACtE;EACF,CAAC,EAAE,CAACV,KAAK,EAAED,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEvB;EACA,MAAMa,kBAAkB,GAAG1B,WAAW,CACnCe,KAAe,IAAKA,KAAK,CAACP,SAAS,CAACA,SACvC,CAAC;;EAED;EACA,MAAMmB,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACH,kBAAkB,CAACI,MAAM,GAAGlB,YAAY,CAAC,CAAC,CAAC;;EAExE;EACA,MAAMmB,gBAAgB,GAAGL,kBAAkB,CAACM,KAAK,CAC/C,CAACtB,WAAW,GAAG,CAAC,IAAIE,YAAY,EAChCF,WAAW,GAAGE,YAChB,CAAC;;EAED;EACA,MAAMqB,gBAAgB,GAAIC,UAAkB,IAAK;IAC/C;EAAA,CACD;EAED,oBACE7B,OAAA;IAAK8B,SAAS,EAAC,cAAc;IAAAC,QAAA,GAC1BV,kBAAkB,CAACI,MAAM,KAAK,CAAC,gBAC9BzB,OAAA;MAAA+B,QAAA,EAAG;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC;IAAA,EAE9BT,gBAAgB,CAACU,GAAG,CAAEC,CAAC,iBACrBrC,OAAA,CAACF,aAAa;MAEZwC,QAAQ,EAAED,CAAE;MACZE,YAAY,EAAEX,gBAAiB,CAAC;IAAA,GAF3BS,CAAC,CAACG,EAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGV,CACF,CACF,EAGAd,kBAAkB,CAACI,MAAM,GAAGlB,YAAY,iBACvCP,OAAA;MAAK8B,SAAS,EAAC,YAAY;MAAAC,QAAA,EACxBU,KAAK,CAACC,IAAI,CAAC;QAAEjB,MAAM,EAAEH;MAAW,CAAC,EAAE,CAACqB,CAAC,EAAEC,IAAI,kBAC1C5C,OAAA;QAEE6C,OAAO,EAAEA,CAAA,KAAMvC,cAAc,CAACsC,IAAI,GAAG,CAAC,CAAE;QACxCd,SAAS,EAAEzB,WAAW,KAAKuC,IAAI,GAAG,CAAC,GAAG,QAAQ,GAAG,EAAG;QAAAb,QAAA,EAEnDa,IAAI,GAAG;MAAC,GAJJA,IAAI;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKH,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACjC,EAAA,CA1EeD,YAAY;EAAA,QAITP,WAAW,EAGdC,WAAW,EAmBEA,WAAW;AAAA;AAAAmD,EAAA,GA1BxB7C,YAAY;AAAA,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}