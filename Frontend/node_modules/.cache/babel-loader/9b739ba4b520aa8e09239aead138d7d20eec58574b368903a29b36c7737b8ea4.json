{"ast":null,"code":"import axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\"; // npm i jwt-decode\n\nimport { store, userActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\nclass UserService {\n  constructor() {\n    const token = localStorage.getItem(\"token\");\n    if (!token) return;\n    const container = jwtDecode(token);\n    const dbUser = container.user;\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n  }\n  async register(user) {\n    // Send user to backend:\n    const response = await axios.post(appConfig.registerUrl, user);\n\n    // Get token:\n    const token = response.data;\n\n    // Save token to storage:\n    localStorage.setItem(\"token\", token);\n\n    // Extract db user from token:\n    const container = jwtDecode(token);\n    const dbUser = container.user;\n\n    // Send to redux:\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n  }\n\n  // public async login(credentials: CredentialsModel) {\n  //   // Send credentials to backend:\n  //   const response = await axios.post<string>(appConfig.loginUrl, credentials);\n\n  //   // Get token:\n  //   const token = response.data;\n\n  //   // Save token to storage:\n  //   localStorage.setItem(\"token\", token);\n\n  //   // Extract db user from token:\n  //   const container = jwtDecode<{ user: UserModel }>(token);\n  //   const dbUser = container.user;\n\n  //   // Send to redux:\n  //   const action = userActions.initUser(dbUser);\n  //   store.dispatch(action);\n  // }\n  async login(credentials) {\n    // Send credentials to backend:\n    const response = await axios.post(appConfig.loginUrl, credentials);\n\n    // Get token:\n    const token = response.data;\n\n    // Save token to storage:\n    localStorage.setItem(\"token\", token);\n\n    // Extract db user from token:\n    const container = jwtDecode(token);\n    const dbUser = container.user;\n\n    // Send to redux:\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n\n    // Return token\n    return token;\n  }\n  logout() {\n    localStorage.removeItem(\"token\");\n    const action = userActions.logoutUser();\n    store.dispatch(action);\n  }\n}\nexport const userService = new UserService();","map":{"version":3,"names":["axios","jwtDecode","store","userActions","appConfig","UserService","constructor","token","localStorage","getItem","container","dbUser","user","action","initUser","dispatch","register","response","post","registerUrl","data","setItem","login","credentials","loginUrl","logout","removeItem","logoutUser","userService"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Services/UserService.ts"],"sourcesContent":["import axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\"; // npm i jwt-decode\nimport { CredentialsModel } from \"../Models/CredentialsModel\";\nimport { UserModel } from \"../Models/UserModel\";\nimport { store, userActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\n\nclass UserService {\n  public constructor() {\n    const token = localStorage.getItem(\"token\");\n    if (!token) return;\n    const container = jwtDecode<{ user: UserModel }>(token);\n    const dbUser = container.user;\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n  }\n\n  public async register(user: UserModel) {\n    // Send user to backend:\n    const response = await axios.post<string>(appConfig.registerUrl, user);\n\n    // Get token:\n    const token = response.data;\n\n    // Save token to storage:\n    localStorage.setItem(\"token\", token);\n\n    // Extract db user from token:\n    const container = jwtDecode<{ user: UserModel }>(token);\n    const dbUser = container.user;\n\n    // Send to redux:\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n  }\n\n  // public async login(credentials: CredentialsModel) {\n  //   // Send credentials to backend:\n  //   const response = await axios.post<string>(appConfig.loginUrl, credentials);\n\n  //   // Get token:\n  //   const token = response.data;\n\n  //   // Save token to storage:\n  //   localStorage.setItem(\"token\", token);\n\n  //   // Extract db user from token:\n  //   const container = jwtDecode<{ user: UserModel }>(token);\n  //   const dbUser = container.user;\n\n  //   // Send to redux:\n  //   const action = userActions.initUser(dbUser);\n  //   store.dispatch(action);\n  // }\n  public async login(credentials: CredentialsModel): Promise<string> {\n    // Send credentials to backend:\n    const response = await axios.post<string>(appConfig.loginUrl, credentials);\n\n    // Get token:\n    const token = response.data;\n\n    // Save token to storage:\n    localStorage.setItem(\"token\", token);\n\n    // Extract db user from token:\n    const container = jwtDecode<{ user: UserModel }>(token);\n    const dbUser = container.user;\n\n    // Send to redux:\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n\n    // Return token\n    return token;\n  }\n\n  public logout() {\n    localStorage.removeItem(\"token\");\n    const action = userActions.logoutUser();\n    store.dispatch(action);\n  }\n}\n\nexport const userService = new UserService();\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY,CAAC,CAAC;;AAGxC,SAASC,KAAK,EAAEC,WAAW,QAAQ,gBAAgB;AACnD,SAASC,SAAS,QAAQ,oBAAoB;AAE9C,MAAMC,WAAW,CAAC;EACTC,WAAWA,CAAA,EAAG;IACnB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;IACZ,MAAMG,SAAS,GAAGT,SAAS,CAAsBM,KAAK,CAAC;IACvD,MAAMI,MAAM,GAAGD,SAAS,CAACE,IAAI;IAC7B,MAAMC,MAAM,GAAGV,WAAW,CAACW,QAAQ,CAACH,MAAM,CAAC;IAC3CT,KAAK,CAACa,QAAQ,CAACF,MAAM,CAAC;EACxB;EAEA,MAAaG,QAAQA,CAACJ,IAAe,EAAE;IACrC;IACA,MAAMK,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAASd,SAAS,CAACe,WAAW,EAAEP,IAAI,CAAC;;IAEtE;IACA,MAAML,KAAK,GAAGU,QAAQ,CAACG,IAAI;;IAE3B;IACAZ,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEd,KAAK,CAAC;;IAEpC;IACA,MAAMG,SAAS,GAAGT,SAAS,CAAsBM,KAAK,CAAC;IACvD,MAAMI,MAAM,GAAGD,SAAS,CAACE,IAAI;;IAE7B;IACA,MAAMC,MAAM,GAAGV,WAAW,CAACW,QAAQ,CAACH,MAAM,CAAC;IAC3CT,KAAK,CAACa,QAAQ,CAACF,MAAM,CAAC;EACxB;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA,MAAaS,KAAKA,CAACC,WAA6B,EAAmB;IACjE;IACA,MAAMN,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAASd,SAAS,CAACoB,QAAQ,EAAED,WAAW,CAAC;;IAE1E;IACA,MAAMhB,KAAK,GAAGU,QAAQ,CAACG,IAAI;;IAE3B;IACAZ,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEd,KAAK,CAAC;;IAEpC;IACA,MAAMG,SAAS,GAAGT,SAAS,CAAsBM,KAAK,CAAC;IACvD,MAAMI,MAAM,GAAGD,SAAS,CAACE,IAAI;;IAE7B;IACA,MAAMC,MAAM,GAAGV,WAAW,CAACW,QAAQ,CAACH,MAAM,CAAC;IAC3CT,KAAK,CAACa,QAAQ,CAACF,MAAM,CAAC;;IAEtB;IACA,OAAON,KAAK;EACd;EAEOkB,MAAMA,CAAA,EAAG;IACdjB,YAAY,CAACkB,UAAU,CAAC,OAAO,CAAC;IAChC,MAAMb,MAAM,GAAGV,WAAW,CAACwB,UAAU,CAAC,CAAC;IACvCzB,KAAK,CAACa,QAAQ,CAACF,MAAM,CAAC;EACxB;AACF;AAEA,OAAO,MAAMe,WAAW,GAAG,IAAIvB,WAAW,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}