{"ast":null,"code":"// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n//   public async getAllVacations() {\n//     // If vacations are already in the Redux store, return them to avoid unnecessary API calls\n//     if (store.getState().vacations) return store.getState().vacations;\n//     const response = await axios.get<VacationModel[]>(appConfig.vacationsUrl, {\n//       headers: { Authorization: `Bearer ${store.getState().auth?.token}` },\n//     });\n//     const vacations = response.data;\n\n//     // Sort vacations by start date in ascending order\n//     vacations.sort(\n//       (a, b) =>\n//         new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//     );\n\n//     const action = vacationActions.initVacations(vacations);\n//     store.dispatch(action);\n//     return vacations;\n//   }\n\n//   public async addVacation(vacation: VacationModel) {\n//     const options: AxiosRequestConfig = {\n//       headers: { \"Content-Type\": \"multipart/form-data\" },\n//     };\n//     const response = await axios.post<VacationModel>(\n//       appConfig.vacationsUrl,\n//       vacation,\n//       options\n//     );\n//     if (!store.getState().vacations) return;\n//     const addedVacation = response.data;\n\n//     // Dispatch the added vacation to the Redux store\n//     const action = vacationActions.addVacation(addedVacation);\n//     store.dispatch(action);\n\n//     // Return sorted vacations after adding the new one\n//     this.sortVacations();\n//   }\n\n//   // Function to delete a vacation by id\n//   public async deleteVacation(vacationId: number) {\n//     const response = await axios.delete<VacationModel>(\n//       appConfig.vacationsUrl + vacationId\n//     );\n//     const deletedVacation = response.data;\n//     const action = vacationActions.deleteVacation(deletedVacation.id);\n//     store.dispatch(action);\n//   }\n\n//   // Function to toggle like a vacation by id\n//   public async toggleLike(vacationId: number) {\n//     try {\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${store.getState().auth?.token}` },\n//         }\n//       );\n\n//       const updatedVacation = response.data;\n\n//       // Update the Redux store with the updated vacation\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n\n//       // Return the updated vacation\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // function to sort vacations in the Redux store\n//   private sortVacations() {\n//     const sortedVacations = [...store.getState().vacations].sort(\n//       (a, b) =>\n//         new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//     );\n//     const action = vacationActions.initVacations(sortedVacations);\n//     store.dispatch(action);\n//   }\n// }\n\n// export const vacationsService = new VacationsService();\n\n// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n//   // Function to get all vacations\n//   public async getAllVacations(): Promise<VacationModel[]> {\n//     try {\n//       // Retrieve the current state\n//       const state = store.getState();\n\n//       // If vacations are already in the Redux store, return them to avoid unnecessary API calls\n//       if (state.vacations && state.vacations.length > 0) {\n//         return state.vacations;\n//       }\n\n//       // Retrieve token from Redux store\n//       const token = state.auth?.token;\n//       if (!token) {\n//         console.warn(\"Token is not available.\");\n//         throw new Error(\"Unauthorized access. Please log in.\");\n//       }\n\n//       console.log(\"Token before request:\", token); // Debugging token\n\n//       const response = await axios.get<VacationModel[]>(\n//         appConfig.vacationsUrl,\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n\n//       const vacations = response.data;\n\n//       // Sort vacations by start date in ascending order\n//       vacations.sort(\n//         (a, b) =>\n//           new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//       );\n\n//       const action = vacationActions.initVacations(vacations);\n//       store.dispatch(action);\n\n//       return vacations;\n//     } catch (error) {\n//       console.error(\"Failed to fetch vacations:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Function to add a vacation\n//   public async addVacation(vacation: VacationModel): Promise<void> {\n//     try {\n//       const token = store.getState().auth?.token;\n//       if (!token) {\n//         console.warn(\"Token is not available.\");\n//         throw new Error(\"Unauthorized access. Please log in.\");\n//       }\n\n//       const options: AxiosRequestConfig = {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//           Authorization: `Bearer ${token}`,\n//         },\n//       };\n\n//       const response = await axios.post<VacationModel>(\n//         appConfig.vacationsUrl,\n//         vacation,\n//         options\n//       );\n\n//       const addedVacation = response.data;\n\n//       // Dispatch the added vacation to the Redux store\n//       const action = vacationActions.addVacation(addedVacation);\n//       store.dispatch(action);\n\n//       // Fetch all vacations again to ensure the list is up-to-date\n//       await this.getAllVacations();\n//     } catch (error) {\n//       console.error(\"Failed to add vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Function to delete a vacation by id\n//   public async deleteVacation(vacationId: number): Promise<void> {\n//     try {\n//       const token = store.getState().auth?.token;\n//       if (!token) {\n//         console.warn(\"Token is not available.\");\n//         throw new Error(\"Unauthorized access. Please log in.\");\n//       }\n\n//       await axios.delete<VacationModel>(\n//         `${appConfig.vacationsUrl}${vacationId}`,\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n\n//       const action = vacationActions.deleteVacation(vacationId);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to delete vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Function to toggle like a vacation by id\n//   public async toggleLike(vacationId: number): Promise<VacationModel> {\n//     try {\n//       const token = store.getState().auth?.token;\n//       if (!token) {\n//         console.warn(\"Token is not available.\");\n//         throw new Error(\"Unauthorized access. Please log in.\");\n//       }\n\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n\n//       const updatedVacation = response.data;\n\n//       // Update the Redux store with the updated vacation\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Function to sort vacations in the Redux store\n//   private sortVacations(): void {\n//     const state = store.getState();\n//     if (!state.vacations || state.vacations.length === 0) return;\n\n//     const sortedVacations = [...state.vacations].sort(\n//       (a, b) =>\n//         new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//     );\n\n//     const action = vacationActions.initVacations(sortedVacations);\n//     store.dispatch(action);\n//   }\n// }\n\n// export const vacationsService = new VacationsService();","map":{"version":3,"names":[],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Services/VacationsService.ts"],"sourcesContent":["// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n//   public async getAllVacations() {\n//     // If vacations are already in the Redux store, return them to avoid unnecessary API calls\n//     if (store.getState().vacations) return store.getState().vacations;\n//     const response = await axios.get<VacationModel[]>(appConfig.vacationsUrl, {\n//       headers: { Authorization: `Bearer ${store.getState().auth?.token}` },\n//     });\n//     const vacations = response.data;\n\n//     // Sort vacations by start date in ascending order\n//     vacations.sort(\n//       (a, b) =>\n//         new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//     );\n\n//     const action = vacationActions.initVacations(vacations);\n//     store.dispatch(action);\n//     return vacations;\n//   }\n\n//   public async addVacation(vacation: VacationModel) {\n//     const options: AxiosRequestConfig = {\n//       headers: { \"Content-Type\": \"multipart/form-data\" },\n//     };\n//     const response = await axios.post<VacationModel>(\n//       appConfig.vacationsUrl,\n//       vacation,\n//       options\n//     );\n//     if (!store.getState().vacations) return;\n//     const addedVacation = response.data;\n\n//     // Dispatch the added vacation to the Redux store\n//     const action = vacationActions.addVacation(addedVacation);\n//     store.dispatch(action);\n\n//     // Return sorted vacations after adding the new one\n//     this.sortVacations();\n//   }\n\n//   // Function to delete a vacation by id\n//   public async deleteVacation(vacationId: number) {\n//     const response = await axios.delete<VacationModel>(\n//       appConfig.vacationsUrl + vacationId\n//     );\n//     const deletedVacation = response.data;\n//     const action = vacationActions.deleteVacation(deletedVacation.id);\n//     store.dispatch(action);\n//   }\n\n//   // Function to toggle like a vacation by id\n//   public async toggleLike(vacationId: number) {\n//     try {\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${store.getState().auth?.token}` },\n//         }\n//       );\n\n//       const updatedVacation = response.data;\n\n//       // Update the Redux store with the updated vacation\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n\n//       // Return the updated vacation\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // function to sort vacations in the Redux store\n//   private sortVacations() {\n//     const sortedVacations = [...store.getState().vacations].sort(\n//       (a, b) =>\n//         new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//     );\n//     const action = vacationActions.initVacations(sortedVacations);\n//     store.dispatch(action);\n//   }\n// }\n\n// export const vacationsService = new VacationsService();\n\n// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n//   // Function to get all vacations\n//   public async getAllVacations(): Promise<VacationModel[]> {\n//     try {\n//       // Retrieve the current state\n//       const state = store.getState();\n\n//       // If vacations are already in the Redux store, return them to avoid unnecessary API calls\n//       if (state.vacations && state.vacations.length > 0) {\n//         return state.vacations;\n//       }\n\n//       // Retrieve token from Redux store\n//       const token = state.auth?.token;\n//       if (!token) {\n//         console.warn(\"Token is not available.\");\n//         throw new Error(\"Unauthorized access. Please log in.\");\n//       }\n\n//       console.log(\"Token before request:\", token); // Debugging token\n\n//       const response = await axios.get<VacationModel[]>(\n//         appConfig.vacationsUrl,\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n\n//       const vacations = response.data;\n\n//       // Sort vacations by start date in ascending order\n//       vacations.sort(\n//         (a, b) =>\n//           new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//       );\n\n//       const action = vacationActions.initVacations(vacations);\n//       store.dispatch(action);\n\n//       return vacations;\n//     } catch (error) {\n//       console.error(\"Failed to fetch vacations:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Function to add a vacation\n//   public async addVacation(vacation: VacationModel): Promise<void> {\n//     try {\n//       const token = store.getState().auth?.token;\n//       if (!token) {\n//         console.warn(\"Token is not available.\");\n//         throw new Error(\"Unauthorized access. Please log in.\");\n//       }\n\n//       const options: AxiosRequestConfig = {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//           Authorization: `Bearer ${token}`,\n//         },\n//       };\n\n//       const response = await axios.post<VacationModel>(\n//         appConfig.vacationsUrl,\n//         vacation,\n//         options\n//       );\n\n//       const addedVacation = response.data;\n\n//       // Dispatch the added vacation to the Redux store\n//       const action = vacationActions.addVacation(addedVacation);\n//       store.dispatch(action);\n\n//       // Fetch all vacations again to ensure the list is up-to-date\n//       await this.getAllVacations();\n//     } catch (error) {\n//       console.error(\"Failed to add vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Function to delete a vacation by id\n//   public async deleteVacation(vacationId: number): Promise<void> {\n//     try {\n//       const token = store.getState().auth?.token;\n//       if (!token) {\n//         console.warn(\"Token is not available.\");\n//         throw new Error(\"Unauthorized access. Please log in.\");\n//       }\n\n//       await axios.delete<VacationModel>(\n//         `${appConfig.vacationsUrl}${vacationId}`,\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n\n//       const action = vacationActions.deleteVacation(vacationId);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to delete vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Function to toggle like a vacation by id\n//   public async toggleLike(vacationId: number): Promise<VacationModel> {\n//     try {\n//       const token = store.getState().auth?.token;\n//       if (!token) {\n//         console.warn(\"Token is not available.\");\n//         throw new Error(\"Unauthorized access. Please log in.\");\n//       }\n\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n\n//       const updatedVacation = response.data;\n\n//       // Update the Redux store with the updated vacation\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Function to sort vacations in the Redux store\n//   private sortVacations(): void {\n//     const state = store.getState();\n//     if (!state.vacations || state.vacations.length === 0) return;\n\n//     const sortedVacations = [...state.vacations].sort(\n//       (a, b) =>\n//         new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//     );\n\n//     const action = vacationActions.initVacations(sortedVacations);\n//     store.dispatch(action);\n//   }\n// }\n\n// export const vacationsService = new VacationsService();\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}