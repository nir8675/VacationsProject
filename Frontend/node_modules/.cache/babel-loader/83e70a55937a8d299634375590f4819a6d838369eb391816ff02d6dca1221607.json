{"ast":null,"code":"// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n\n//   public async getAllVacationsByUserId(userId: number) {\n//     const response = await axios.get<VacationModel[]>(\n//       appConfig.vacationsUrl + userId\n//     );\n\n//     const vacations = response.data;\n\n//     const action = vacationActions.initVacations(vacations);\n//     store.dispatch(action);\n\n//     return vacations;\n//   }\n\n//   public async addVacation(vacation: VacationModel) {\n//     const options: AxiosRequestConfig = {\n//       headers: { \"Content-Type\": \"multipart/form-data\" },\n//     };\n//     const response = await axios.post<VacationModel>(\n//       appConfig.vacationsUrl,\n//       vacation,\n//       options\n//     );\n//     if (!store.getState().vacations) return;\n//     const addedVacation = response.data;\n\n//     // Dispatch the added vacation to the Redux store\n//     const action = vacationActions.addVacation(addedVacation);\n//     store.dispatch(action);\n\n//     // Return sorted vacations after adding the new one\n//     this.sortVacations();\n//   }\n\n//   // Function to delete a vacation by id\n//   public async deleteVacation(vacationId: number) {\n//     const response = await axios.delete<VacationModel>(\n//       appConfig.vacationsUrl + vacationId\n//     );\n//     const deletedVacation = response.data;\n//     const action = vacationActions.deleteVacation(deletedVacation.id);\n//     store.dispatch(action);\n//   }\n\n//   // Function to toggle like a vacation by id\n//   public async toggleLike(vacationId: number) {\n//     try {\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${store.getState().auth?.token}` },\n//         }\n//       );\n\n//       const updatedVacation = response.data;\n\n//       // Update the Redux store with the updated vacation\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n\n//       // Return the updated vacation\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // function to sort vacations in the Redux store\n//   private sortVacations() {\n//     const sortedVacations = [...store.getState().vacations].sort(\n//       (a, b) =>\n//         new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//     );\n//     const action = vacationActions.initVacations(sortedVacations);\n//     store.dispatch(action);\n//   }\n// }\n\n// export const vacationsService = new VacationsService();\n\nimport axios from \"axios\";\nimport { store, vacationActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\nclass VacationsService {\n  async addVacation(vacation) {\n    var _store$getState$auth;\n    const token = (_store$getState$auth = store.getState().auth) === null || _store$getState$auth === void 0 ? void 0 : _store$getState$auth.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n    const formData = new FormData();\n    formData.append(\"destination\", vacation.destination);\n    formData.append(\"description\", vacation.description);\n    formData.append(\"startDate\", vacation.startDate.toString());\n    formData.append(\"endDate\", vacation.endDate.toString());\n    formData.append(\"price\", vacation.price.toString());\n    if (vacation.imageName) {\n      formData.append(\"imageName\", vacation.imageName);\n    }\n    const options = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = await axios.post(appConfig.vacationsUrl, formData, options);\n    if (!store.getState().vacations) return;\n    const addedVacation = response.data;\n\n    // Dispatch the added vacation to the Redux store\n    const action = vacationActions.addVacation(addedVacation);\n    store.dispatch(action);\n\n    // Return sorted vacations after adding the new one\n    this.sortVacations();\n  }\n  sortVacations() {\n    const state = store.getState();\n    if (!state.vacations || state.vacations.length === 0) return;\n    const sortedVacations = [...state.vacations].sort((a, b) => new Date(a.startDate).getTime() - new Date(b.startDate).getTime());\n    const action = vacationActions.initVacations(sortedVacations);\n    store.dispatch(action);\n  }\n}\nexport const vacationsService = new VacationsService();","map":{"version":3,"names":["axios","store","vacationActions","appConfig","VacationsService","addVacation","vacation","_store$getState$auth","token","getState","auth","Error","formData","FormData","append","destination","description","startDate","toString","endDate","price","imageName","options","headers","Authorization","response","post","vacationsUrl","vacations","addedVacation","data","action","dispatch","sortVacations","state","length","sortedVacations","sort","a","b","Date","getTime","initVacations","vacationsService"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Services/VacationsService.ts"],"sourcesContent":["// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n\n//   public async getAllVacationsByUserId(userId: number) {\n//     const response = await axios.get<VacationModel[]>(\n//       appConfig.vacationsUrl + userId\n//     );\n\n//     const vacations = response.data;\n\n//     const action = vacationActions.initVacations(vacations);\n//     store.dispatch(action);\n\n//     return vacations;\n//   }\n\n//   public async addVacation(vacation: VacationModel) {\n//     const options: AxiosRequestConfig = {\n//       headers: { \"Content-Type\": \"multipart/form-data\" },\n//     };\n//     const response = await axios.post<VacationModel>(\n//       appConfig.vacationsUrl,\n//       vacation,\n//       options\n//     );\n//     if (!store.getState().vacations) return;\n//     const addedVacation = response.data;\n\n//     // Dispatch the added vacation to the Redux store\n//     const action = vacationActions.addVacation(addedVacation);\n//     store.dispatch(action);\n\n//     // Return sorted vacations after adding the new one\n//     this.sortVacations();\n//   }\n\n//   // Function to delete a vacation by id\n//   public async deleteVacation(vacationId: number) {\n//     const response = await axios.delete<VacationModel>(\n//       appConfig.vacationsUrl + vacationId\n//     );\n//     const deletedVacation = response.data;\n//     const action = vacationActions.deleteVacation(deletedVacation.id);\n//     store.dispatch(action);\n//   }\n\n//   // Function to toggle like a vacation by id\n//   public async toggleLike(vacationId: number) {\n//     try {\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${store.getState().auth?.token}` },\n//         }\n//       );\n\n//       const updatedVacation = response.data;\n\n//       // Update the Redux store with the updated vacation\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n\n//       // Return the updated vacation\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // function to sort vacations in the Redux store\n//   private sortVacations() {\n//     const sortedVacations = [...store.getState().vacations].sort(\n//       (a, b) =>\n//         new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//     );\n//     const action = vacationActions.initVacations(sortedVacations);\n//     store.dispatch(action);\n//   }\n// }\n\n// export const vacationsService = new VacationsService();\n\nimport axios, { AxiosRequestConfig } from \"axios\";\nimport { VacationModel } from \"../Models/VacationModel\";\nimport { store, vacationActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\n\nclass VacationsService {\n  public async addVacation(vacation: VacationModel) {\n    const token = store.getState().auth?.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n\n    const formData = new FormData();\n    formData.append(\"destination\", vacation.destination);\n    formData.append(\"description\", vacation.description);\n    formData.append(\"startDate\", vacation.startDate.toString());\n    formData.append(\"endDate\", vacation.endDate.toString());\n    formData.append(\"price\", vacation.price.toString());\n    if (vacation.imageName) {\n      formData.append(\"imageName\", vacation.imageName);\n    }\n\n    const options: AxiosRequestConfig = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    const response = await axios.post<VacationModel>(appConfig.vacationsUrl, formData, options);\n    if (!store.getState().vacations) return;\n    const addedVacation = response.data;\n\n    // Dispatch the added vacation to the Redux store\n    const action = vacationActions.addVacation(addedVacation);\n    store.dispatch(action);\n\n    // Return sorted vacations after adding the new one\n    this.sortVacations();\n  }\n\n  private sortVacations() {\n    const state = store.getState();\n    if (!state.vacations || state.vacations.length === 0) return;\n\n    const sortedVacations = [...state.vacations].sort(\n      (a, b) =>\n        new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n    );\n\n    const action = vacationActions.initVacations(sortedVacations);\n    store.dispatch(action);\n  }\n}\n\nexport const vacationsService = new VacationsService();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}