{"ast":null,"code":"import axios from \"axios\";\nimport { store, vacationActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\nclass VacationsService {\n  async getAllVacationsByUserId(userId) {\n    const response = await axios.get(appConfig.vacationsUrl + userId);\n    const vacations = response.data;\n    const action = vacationActions.initVacations(vacations);\n    store.dispatch(action);\n    return vacations;\n  }\n  async addVacation(vacation) {\n    const options = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    };\n    const response = await axios.post(appConfig.vacationsUrl, vacation, options);\n    if (!store.getState().vacations) return;\n    const addedVacation = response.data;\n\n    // Dispatch the added vacation to the Redux store\n    const action = vacationActions.addVacation(addedVacation);\n    store.dispatch(action);\n\n    // Return sorted vacations after adding the new one\n    this.sortVacations();\n  }\n\n  // Function to delete a vacation by id\n  async deleteVacation(vacationId) {\n    const response = await axios.delete(appConfig.vacationsUrl + vacationId);\n    const deletedVacation = response.data;\n    const action = vacationActions.deleteVacation(deletedVacation.id);\n    store.dispatch(action);\n  }\n\n  // Function to toggle like a vacation by id\n  async toggleLike(vacationId) {\n    try {\n      var _store$getState$auth;\n      const response = await axios.patch(`${appConfig.vacationsUrl}toggle-like/${vacationId}`, {}, {\n        headers: {\n          Authorization: `Bearer ${(_store$getState$auth = store.getState().auth) === null || _store$getState$auth === void 0 ? void 0 : _store$getState$auth.token}`\n        }\n      });\n      const updatedVacation = response.data;\n\n      // Update the Redux store with the updated vacation\n      const action = vacationActions.updateVacation(updatedVacation);\n      store.dispatch(action);\n\n      // Return the updated vacation\n      return updatedVacation;\n    } catch (error) {\n      console.error(\"Failed to toggle like:\", error);\n      throw error;\n    }\n  }\n\n  // function to sort vacations in the Redux store\n  sortVacations() {\n    const sortedVacations = [...store.getState().vacations].sort((a, b) => new Date(a.startDate).getTime() - new Date(b.startDate).getTime());\n    const action = vacationActions.initVacations(sortedVacations);\n    store.dispatch(action);\n  }\n}\nexport const vacationsService = new VacationsService();","map":{"version":3,"names":["axios","store","vacationActions","appConfig","VacationsService","getAllVacationsByUserId","userId","response","get","vacationsUrl","vacations","data","action","initVacations","dispatch","addVacation","vacation","options","headers","post","getState","addedVacation","sortVacations","deleteVacation","vacationId","delete","deletedVacation","id","toggleLike","_store$getState$auth","patch","Authorization","auth","token","updatedVacation","updateVacation","error","console","sortedVacations","sort","a","b","Date","startDate","getTime","vacationsService"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Services/VacationsService.ts"],"sourcesContent":["import axios, { AxiosRequestConfig } from \"axios\";\nimport { VacationModel } from \"../Models/VacationModel\";\nimport { store, vacationActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\n\nclass VacationsService {\n\n  public async getAllVacationsByUserId(userId: number) {\n    const response = await axios.get<VacationModel[]>(\n      appConfig.vacationsUrl + userId\n    );\n\n    const vacations = response.data;\n\n    const action = vacationActions.initVacations(vacations);\n    store.dispatch(action);\n\n    return vacations;\n  }\n\n  public async addVacation(vacation: VacationModel) {\n    const options: AxiosRequestConfig = {\n      headers: { \"Content-Type\": \"multipart/form-data\" },\n    };\n    const response = await axios.post<VacationModel>(\n      appConfig.vacationsUrl,\n      vacation,\n      options\n    );\n    if (!store.getState().vacations) return;\n    const addedVacation = response.data;\n\n    // Dispatch the added vacation to the Redux store\n    const action = vacationActions.addVacation(addedVacation);\n    store.dispatch(action);\n\n    // Return sorted vacations after adding the new one\n    this.sortVacations();\n  }\n\n  // Function to delete a vacation by id\n  public async deleteVacation(vacationId: number) {\n    const response = await axios.delete<VacationModel>(\n      appConfig.vacationsUrl + vacationId\n    );\n    const deletedVacation = response.data;\n    const action = vacationActions.deleteVacation(deletedVacation.id);\n    store.dispatch(action);\n  }\n\n  // Function to toggle like a vacation by id\n  public async toggleLike(vacationId: number) {\n    try {\n      const response = await axios.patch<VacationModel>(\n        `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n        {},\n        {\n          headers: { Authorization: `Bearer ${store.getState().auth?.token}` },\n        }\n      );\n\n      const updatedVacation = response.data;\n\n      // Update the Redux store with the updated vacation\n      const action = vacationActions.updateVacation(updatedVacation);\n      store.dispatch(action);\n\n      // Return the updated vacation\n      return updatedVacation;\n    } catch (error) {\n      console.error(\"Failed to toggle like:\", error);\n      throw error;\n    }\n  }\n\n  // function to sort vacations in the Redux store\n  private sortVacations() {\n    const sortedVacations = [...store.getState().vacations].sort(\n      (a, b) =>\n        new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n    );\n    const action = vacationActions.initVacations(sortedVacations);\n    store.dispatch(action);\n  }\n}\n\nexport const vacationsService = new VacationsService();"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}