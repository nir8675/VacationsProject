{"ast":null,"code":"// import axios from \"axios\";\n// import { jwtDecode } from \"jwt-decode\";\n// import { CredentialsModel } from \"../Models/CredentialsModel\";\n// import { UserModel } from \"../Models/UserModel\";\n// import { store, userActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class UserService {\n//   public constructor() {\n//     const token = localStorage.getItem(\"token\");\n//     if (!token) return;\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async register(user: UserModel) {\n//     // Send user to backend:\n//     const response = await axios.post<{ token: string; user: UserModel }>(\n//       appConfig.registerUrl,\n//       user\n//     );\n\n//     // Get token and user:\n//     const { token, user: dbUser } = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async login(credentials: CredentialsModel): Promise<UserModel> {\n//     // Send credentials to backend:\n//     const response = await axios.post<{ token: string; user: UserModel }>(\n//       appConfig.loginUrl,\n//       credentials\n//     );\n\n//     // Get token and user:\n//     const { token, user: dbUser } = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n\n//     // Return user object\n//     return dbUser;\n//   }\n\n//   public logout() {\n//     // Remove token from storage\n//     localStorage.removeItem(\"token\");\n\n//     // Remove token from Axios header\n//     delete axios.defaults.headers.common[\"Authorization\"];\n\n//     const action = userActions.logoutUser();\n//     store.dispatch(action);\n//   }\n// }\n\n// export const userService = new UserService();","map":{"version":3,"names":[],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Services/UserService.ts"],"sourcesContent":["// import axios from \"axios\";\n// import { jwtDecode } from \"jwt-decode\";\n// import { CredentialsModel } from \"../Models/CredentialsModel\";\n// import { UserModel } from \"../Models/UserModel\";\n// import { store, userActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class UserService {\n//   public constructor() {\n//     const token = localStorage.getItem(\"token\");\n//     if (!token) return;\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async register(user: UserModel) {\n//     // Send user to backend:\n//     const response = await axios.post<{ token: string; user: UserModel }>(\n//       appConfig.registerUrl,\n//       user\n//     );\n\n//     // Get token and user:\n//     const { token, user: dbUser } = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async login(credentials: CredentialsModel): Promise<UserModel> {\n//     // Send credentials to backend:\n//     const response = await axios.post<{ token: string; user: UserModel }>(\n//       appConfig.loginUrl,\n//       credentials\n//     );\n\n//     // Get token and user:\n//     const { token, user: dbUser } = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Set token in Axios header\n//     axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n\n//     // Return user object\n//     return dbUser;\n//   }\n\n//   public logout() {\n//     // Remove token from storage\n//     localStorage.removeItem(\"token\");\n\n//     // Remove token from Axios header\n//     delete axios.defaults.headers.common[\"Authorization\"];\n\n//     const action = userActions.logoutUser();\n//     store.dispatch(action);\n//   }\n// }\n\n// export const userService = new UserService();\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}