{"ast":null,"code":"// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n//   // Fetch vacations by user ID\n//   public async getAllVacationsByUserId(userId: number) {\n//     try {\n//       const response = await axios.get<VacationModel[]>(\n//         `${appConfig.vacationsUrl}${userId}`\n//       );\n//       const vacations = response.data;\n//       const action = vacationActions.initVacations(vacations);\n//       store.dispatch(action);\n//       return vacations;\n//     } catch (error) {\n//       console.error(\"Failed to fetch vacations:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Fetch vacation by ID\n//   public async getVacationById(id: number): Promise<VacationModel> {\n//     try {\n//       const response = await axios.get<VacationModel>(\n//         `${appConfig.vacationsUrl}${id}`\n//       );\n//       return response.data;\n//     } catch (error) {\n//       console.error(\"Failed to fetch vacation by ID:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Add a new vacation\n//   public async addVacation(vacation: VacationModel) {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     const options: AxiosRequestConfig = {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//         Authorization: `Bearer ${token}`,\n//       },\n//     };\n\n//     const formData = new FormData();\n//     formData.append(\"destination\", vacation.destination);\n//     formData.append(\"description\", vacation.description);\n//     formData.append(\"startDate\", vacation.startDate);\n//     formData.append(\"endDate\", vacation.endDate);\n//     formData.append(\"price\", vacation.price.toString());\n//     if (vacation.imageName) {\n//       formData.append(\"imageName\", vacation.imageName);\n//     }\n\n//     try {\n//       const response = await axios.post<VacationModel>(\n//         appConfig.vacationsUrl,\n//         formData,\n//         options\n//       );\n//       const addedVacation = response.data;\n\n//       // Dispatch the added vacation to the Redux store\n//       const action = vacationActions.addVacation(addedVacation);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to add vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Update an existing vacation\n//   public async updateVacation(id: number, formData: FormData): Promise<void> {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     const options: AxiosRequestConfig = {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//         Authorization: `Bearer ${token}`,\n//       },\n//     };\n\n//     try {\n//       const response = await axios.put<VacationModel>(\n//         `${appConfig.vacationsUrl}${id}`,\n//         formData,\n//         options\n//       );\n//       const updatedVacation = response.data;\n\n//       // Dispatch the updated vacation to the Redux store\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to update vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Delete a vacation\n//   public async deleteVacation(vacationId: number) {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     try {\n//       const response = await axios.delete<VacationModel>(\n//         `${appConfig.vacationsUrl}${vacationId}`,\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n//       const deletedVacation = response.data;\n//       const action = vacationActions.deleteVacation(deletedVacation.id);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to delete vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Toggle like on vacation\n//   public async toggleLike(vacationId: number) {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     try {\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n//       const updatedVacation = response.data;\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n// }\n\n// export const vacationsService = new VacationsService();","map":{"version":3,"names":[],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Services/VacationsService.ts"],"sourcesContent":["// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n//   // Fetch vacations by user ID\n//   public async getAllVacationsByUserId(userId: number) {\n//     try {\n//       const response = await axios.get<VacationModel[]>(\n//         `${appConfig.vacationsUrl}${userId}`\n//       );\n//       const vacations = response.data;\n//       const action = vacationActions.initVacations(vacations);\n//       store.dispatch(action);\n//       return vacations;\n//     } catch (error) {\n//       console.error(\"Failed to fetch vacations:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Fetch vacation by ID\n//   public async getVacationById(id: number): Promise<VacationModel> {\n//     try {\n//       const response = await axios.get<VacationModel>(\n//         `${appConfig.vacationsUrl}${id}`\n//       );\n//       return response.data;\n//     } catch (error) {\n//       console.error(\"Failed to fetch vacation by ID:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Add a new vacation\n//   public async addVacation(vacation: VacationModel) {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     const options: AxiosRequestConfig = {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//         Authorization: `Bearer ${token}`,\n//       },\n//     };\n\n//     const formData = new FormData();\n//     formData.append(\"destination\", vacation.destination);\n//     formData.append(\"description\", vacation.description);\n//     formData.append(\"startDate\", vacation.startDate);\n//     formData.append(\"endDate\", vacation.endDate);\n//     formData.append(\"price\", vacation.price.toString());\n//     if (vacation.imageName) {\n//       formData.append(\"imageName\", vacation.imageName);\n//     }\n\n//     try {\n//       const response = await axios.post<VacationModel>(\n//         appConfig.vacationsUrl,\n//         formData,\n//         options\n//       );\n//       const addedVacation = response.data;\n\n//       // Dispatch the added vacation to the Redux store\n//       const action = vacationActions.addVacation(addedVacation);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to add vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Update an existing vacation\n//   public async updateVacation(id: number, formData: FormData): Promise<void> {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     const options: AxiosRequestConfig = {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//         Authorization: `Bearer ${token}`,\n//       },\n//     };\n\n//     try {\n//       const response = await axios.put<VacationModel>(\n//         `${appConfig.vacationsUrl}${id}`,\n//         formData,\n//         options\n//       );\n//       const updatedVacation = response.data;\n\n//       // Dispatch the updated vacation to the Redux store\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to update vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Delete a vacation\n//   public async deleteVacation(vacationId: number) {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     try {\n//       const response = await axios.delete<VacationModel>(\n//         `${appConfig.vacationsUrl}${vacationId}`,\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n//       const deletedVacation = response.data;\n//       const action = vacationActions.deleteVacation(deletedVacation.id);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to delete vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Toggle like on vacation\n//   public async toggleLike(vacationId: number) {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     try {\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n//       const updatedVacation = response.data;\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n// }\n\n// export const vacationsService = new VacationsService();\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}