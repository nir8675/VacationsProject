{"ast":null,"code":"// import axios from \"axios\";\n// import { jwtDecode } from \"jwt-decode\"; // npm i jwt-decode\n// import { CredentialsModel } from \"../Models/CredentialsModel\";\n// import { UserModel } from \"../Models/UserModel\";\n// import { store, userActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class UserService {\n//   public constructor() {\n//     const token = localStorage.getItem(\"token\");\n//     if (!token) return;\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async register(user: UserModel) {\n//     // Send user to backend:\n//     const response = await axios.post<string>(appConfig.registerUrl, user);\n\n//     // Get token:\n//     const token = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Extract db user from token:\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async login(credentials: CredentialsModel) {\n//     // Send credentials to backend:\n//     const response = await axios.post<string>(appConfig.loginUrl, credentials);\n\n//     // Get token:\n//     const token = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Extract db user from token:\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public logout() {\n//     localStorage.removeItem(\"token\");\n//     const action = userActions.logoutUser();\n//     store.dispatch(action);\n//   }\n// }\n\n// export const userService = new UserService();\n\nimport axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { store, userActions, vacationActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\nimport { vacationsService } from \"./VacationsService\"; // Import vacationsService\n\nclass UserService {\n  constructor() {\n    const token = localStorage.getItem(\"token\");\n    if (!token) return;\n    const container = jwtDecode(token);\n    const dbUser = container.user;\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n  }\n  async register(user) {\n    // Send user to backend:\n    const response = await axios.post(appConfig.registerUrl, user);\n\n    // Get token:\n    const token = response.data;\n\n    // Save token to storage:\n    localStorage.setItem(\"token\", token);\n\n    // Extract db user from token:\n    const container = jwtDecode(token);\n    const dbUser = container.user;\n\n    // Send to redux:\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n  }\n  async login(credentials) {\n    // Send credentials to backend:\n    const response = await axios.post(appConfig.loginUrl, credentials);\n\n    // Get token:\n    const token = response.data;\n\n    // Save token to storage:\n    localStorage.setItem(\"token\", token);\n\n    // Extract db user from token:\n    const container = jwtDecode(token);\n    const dbUser = container.user;\n\n    // Send to redux:\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n\n    // Fetch vacations after login\n    const vacations = await vacationsService.getAllVacations();\n    store.dispatch(vacationActions.initVacations(vacations));\n  }\n  logout() {\n    localStorage.removeItem(\"token\");\n    const action = userActions.logoutUser();\n    store.dispatch(action);\n  }\n}\nexport const userService = new UserService();","map":{"version":3,"names":["axios","jwtDecode","store","userActions","vacationActions","appConfig","vacationsService","UserService","constructor","token","localStorage","getItem","container","dbUser","user","action","initUser","dispatch","register","response","post","registerUrl","data","setItem","login","credentials","loginUrl","vacations","getAllVacations","initVacations","logout","removeItem","logoutUser","userService"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Services/UserService.ts"],"sourcesContent":["// import axios from \"axios\";\n// import { jwtDecode } from \"jwt-decode\"; // npm i jwt-decode\n// import { CredentialsModel } from \"../Models/CredentialsModel\";\n// import { UserModel } from \"../Models/UserModel\";\n// import { store, userActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class UserService {\n//   public constructor() {\n//     const token = localStorage.getItem(\"token\");\n//     if (!token) return;\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async register(user: UserModel) {\n//     // Send user to backend:\n//     const response = await axios.post<string>(appConfig.registerUrl, user);\n\n//     // Get token:\n//     const token = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Extract db user from token:\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public async login(credentials: CredentialsModel) {\n//     // Send credentials to backend:\n//     const response = await axios.post<string>(appConfig.loginUrl, credentials);\n\n//     // Get token:\n//     const token = response.data;\n\n//     // Save token to storage:\n//     localStorage.setItem(\"token\", token);\n\n//     // Extract db user from token:\n//     const container = jwtDecode<{ user: UserModel }>(token);\n//     const dbUser = container.user;\n\n//     // Send to redux:\n//     const action = userActions.initUser(dbUser);\n//     store.dispatch(action);\n//   }\n\n//   public logout() {\n//     localStorage.removeItem(\"token\");\n//     const action = userActions.logoutUser();\n//     store.dispatch(action);\n//   }\n// }\n\n// export const userService = new UserService();\n\nimport axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { CredentialsModel } from \"../Models/CredentialsModel\";\nimport { UserModel } from \"../Models/UserModel\";\nimport { store, userActions, vacationActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\nimport { vacationsService } from \"./VacationsService\"; // Import vacationsService\n\nclass UserService {\n  public constructor() {\n    const token = localStorage.getItem(\"token\");\n    if (!token) return;\n    const container = jwtDecode<{ user: UserModel }>(token);\n    const dbUser = container.user;\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n  }\n\n  public async register(user: UserModel) {\n    // Send user to backend:\n    const response = await axios.post<string>(appConfig.registerUrl, user);\n\n    // Get token:\n    const token = response.data;\n\n    // Save token to storage:\n    localStorage.setItem(\"token\", token);\n\n    // Extract db user from token:\n    const container = jwtDecode<{ user: UserModel }>(token);\n    const dbUser = container.user;\n\n    // Send to redux:\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n  }\n\n  public async login(credentials: CredentialsModel) {\n    // Send credentials to backend:\n    const response = await axios.post<string>(appConfig.loginUrl, credentials);\n\n    // Get token:\n    const token = response.data;\n\n    // Save token to storage:\n    localStorage.setItem(\"token\", token);\n\n    // Extract db user from token:\n    const container = jwtDecode<{ user: UserModel }>(token);\n    const dbUser = container.user;\n\n    // Send to redux:\n    const action = userActions.initUser(dbUser);\n    store.dispatch(action);\n\n    // Fetch vacations after login\n    const vacations = await vacationsService.getAllVacations();\n    store.dispatch(vacationActions.initVacations(vacations));\n  }\n\n  public logout() {\n    localStorage.removeItem(\"token\");\n    const action = userActions.logoutUser();\n    store.dispatch(action);\n  }\n}\n\nexport const userService = new UserService();\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY;AAGtC,SAASC,KAAK,EAAEC,WAAW,EAAEC,eAAe,QAAQ,gBAAgB;AACpE,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,gBAAgB,QAAQ,oBAAoB,CAAC,CAAC;;AAEvD,MAAMC,WAAW,CAAC;EACTC,WAAWA,CAAA,EAAG;IACnB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;IACZ,MAAMG,SAAS,GAAGX,SAAS,CAAsBQ,KAAK,CAAC;IACvD,MAAMI,MAAM,GAAGD,SAAS,CAACE,IAAI;IAC7B,MAAMC,MAAM,GAAGZ,WAAW,CAACa,QAAQ,CAACH,MAAM,CAAC;IAC3CX,KAAK,CAACe,QAAQ,CAACF,MAAM,CAAC;EACxB;EAEA,MAAaG,QAAQA,CAACJ,IAAe,EAAE;IACrC;IACA,MAAMK,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAASf,SAAS,CAACgB,WAAW,EAAEP,IAAI,CAAC;;IAEtE;IACA,MAAML,KAAK,GAAGU,QAAQ,CAACG,IAAI;;IAE3B;IACAZ,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEd,KAAK,CAAC;;IAEpC;IACA,MAAMG,SAAS,GAAGX,SAAS,CAAsBQ,KAAK,CAAC;IACvD,MAAMI,MAAM,GAAGD,SAAS,CAACE,IAAI;;IAE7B;IACA,MAAMC,MAAM,GAAGZ,WAAW,CAACa,QAAQ,CAACH,MAAM,CAAC;IAC3CX,KAAK,CAACe,QAAQ,CAACF,MAAM,CAAC;EACxB;EAEA,MAAaS,KAAKA,CAACC,WAA6B,EAAE;IAChD;IACA,MAAMN,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAASf,SAAS,CAACqB,QAAQ,EAAED,WAAW,CAAC;;IAE1E;IACA,MAAMhB,KAAK,GAAGU,QAAQ,CAACG,IAAI;;IAE3B;IACAZ,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEd,KAAK,CAAC;;IAEpC;IACA,MAAMG,SAAS,GAAGX,SAAS,CAAsBQ,KAAK,CAAC;IACvD,MAAMI,MAAM,GAAGD,SAAS,CAACE,IAAI;;IAE7B;IACA,MAAMC,MAAM,GAAGZ,WAAW,CAACa,QAAQ,CAACH,MAAM,CAAC;IAC3CX,KAAK,CAACe,QAAQ,CAACF,MAAM,CAAC;;IAEtB;IACA,MAAMY,SAAS,GAAG,MAAMrB,gBAAgB,CAACsB,eAAe,CAAC,CAAC;IAC1D1B,KAAK,CAACe,QAAQ,CAACb,eAAe,CAACyB,aAAa,CAACF,SAAS,CAAC,CAAC;EAC1D;EAEOG,MAAMA,CAAA,EAAG;IACdpB,YAAY,CAACqB,UAAU,CAAC,OAAO,CAAC;IAChC,MAAMhB,MAAM,GAAGZ,WAAW,CAAC6B,UAAU,CAAC,CAAC;IACvC9B,KAAK,CAACe,QAAQ,CAACF,MAAM,CAAC;EACxB;AACF;AAEA,OAAO,MAAMkB,WAAW,GAAG,IAAI1B,WAAW,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}