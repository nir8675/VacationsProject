{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Downloads\\\\02092024ProjectVacation\\\\Frontend\\\\src\\\\Components\\\\VacationArea\\\\VacationList\\\\VacationList.tsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { AppState } from \"../../../Redux/store\";\n// import { VacationModel } from \"../../../Models/VacationModel\";\n// import { vacationActions } from \"../../../Redux/store\";\n// import { vacationsService } from \"../../../Services/VacationsService\";\n// import { VacationCards } from \"../VacationCards/VacationCards\";\n// import { Role } from \"../../../Models/enums\";\n// import \"./VacationList.css\";\n\n// export function VacationList(): JSX.Element {\n//   const [vacations, setVacations] = useState<VacationModel[]>([]);\n//   const [currentPage, setCurrentPage] = useState<number>(1);\n//   const itemsPerPage = 9;\n//   const dispatch = useDispatch();\n\n//   // Retrieve the token and roleId from Redux state\n//   const token = useSelector((state: AppState) => state.auth.token);\n//   const roleId = useSelector((state: AppState) => state.user.roleId); // Select roleId from state\n//   console.log(\"roleId VacationList:\", roleId); // RoleID VacationList\n\n//   // Determine if the user is an admin based on roleId\n//   const isAdmin = roleId === Role.Admin;\n//   console.log(\"isAdmin VacationList:\", isAdmin);\n\n//   const userId = useSelector<AppState, number>((state) => state.user.id);\n\n//   useEffect(() => {\n//     if (!token) {\n//       console.warn(\"User is not logged in.\");\n//       return;\n//     }\n\n//     vacationsService\n//       .getAllVacationsByUserId(userId)\n//       .then((vacations) => {\n//         if (vacations.length > 0) {\n//           setVacations(vacations);\n//           const action = vacationActions.initVacations(vacations);\n//           dispatch(action);\n//         } else {\n//           console.warn(\"No vacations were fetched from the API.\");\n//         }\n//       })\n//       .catch((err) => {\n//         alert(err.message);\n//       });\n//   }, [token, dispatch, userId]);\n\n//   const indexOfLastItem = currentPage * itemsPerPage;\n//   const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n//   const currentVacations = vacations.slice(indexOfFirstItem, indexOfLastItem);\n\n//   const nextPage = () => {\n//     if (currentPage < Math.ceil(vacations.length / itemsPerPage)) {\n//       setCurrentPage(currentPage + 1);\n//     }\n//   };\n\n//   const prevPage = () => {\n//     if (currentPage > 1) {\n//       setCurrentPage(currentPage - 1);\n//     }\n//   };\n\n//   return (\n//     <div className=\"VacationList\">\n//       <div className=\"vacation-cards-container\">\n//         {currentVacations.length > 0 ? (\n//           currentVacations.map((vacation) => (\n//             <VacationCards\n//               key={vacation.id}\n//               vacation={vacation}\n//               isAdmin={isAdmin} // Pass isAdmin based on roleId\n//               onToggleLike={() => {}}\n//             />\n//           ))\n//         ) : (\n//           <p>No vacations available</p>\n//         )}\n//       </div>\n\n//       <div className=\"pagination\">\n//         <button onClick={prevPage} disabled={currentPage === 1}>\n//           Previous\n//         </button>\n//         <span>Page {currentPage}</span>\n//         <button\n//           onClick={nextPage}\n//           disabled={currentPage === Math.ceil(vacations.length / itemsPerPage)}\n//         >\n//           Next\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { vacationActions } from \"../../../Redux/store\";\nimport { vacationsService } from \"../../../Services/VacationsService\";\nimport { VacationCards } from \"../VacationCards/VacationCards\";\nimport { Role } from \"../../../Models/enums\";\nimport \"./VacationList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function VacationList() {\n  _s();\n  const [vacations, setVacations] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 9;\n  const dispatch = useDispatch();\n\n  // Retrieve the token and roleId from Redux state\n  const token = useSelector(state => state.auth.token);\n  const roleId = useSelector(state => state.user.roleId); // Select roleId from state\n\n  // Convert roleId to a number and check if the user is an admin\n  const isAdmin = Number(roleId) === Role.Admin;\n  const userId = useSelector(state => state.user.id); // Select userId from state\n\n  // Fetch vacations based on the userId\n  useEffect(() => {\n    if (!token) {\n      console.warn(\"User is not logged in.\");\n      return;\n    }\n    vacationsService.getAllVacationsByUserId(userId).then(vacations => {\n      if (vacations.length > 0) {\n        setVacations(vacations);\n        const action = vacationActions.initVacations(vacations);\n        dispatch(action);\n      } else {\n        console.warn(\"No vacations were fetched from the API.\");\n      }\n    }).catch(err => {\n      alert(err.message);\n    });\n  }, [token, dispatch, userId]);\n\n  // Pagination logic\n  const indexOfLastItem = currentPage * itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n  const currentVacations = vacations.slice(indexOfFirstItem, indexOfLastItem);\n\n  // Go to the next page\n  const nextPage = () => {\n    if (currentPage < Math.ceil(vacations.length / itemsPerPage)) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  // Go to the previous page\n  const prevPage = () => {\n    if (currentPage > 1) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"VacationList\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"vacation-cards-container\",\n      children: currentVacations.length > 0 ? currentVacations.map(vacation => /*#__PURE__*/_jsxDEV(VacationCards, {\n        vacation: vacation,\n        isAdmin: isAdmin // Pass isAdmin based on roleId\n        ,\n        onToggleLike: () => {\n          console.log(\"Like toggle function called\");\n          // Add your toggle like logic here if needed\n        }\n      }, vacation.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No vacations available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: prevPage,\n        disabled: currentPage === 1,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Page \", currentPage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextPage,\n        disabled: currentPage === Math.ceil(vacations.length / itemsPerPage),\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n}\n_s(VacationList, \"nGCBCZkPAUCyJ5uxY+zFCho6wm0=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = VacationList;\nvar _c;\n$RefreshReg$(_c, \"VacationList\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","vacationActions","vacationsService","VacationCards","Role","jsxDEV","_jsxDEV","VacationList","_s","vacations","setVacations","currentPage","setCurrentPage","itemsPerPage","dispatch","token","state","auth","roleId","user","isAdmin","Number","Admin","userId","id","console","warn","getAllVacationsByUserId","then","length","action","initVacations","catch","err","alert","message","indexOfLastItem","indexOfFirstItem","currentVacations","slice","nextPage","Math","ceil","prevPage","className","children","map","vacation","onToggleLike","log","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Components/VacationArea/VacationList/VacationList.tsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { AppState } from \"../../../Redux/store\";\n// import { VacationModel } from \"../../../Models/VacationModel\";\n// import { vacationActions } from \"../../../Redux/store\";\n// import { vacationsService } from \"../../../Services/VacationsService\";\n// import { VacationCards } from \"../VacationCards/VacationCards\";\n// import { Role } from \"../../../Models/enums\";\n// import \"./VacationList.css\";\n\n// export function VacationList(): JSX.Element {\n//   const [vacations, setVacations] = useState<VacationModel[]>([]);\n//   const [currentPage, setCurrentPage] = useState<number>(1);\n//   const itemsPerPage = 9;\n//   const dispatch = useDispatch();\n\n//   // Retrieve the token and roleId from Redux state\n//   const token = useSelector((state: AppState) => state.auth.token);\n//   const roleId = useSelector((state: AppState) => state.user.roleId); // Select roleId from state\n//   console.log(\"roleId VacationList:\", roleId); // RoleID VacationList\n\n//   // Determine if the user is an admin based on roleId\n//   const isAdmin = roleId === Role.Admin;\n//   console.log(\"isAdmin VacationList:\", isAdmin);\n\n//   const userId = useSelector<AppState, number>((state) => state.user.id);\n\n//   useEffect(() => {\n//     if (!token) {\n//       console.warn(\"User is not logged in.\");\n//       return;\n//     }\n\n//     vacationsService\n//       .getAllVacationsByUserId(userId)\n//       .then((vacations) => {\n//         if (vacations.length > 0) {\n//           setVacations(vacations);\n//           const action = vacationActions.initVacations(vacations);\n//           dispatch(action);\n//         } else {\n//           console.warn(\"No vacations were fetched from the API.\");\n//         }\n//       })\n//       .catch((err) => {\n//         alert(err.message);\n//       });\n//   }, [token, dispatch, userId]);\n\n//   const indexOfLastItem = currentPage * itemsPerPage;\n//   const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n//   const currentVacations = vacations.slice(indexOfFirstItem, indexOfLastItem);\n\n//   const nextPage = () => {\n//     if (currentPage < Math.ceil(vacations.length / itemsPerPage)) {\n//       setCurrentPage(currentPage + 1);\n//     }\n//   };\n\n//   const prevPage = () => {\n//     if (currentPage > 1) {\n//       setCurrentPage(currentPage - 1);\n//     }\n//   };\n\n//   return (\n//     <div className=\"VacationList\">\n//       <div className=\"vacation-cards-container\">\n//         {currentVacations.length > 0 ? (\n//           currentVacations.map((vacation) => (\n//             <VacationCards\n//               key={vacation.id}\n//               vacation={vacation}\n//               isAdmin={isAdmin} // Pass isAdmin based on roleId\n//               onToggleLike={() => {}}\n//             />\n//           ))\n//         ) : (\n//           <p>No vacations available</p>\n//         )}\n//       </div>\n\n//       <div className=\"pagination\">\n//         <button onClick={prevPage} disabled={currentPage === 1}>\n//           Previous\n//         </button>\n//         <span>Page {currentPage}</span>\n//         <button\n//           onClick={nextPage}\n//           disabled={currentPage === Math.ceil(vacations.length / itemsPerPage)}\n//         >\n//           Next\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppState } from \"../../../Redux/store\";\nimport { VacationModel } from \"../../../Models/VacationModel\";\nimport { vacationActions } from \"../../../Redux/store\";\nimport { vacationsService } from \"../../../Services/VacationsService\";\nimport { VacationCards } from \"../VacationCards/VacationCards\";\nimport { Role } from \"../../../Models/enums\";\nimport \"./VacationList.css\";\n\nexport function VacationList(): JSX.Element {\n  const [vacations, setVacations] = useState<VacationModel[]>([]);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const itemsPerPage = 9;\n  const dispatch = useDispatch();\n\n  // Retrieve the token and roleId from Redux state\n  const token = useSelector((state: AppState) => state.auth.token);\n  const roleId = useSelector((state: AppState) => state.user.roleId); // Select roleId from state\n\n  // Convert roleId to a number and check if the user is an admin\n  const isAdmin = Number(roleId) === Role.Admin;\n\n  const userId = useSelector<AppState, number>((state) => state.user.id); // Select userId from state\n\n  // Fetch vacations based on the userId\n  useEffect(() => {\n    if (!token) {\n      console.warn(\"User is not logged in.\");\n      return;\n    }\n\n    vacationsService\n      .getAllVacationsByUserId(userId)\n      .then((vacations) => {\n        if (vacations.length > 0) {\n          setVacations(vacations);\n          const action = vacationActions.initVacations(vacations);\n          dispatch(action);\n        } else {\n          console.warn(\"No vacations were fetched from the API.\");\n        }\n      })\n      .catch((err) => {\n        alert(err.message);\n      });\n  }, [token, dispatch, userId]);\n\n  // Pagination logic\n  const indexOfLastItem = currentPage * itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n  const currentVacations = vacations.slice(indexOfFirstItem, indexOfLastItem);\n\n  // Go to the next page\n  const nextPage = () => {\n    if (currentPage < Math.ceil(vacations.length / itemsPerPage)) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  // Go to the previous page\n  const prevPage = () => {\n    if (currentPage > 1) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  return (\n    <div className=\"VacationList\">\n      <div className=\"vacation-cards-container\">\n        {currentVacations.length > 0 ? (\n          currentVacations.map((vacation) => (\n            <VacationCards\n              key={vacation.id}\n              vacation={vacation}\n              isAdmin={isAdmin} // Pass isAdmin based on roleId\n              onToggleLike={() => {\n                console.log(\"Like toggle function called\");\n                // Add your toggle like logic here if needed\n              }}\n            />\n          ))\n        ) : (\n          <p>No vacations available</p>\n        )}\n      </div>\n\n      {/* Pagination controls */}\n      <div className=\"pagination\">\n        <button onClick={prevPage} disabled={currentPage === 1}>\n          Previous\n        </button>\n        <span>Page {currentPage}</span>\n        <button\n          onClick={nextPage}\n          disabled={currentPage === Math.ceil(vacations.length / itemsPerPage)}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}