{"ast":null,"code":"import axios from \"axios\";\nimport { store, vacationActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\nclass VacationsService {\n  async getAllVacations() {\n    // If vacations are already in the Redux store, return them to avoid unnecessary API calls\n    if (store.getState().vacations) return store.getState().vacations;\n    const response = await axios.get(appConfig.vacationsUrl);\n    const vacations = response.data;\n    const action = vacationActions.initVacations(vacations);\n    dis;\n    return vacations;\n  }\n  async addVacation(vacation) {\n    const options = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    };\n    const response = await axios.post(appConfig.vacationsUrl, vacation, options);\n    if (!store.getState().vacations) return;\n    const addedVacation = response.data;\n\n    // Dispatch the added vacation to the Redux store\n    const action = vacationActions.addVacation(addedVacation);\n    store.dispatch(action);\n\n    // Return sorted vacations after adding the new one\n    this.sortVacations();\n  }\n\n  // Function to delete a vacation by id\n  async deleteVacation(vacationId) {\n    const response = await axios.delete(appConfig.vacationsUrl + vacationId);\n    const deletedVacation = response.data;\n    const action = vacationActions.deleteVacation(deletedVacation.id);\n    store.dispatch(action);\n  }\n\n  // Function to toggle like a vacation by id\n  async toggleLike(vacationId) {\n    try {\n      var _store$getState$auth;\n      const response = await axios.patch(`${appConfig.vacationsUrl}toggle-like/${vacationId}`, {}, {\n        headers: {\n          Authorization: `Bearer ${(_store$getState$auth = store.getState().auth) === null || _store$getState$auth === void 0 ? void 0 : _store$getState$auth.token}`\n        }\n      });\n      const updatedVacation = response.data;\n\n      // Update the Redux store with the updated vacation\n      const action = vacationActions.updateVacation(updatedVacation);\n      store.dispatch(action);\n\n      // Return the updated vacation\n      return updatedVacation;\n    } catch (error) {\n      console.error(\"Failed to toggle like:\", error);\n      throw error;\n    }\n  }\n\n  // function to sort vacations in the Redux store\n  sortVacations() {\n    const sortedVacations = [...store.getState().vacations].sort((a, b) => new Date(a.startDate).getTime() - new Date(b.startDate).getTime());\n    const action = vacationActions.initVacations(sortedVacations);\n    store.dispatch(action);\n  }\n}\nexport const vacationsService = new VacationsService();\n\n// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n//   // Function to get all vacations\n//   public async getAllVacations(): Promise<VacationModel[]> {\n//     try {\n//       // Retrieve the current state\n//       const state = store.getState();\n\n//       // If vacations are already in the Redux store, return them to avoid unnecessary API calls\n//       if (state.vacations && state.vacations.length > 0) {\n//         return state.vacations;\n//       }\n\n//       // Retrieve token from Redux store\n//       const token = state.auth?.token;\n//       if (!token) {\n//         console.warn(\"Token is not available.\");\n//         throw new Error(\"Unauthorized access. Please log in.\");\n//       }\n\n//       console.log(\"Token before request:\", token); // Debugging token\n\n//       const response = await axios.get<VacationModel[]>(\n//         appConfig.vacationsUrl,\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n\n//       const vacations = response.data;\n\n//       // Sort vacations by start date in ascending order\n//       vacations.sort(\n//         (a, b) =>\n//           new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//       );\n\n//       const action = vacationActions.initVacations(vacations);\n//       store.dispatch(action);\n\n//       return vacations;\n//     } catch (error) {\n//       console.error(\"Failed to fetch vacations:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Function to add a vacation\n//   public async addVacation(vacation: VacationModel): Promise<void> {\n//     try {\n//       const token = store.getState().auth?.token;\n//       if (!token) {\n//         console.warn(\"Token is not available.\");\n//         throw new Error(\"Unauthorized access. Please log in.\");\n//       }\n\n//       const options: AxiosRequestConfig = {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//           Authorization: `Bearer ${token}`,\n//         },\n//       };\n\n//       const response = await axios.post<VacationModel>(\n//         appConfig.vacationsUrl,\n//         vacation,\n//         options\n//       );\n\n//       const addedVacation = response.data;\n\n//       // Dispatch the added vacation to the Redux store\n//       const action = vacationActions.addVacation(addedVacation);\n//       store.dispatch(action);\n\n//       // Fetch all vacations again to ensure the list is up-to-date\n//       await this.getAllVacations();\n//     } catch (error) {\n//       console.error(\"Failed to add vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Function to delete a vacation by id\n//   public async deleteVacation(vacationId: number): Promise<void> {\n//     try {\n//       const token = store.getState().auth?.token;\n//       if (!token) {\n//         console.warn(\"Token is not available.\");\n//         throw new Error(\"Unauthorized access. Please log in.\");\n//       }\n\n//       await axios.delete<VacationModel>(\n//         `${appConfig.vacationsUrl}${vacationId}`,\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n\n//       const action = vacationActions.deleteVacation(vacationId);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to delete vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Function to toggle like a vacation by id\n//   public async toggleLike(vacationId: number): Promise<VacationModel> {\n//     try {\n//       const token = store.getState().auth?.token;\n//       if (!token) {\n//         console.warn(\"Token is not available.\");\n//         throw new Error(\"Unauthorized access. Please log in.\");\n//       }\n\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n\n//       const updatedVacation = response.data;\n\n//       // Update the Redux store with the updated vacation\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Function to sort vacations in the Redux store\n//   private sortVacations(): void {\n//     const state = store.getState();\n//     if (!state.vacations || state.vacations.length === 0) return;\n\n//     const sortedVacations = [...state.vacations].sort(\n//       (a, b) =>\n//         new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//     );\n\n//     const action = vacationActions.initVacations(sortedVacations);\n//     store.dispatch(action);\n//   }\n// }\n\n// export const vacationsService = new VacationsService();","map":{"version":3,"names":["axios","store","vacationActions","appConfig","VacationsService","getAllVacations","getState","vacations","response","get","vacationsUrl","data","action","initVacations","dis","addVacation","vacation","options","headers","post","addedVacation","dispatch","sortVacations","deleteVacation","vacationId","delete","deletedVacation","id","toggleLike","_store$getState$auth","patch","Authorization","auth","token","updatedVacation","updateVacation","error","console","sortedVacations","sort","a","b","Date","startDate","getTime","vacationsService"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Services/VacationsService.ts"],"sourcesContent":["import axios, { AxiosRequestConfig } from \"axios\";\nimport { VacationModel } from \"../Models/VacationModel\";\nimport { store, vacationActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\n\nclass VacationsService {\n  public async getAllVacations() {\n    // If vacations are already in the Redux store, return them to avoid unnecessary API calls\n    if (store.getState().vacations) return store.getState().vacations;\n    const response = await axios.get<VacationModel[]>(appConfig.vacationsUrl);\n    const vacations = response.data;\n\n    const action = vacationActions.initVacations(vacations);\n    dis\n    return vacations;\n  }\n\n  public async addVacation(vacation: VacationModel) {\n    const options: AxiosRequestConfig = {\n      headers: { \"Content-Type\": \"multipart/form-data\" },\n    };\n    const response = await axios.post<VacationModel>(\n      appConfig.vacationsUrl,\n      vacation,\n      options\n    );\n    if (!store.getState().vacations) return;\n    const addedVacation = response.data;\n\n    // Dispatch the added vacation to the Redux store\n    const action = vacationActions.addVacation(addedVacation);\n    store.dispatch(action);\n\n    // Return sorted vacations after adding the new one\n    this.sortVacations();\n  }\n\n  // Function to delete a vacation by id\n  public async deleteVacation(vacationId: number) {\n    const response = await axios.delete<VacationModel>(\n      appConfig.vacationsUrl + vacationId\n    );\n    const deletedVacation = response.data;\n    const action = vacationActions.deleteVacation(deletedVacation.id);\n    store.dispatch(action);\n  }\n\n  // Function to toggle like a vacation by id\n  public async toggleLike(vacationId: number) {\n    try {\n      const response = await axios.patch<VacationModel>(\n        `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n        {},\n        {\n          headers: { Authorization: `Bearer ${store.getState().auth?.token}` },\n        }\n      );\n\n      const updatedVacation = response.data;\n\n      // Update the Redux store with the updated vacation\n      const action = vacationActions.updateVacation(updatedVacation);\n      store.dispatch(action);\n\n      // Return the updated vacation\n      return updatedVacation;\n    } catch (error) {\n      console.error(\"Failed to toggle like:\", error);\n      throw error;\n    }\n  }\n\n  // function to sort vacations in the Redux store\n  private sortVacations() {\n    const sortedVacations = [...store.getState().vacations].sort(\n      (a, b) =>\n        new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n    );\n    const action = vacationActions.initVacations(sortedVacations);\n    store.dispatch(action);\n  }\n}\n\nexport const vacationsService = new VacationsService();\n\n// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n//   // Function to get all vacations\n//   public async getAllVacations(): Promise<VacationModel[]> {\n//     try {\n//       // Retrieve the current state\n//       const state = store.getState();\n\n//       // If vacations are already in the Redux store, return them to avoid unnecessary API calls\n//       if (state.vacations && state.vacations.length > 0) {\n//         return state.vacations;\n//       }\n\n//       // Retrieve token from Redux store\n//       const token = state.auth?.token;\n//       if (!token) {\n//         console.warn(\"Token is not available.\");\n//         throw new Error(\"Unauthorized access. Please log in.\");\n//       }\n\n//       console.log(\"Token before request:\", token); // Debugging token\n\n//       const response = await axios.get<VacationModel[]>(\n//         appConfig.vacationsUrl,\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n\n//       const vacations = response.data;\n\n//       // Sort vacations by start date in ascending order\n//       vacations.sort(\n//         (a, b) =>\n//           new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//       );\n\n//       const action = vacationActions.initVacations(vacations);\n//       store.dispatch(action);\n\n//       return vacations;\n//     } catch (error) {\n//       console.error(\"Failed to fetch vacations:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Function to add a vacation\n//   public async addVacation(vacation: VacationModel): Promise<void> {\n//     try {\n//       const token = store.getState().auth?.token;\n//       if (!token) {\n//         console.warn(\"Token is not available.\");\n//         throw new Error(\"Unauthorized access. Please log in.\");\n//       }\n\n//       const options: AxiosRequestConfig = {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//           Authorization: `Bearer ${token}`,\n//         },\n//       };\n\n//       const response = await axios.post<VacationModel>(\n//         appConfig.vacationsUrl,\n//         vacation,\n//         options\n//       );\n\n//       const addedVacation = response.data;\n\n//       // Dispatch the added vacation to the Redux store\n//       const action = vacationActions.addVacation(addedVacation);\n//       store.dispatch(action);\n\n//       // Fetch all vacations again to ensure the list is up-to-date\n//       await this.getAllVacations();\n//     } catch (error) {\n//       console.error(\"Failed to add vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Function to delete a vacation by id\n//   public async deleteVacation(vacationId: number): Promise<void> {\n//     try {\n//       const token = store.getState().auth?.token;\n//       if (!token) {\n//         console.warn(\"Token is not available.\");\n//         throw new Error(\"Unauthorized access. Please log in.\");\n//       }\n\n//       await axios.delete<VacationModel>(\n//         `${appConfig.vacationsUrl}${vacationId}`,\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n\n//       const action = vacationActions.deleteVacation(vacationId);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to delete vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Function to toggle like a vacation by id\n//   public async toggleLike(vacationId: number): Promise<VacationModel> {\n//     try {\n//       const token = store.getState().auth?.token;\n//       if (!token) {\n//         console.warn(\"Token is not available.\");\n//         throw new Error(\"Unauthorized access. Please log in.\");\n//       }\n\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n\n//       const updatedVacation = response.data;\n\n//       // Update the Redux store with the updated vacation\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Function to sort vacations in the Redux store\n//   private sortVacations(): void {\n//     const state = store.getState();\n//     if (!state.vacations || state.vacations.length === 0) return;\n\n//     const sortedVacations = [...state.vacations].sort(\n//       (a, b) =>\n//         new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n//     );\n\n//     const action = vacationActions.initVacations(sortedVacations);\n//     store.dispatch(action);\n//   }\n// }\n\n// export const vacationsService = new VacationsService();\n"],"mappings":"AAAA,OAAOA,KAAK,MAA8B,OAAO;AAEjD,SAASC,KAAK,EAAEC,eAAe,QAAQ,gBAAgB;AACvD,SAASC,SAAS,QAAQ,oBAAoB;AAE9C,MAAMC,gBAAgB,CAAC;EACrB,MAAaC,eAAeA,CAAA,EAAG;IAC7B;IACA,IAAIJ,KAAK,CAACK,QAAQ,CAAC,CAAC,CAACC,SAAS,EAAE,OAAON,KAAK,CAACK,QAAQ,CAAC,CAAC,CAACC,SAAS;IACjE,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAkBN,SAAS,CAACO,YAAY,CAAC;IACzE,MAAMH,SAAS,GAAGC,QAAQ,CAACG,IAAI;IAE/B,MAAMC,MAAM,GAAGV,eAAe,CAACW,aAAa,CAACN,SAAS,CAAC;IACvDO,GAAG;IACH,OAAOP,SAAS;EAClB;EAEA,MAAaQ,WAAWA,CAACC,QAAuB,EAAE;IAChD,MAAMC,OAA2B,GAAG;MAClCC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAsB;IACnD,CAAC;IACD,MAAMV,QAAQ,GAAG,MAAMR,KAAK,CAACmB,IAAI,CAC/BhB,SAAS,CAACO,YAAY,EACtBM,QAAQ,EACRC,OACF,CAAC;IACD,IAAI,CAAChB,KAAK,CAACK,QAAQ,CAAC,CAAC,CAACC,SAAS,EAAE;IACjC,MAAMa,aAAa,GAAGZ,QAAQ,CAACG,IAAI;;IAEnC;IACA,MAAMC,MAAM,GAAGV,eAAe,CAACa,WAAW,CAACK,aAAa,CAAC;IACzDnB,KAAK,CAACoB,QAAQ,CAACT,MAAM,CAAC;;IAEtB;IACA,IAAI,CAACU,aAAa,CAAC,CAAC;EACtB;;EAEA;EACA,MAAaC,cAAcA,CAACC,UAAkB,EAAE;IAC9C,MAAMhB,QAAQ,GAAG,MAAMR,KAAK,CAACyB,MAAM,CACjCtB,SAAS,CAACO,YAAY,GAAGc,UAC3B,CAAC;IACD,MAAME,eAAe,GAAGlB,QAAQ,CAACG,IAAI;IACrC,MAAMC,MAAM,GAAGV,eAAe,CAACqB,cAAc,CAACG,eAAe,CAACC,EAAE,CAAC;IACjE1B,KAAK,CAACoB,QAAQ,CAACT,MAAM,CAAC;EACxB;;EAEA;EACA,MAAagB,UAAUA,CAACJ,UAAkB,EAAE;IAC1C,IAAI;MAAA,IAAAK,oBAAA;MACF,MAAMrB,QAAQ,GAAG,MAAMR,KAAK,CAAC8B,KAAK,CAC/B,GAAE3B,SAAS,CAACO,YAAa,eAAcc,UAAW,EAAC,EACpD,CAAC,CAAC,EACF;QACEN,OAAO,EAAE;UAAEa,aAAa,EAAG,UAAO,CAAAF,oBAAA,GAAE5B,KAAK,CAACK,QAAQ,CAAC,CAAC,CAAC0B,IAAI,cAAAH,oBAAA,uBAArBA,oBAAA,CAAuBI,KAAM;QAAE;MACrE,CACF,CAAC;MAED,MAAMC,eAAe,GAAG1B,QAAQ,CAACG,IAAI;;MAErC;MACA,MAAMC,MAAM,GAAGV,eAAe,CAACiC,cAAc,CAACD,eAAe,CAAC;MAC9DjC,KAAK,CAACoB,QAAQ,CAACT,MAAM,CAAC;;MAEtB;MACA,OAAOsB,eAAe;IACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF;;EAEA;EACQd,aAAaA,CAAA,EAAG;IACtB,MAAMgB,eAAe,GAAG,CAAC,GAAGrC,KAAK,CAACK,QAAQ,CAAC,CAAC,CAACC,SAAS,CAAC,CAACgC,IAAI,CAC1D,CAACC,CAAC,EAAEC,CAAC,KACH,IAAIC,IAAI,CAACF,CAAC,CAACG,SAAS,CAAC,CAACC,OAAO,CAAC,CAAC,GAAG,IAAIF,IAAI,CAACD,CAAC,CAACE,SAAS,CAAC,CAACC,OAAO,CAAC,CACpE,CAAC;IACD,MAAMhC,MAAM,GAAGV,eAAe,CAACW,aAAa,CAACyB,eAAe,CAAC;IAC7DrC,KAAK,CAACoB,QAAQ,CAACT,MAAM,CAAC;EACxB;AACF;AAEA,OAAO,MAAMiC,gBAAgB,GAAG,IAAIzC,gBAAgB,CAAC,CAAC;;AAEt},"metadata":{},"sourceType":"module","externalDependencies":[]}