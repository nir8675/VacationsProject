{"ast":null,"code":"// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n\n//   public async getAllVacationsByUserId(userId: number) {\n//     const response = await axios.get<VacationModel[]>(\n//       appConfig.vacationsUrl + userId\n//     );\n\n//     const vacations = response.data;\n\n//     const action = vacationActions.initVacations(vacations);\n//     store.dispatch(action);\n\n//     return vacations;\n//   }\n\n//   public async addVacation(vacation: VacationModel) {\n//     const options: AxiosRequestConfig = {\n//       headers: { \"Content-Type\": \"multipart/form-data\" },\n//     };\n//     const response = await axios.post<VacationModel>(\n//       appConfig.vacationsUrl,\n//       vacation,\n//       options\n//     );\n//     if (!store.getState().vacations) return;\n//     const addedVacation = response.data;\n\n//     // Dispatch the added vacation to the Redux store\n//     const action = vacationActions.addVacation(addedVacation);\n//     store.dispatch(action);\n\n//     // Return sorted vacations after adding the new one\n//     this.sortVacations();\n//   }\n\n//   // Function to delete a vacation by id\n//   public async deleteVacation(vacationId: number) {\n//     const response = await axios.delete<VacationModel>(\n//       appConfig.vacationsUrl + vacationId\n//     );\n//     const deletedVacation = response.data;\n//     const action = vacationActions.deleteVacation(deletedVacation.id);\n//     store.dispatch(action);\n//   }\n\n//   // Function to toggle like a vacation by id\n//   public async toggleLike(vacationId: number) {\n//     try {\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${store.getState().auth?.token}` },\n//         }\n//       );\n\n//       const updatedVacation = response.data;\n\n//       // Update the Redux store with the updated vacation\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n\n//       // Return the updated vacation\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n// }\n\n// export const vacationsService = new VacationsService();\n\nimport axios from \"axios\";\nimport { store, vacationActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\nclass VacationsService {\n  async getAllVacationsByUserId(userId) {\n    try {\n      const response = await axios.get(`${appConfig.vacationsUrl}${userId}`);\n      const vacations = response.data;\n\n      // Dispatch the fetched vacations to the Redux store\n      const action = vacationActions.initVacations(vacations);\n      store.dispatch(action);\n      return vacations;\n    } catch (error) {\n      console.error(\"Failed to fetch vacations:\", error);\n      throw error;\n    }\n  }\n  async addVacation(vacation) {\n    var _store$getState$auth;\n    const token = (_store$getState$auth = store.getState().auth) === null || _store$getState$auth === void 0 ? void 0 : _store$getState$auth.token;\n    console.log(\"Token:\", token); // לוג הטוקן לבדיקה\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n    const options = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    };\n    try {\n      const response = await axios.post(appConfig.vacationsUrl, vacation, options);\n      const addedVacation = response.data;\n\n      // Dispatch the added vacation to the Redux store\n      const action = vacationActions.addVacation(addedVacation);\n      store.dispatch(action);\n    } catch (error) {\n      console.error(\"Failed to add vacation:\", error);\n      throw error;\n    }\n  }\n  async deleteVacation(vacationId) {\n    var _store$getState$auth2;\n    const token = (_store$getState$auth2 = store.getState().auth) === null || _store$getState$auth2 === void 0 ? void 0 : _store$getState$auth2.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n    try {\n      const response = await axios.delete(`${appConfig.vacationsUrl}${vacationId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const deletedVacation = response.data;\n\n      // Dispatch the deleted vacation ID to the Redux store\n      const action = vacationActions.deleteVacation(deletedVacation.id);\n      store.dispatch(action);\n    } catch (error) {\n      console.error(\"Failed to delete vacation:\", error);\n      throw error;\n    }\n  }\n  async toggleLike(vacationId) {\n    var _store$getState$auth3;\n    const token = (_store$getState$auth3 = store.getState().auth) === null || _store$getState$auth3 === void 0 ? void 0 : _store$getState$auth3.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n    try {\n      const response = await axios.patch(`${appConfig.vacationsUrl}toggle-like/${vacationId}`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const updatedVacation = response.data;\n\n      // Update the Redux store with the updated vacation\n      const action = vacationActions.updateVacation(updatedVacation);\n      store.dispatch(action);\n      return updatedVacation;\n    } catch (error) {\n      console.error(\"Failed to toggle like:\", error);\n      throw error;\n    }\n  }\n}\nexport const vacationsService = new VacationsService();","map":{"version":3,"names":["axios","store","vacationActions","appConfig","VacationsService","getAllVacationsByUserId","userId","response","get","vacationsUrl","vacations","data","action","initVacations","dispatch","error","console","addVacation","vacation","_store$getState$auth","token","getState","auth","log","Error","options","headers","Authorization","post","addedVacation","deleteVacation","vacationId","_store$getState$auth2","delete","deletedVacation","id","toggleLike","_store$getState$auth3","patch","updatedVacation","updateVacation","vacationsService"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Services/VacationsService.ts"],"sourcesContent":["// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n\n//   public async getAllVacationsByUserId(userId: number) {\n//     const response = await axios.get<VacationModel[]>(\n//       appConfig.vacationsUrl + userId\n//     );\n\n//     const vacations = response.data;\n\n//     const action = vacationActions.initVacations(vacations);\n//     store.dispatch(action);\n\n//     return vacations;\n//   }\n\n//   public async addVacation(vacation: VacationModel) {\n//     const options: AxiosRequestConfig = {\n//       headers: { \"Content-Type\": \"multipart/form-data\" },\n//     };\n//     const response = await axios.post<VacationModel>(\n//       appConfig.vacationsUrl,\n//       vacation,\n//       options\n//     );\n//     if (!store.getState().vacations) return;\n//     const addedVacation = response.data;\n\n//     // Dispatch the added vacation to the Redux store\n//     const action = vacationActions.addVacation(addedVacation);\n//     store.dispatch(action);\n\n//     // Return sorted vacations after adding the new one\n//     this.sortVacations();\n//   }\n\n//   // Function to delete a vacation by id\n//   public async deleteVacation(vacationId: number) {\n//     const response = await axios.delete<VacationModel>(\n//       appConfig.vacationsUrl + vacationId\n//     );\n//     const deletedVacation = response.data;\n//     const action = vacationActions.deleteVacation(deletedVacation.id);\n//     store.dispatch(action);\n//   }\n\n//   // Function to toggle like a vacation by id\n//   public async toggleLike(vacationId: number) {\n//     try {\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${store.getState().auth?.token}` },\n//         }\n//       );\n\n//       const updatedVacation = response.data;\n\n//       // Update the Redux store with the updated vacation\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n\n//       // Return the updated vacation\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n// }\n\n// export const vacationsService = new VacationsService();\n\nimport axios, { AxiosRequestConfig } from \"axios\";\nimport { VacationModel } from \"../Models/VacationModel\";\nimport { store, vacationActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\n\nclass VacationsService {\n  public async getAllVacationsByUserId(userId: number) {\n    try {\n      const response = await axios.get<VacationModel[]>(\n        `${appConfig.vacationsUrl}${userId}`\n      );\n      const vacations = response.data;\n\n      // Dispatch the fetched vacations to the Redux store\n      const action = vacationActions.initVacations(vacations);\n      store.dispatch(action);\n\n      return vacations;\n    } catch (error) {\n      console.error(\"Failed to fetch vacations:\", error);\n      throw error;\n    }\n  }\n\n  public async addVacation(vacation: VacationModel) {\n    const token = store.getState().auth?.token;\n    console.log(\"Token:\", token);  // לוג הטוקן לבדיקה\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n\n    const options: AxiosRequestConfig = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    try {\n      const response = await axios.post<VacationModel>(\n        appConfig.vacationsUrl,\n        vacation,\n        options\n      );\n      const addedVacation = response.data;\n\n      // Dispatch the added vacation to the Redux store\n      const action = vacationActions.addVacation(addedVacation);\n      store.dispatch(action);\n    } catch (error) {\n      console.error(\"Failed to add vacation:\", error);\n      throw error;\n    }\n  }\n\n  public async deleteVacation(vacationId: number) {\n    const token = store.getState().auth?.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n\n    try {\n      const response = await axios.delete<VacationModel>(\n        `${appConfig.vacationsUrl}${vacationId}`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      const deletedVacation = response.data;\n\n      // Dispatch the deleted vacation ID to the Redux store\n      const action = vacationActions.deleteVacation(deletedVacation.id);\n      store.dispatch(action);\n    } catch (error) {\n      console.error(\"Failed to delete vacation:\", error);\n      throw error;\n    }\n  }\n\n  public async toggleLike(vacationId: number) {\n    const token = store.getState().auth?.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n\n    try {\n      const response = await axios.patch<VacationModel>(\n        `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n        {},\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      const updatedVacation = response.data;\n\n      // Update the Redux store with the updated vacation\n      const action = vacationActions.updateVacation(updatedVacation);\n      store.dispatch(action);\n\n      return updatedVacation;\n    } catch (error) {\n      console.error(\"Failed to toggle like:\", error);\n      throw error;\n    }\n  }\n}\n\nexport const vacationsService = new VacationsService();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}