{"ast":null,"code":"// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n//   // Fetch vacations by user ID\n//   public async getAllVacationsByUserId(userId: number) {\n//     try {\n//       const response = await axios.get<VacationModel[]>(\n//         `${appConfig.vacationsUrl}${userId}`\n//       );\n//       const vacations = response.data;\n//       const action = vacationActions.initVacations(vacations);\n//       store.dispatch(action);\n//       return vacations;\n//     } catch (error) {\n//       console.error(\"Failed to fetch vacations:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Fetch vacation by ID\n//   public async getVacationById(id: number): Promise<VacationModel> {\n//     try {\n//       const response = await axios.get<VacationModel>(\n//         `${appConfig.vacationsUrl}${id}`\n//       );\n//       return response.data;\n//     } catch (error) {\n//       console.error(\"Failed to fetch vacation by ID:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Add a new vacation\n//   public async addVacation(vacation: VacationModel) {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     const options: AxiosRequestConfig = {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//         Authorization: `Bearer ${token}`,\n//       },\n//     };\n\n//     const formData = new FormData();\n//     formData.append(\"destination\", vacation.destination);\n//     formData.append(\"description\", vacation.description);\n//     formData.append(\"startDate\", vacation.startDate);\n//     formData.append(\"endDate\", vacation.endDate);\n//     formData.append(\"price\", vacation.price.toString());\n//     if (vacation.imageName) {\n//       formData.append(\"imageName\", vacation.imageName);\n//     }\n\n//     try {\n//       const response = await axios.post<VacationModel>(\n//         appConfig.vacationsUrl,\n//         formData,\n//         options\n//       );\n//       const addedVacation = response.data;\n\n//       // Dispatch the added vacation to the Redux store\n//       const action = vacationActions.addVacation(addedVacation);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to add vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Update an existing vacation\n//   public async updateVacation(id: number, formData: FormData): Promise<void> {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     const options: AxiosRequestConfig = {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//         Authorization: `Bearer ${token}`,\n//       },\n//     };\n\n//     try {\n//       const response = await axios.put<VacationModel>(\n//         `${appConfig.vacationsUrl}${id}`,\n//         formData,\n//         options\n//       );\n//       const updatedVacation = response.data;\n\n//       // Dispatch the updated vacation to the Redux store\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to update vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Delete a vacation\n//   public async deleteVacation(vacationId: number) {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     try {\n//       const response = await axios.delete<VacationModel>(\n//         `${appConfig.vacationsUrl}${vacationId}`,\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n//       const deletedVacation = response.data;\n//       const action = vacationActions.deleteVacation(deletedVacation.id);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to delete vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Toggle like on vacation\n//   public async toggleLike(vacationId: number) {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     try {\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n//       const updatedVacation = response.data;\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n// }\n\n// export const vacationsService = new VacationsService();\n\nimport axios from \"axios\";\nimport { store, vacationActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\nclass VacationsService {\n  // Fetch vacations by user ID\n  async getAllVacationsByUserId(userId) {\n    try {\n      const response = await axios.get(`${appConfig.vacationsUrl}${userId}`);\n      const vacations = response.data;\n      const action = vacationActions.initVacations(vacations);\n      store.dispatch(action);\n      return vacations;\n    } catch (error) {\n      console.error(\"Failed to fetch vacations:\", error);\n      throw error;\n    }\n  }\n\n  // Add a new vacation\n  async addVacation(vacation) {\n    var _store$getState$auth;\n    const token = (_store$getState$auth = store.getState().auth) === null || _store$getState$auth === void 0 ? void 0 : _store$getState$auth.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n    const options = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const formData = new FormData();\n    formData.append(\"destination\", vacation.destination);\n    formData.append(\"description\", vacation.description);\n    formData.append(\"startDate\", vacation.startDate);\n    formData.append(\"endDate\", vacation.endDate);\n    formData.append(\"price\", vacation.price.toString());\n    if (vacation.imageName) {\n      formData.append(\"imageName\", vacation.imageName);\n    }\n    try {\n      const response = await axios.post(appConfig.vacationsUrl, formData, options);\n      const addedVacation = response.data;\n\n      // Dispatch the added vacation to the Redux store\n      const action = vacationActions.addVacation(addedVacation);\n      store.dispatch(action);\n    } catch (error) {\n      console.error(\"Failed to add vacation:\", error);\n      throw error;\n    }\n  }\n\n  // Delete a vacation\n  async deleteVacation(vacationId) {\n    var _store$getState$auth2;\n    const token = (_store$getState$auth2 = store.getState().auth) === null || _store$getState$auth2 === void 0 ? void 0 : _store$getState$auth2.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n    try {\n      const response = await axios.delete(`${appConfig.vacationsUrl}${vacationId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const deletedVacation = response.data;\n      const action = vacationActions.deleteVacation(deletedVacation.id);\n      store.dispatch(action);\n    } catch (error) {\n      console.error(\"Failed to delete vacation:\", error);\n      throw error;\n    }\n  }\n  // הוספת toggleLike\n  async toggleLike(vacationId) {\n    var _store$getState$auth3;\n    const token = (_store$getState$auth3 = store.getState().auth) === null || _store$getState$auth3 === void 0 ? void 0 : _store$getState$auth3.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n    try {\n      const response = await axios.patch(`${appConfig.vacationsUrl}/toggle-like/${vacationId}`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const updatedVacation = response.data;\n      store.dispatch(vacationActions.updateVacation(updatedVacation));\n      return updatedVacation;\n    } catch (error) {\n      console.error(\"Failed to toggle like:\", error);\n      throw error;\n    }\n  }\n}\nexport const vacationsService = new VacationsService();","map":{"version":3,"names":["axios","store","vacationActions","appConfig","VacationsService","getAllVacationsByUserId","userId","response","get","vacationsUrl","vacations","data","action","initVacations","dispatch","error","console","addVacation","vacation","_store$getState$auth","token","getState","auth","Error","options","headers","Authorization","formData","FormData","append","destination","description","startDate","endDate","price","toString","imageName","post","addedVacation","deleteVacation","vacationId","_store$getState$auth2","delete","deletedVacation","id","toggleLike","_store$getState$auth3","patch","updatedVacation","updateVacation","vacationsService"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Services/VacationsService.ts"],"sourcesContent":["// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n//   // Fetch vacations by user ID\n//   public async getAllVacationsByUserId(userId: number) {\n//     try {\n//       const response = await axios.get<VacationModel[]>(\n//         `${appConfig.vacationsUrl}${userId}`\n//       );\n//       const vacations = response.data;\n//       const action = vacationActions.initVacations(vacations);\n//       store.dispatch(action);\n//       return vacations;\n//     } catch (error) {\n//       console.error(\"Failed to fetch vacations:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Fetch vacation by ID\n//   public async getVacationById(id: number): Promise<VacationModel> {\n//     try {\n//       const response = await axios.get<VacationModel>(\n//         `${appConfig.vacationsUrl}${id}`\n//       );\n//       return response.data;\n//     } catch (error) {\n//       console.error(\"Failed to fetch vacation by ID:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Add a new vacation\n//   public async addVacation(vacation: VacationModel) {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     const options: AxiosRequestConfig = {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//         Authorization: `Bearer ${token}`,\n//       },\n//     };\n\n//     const formData = new FormData();\n//     formData.append(\"destination\", vacation.destination);\n//     formData.append(\"description\", vacation.description);\n//     formData.append(\"startDate\", vacation.startDate);\n//     formData.append(\"endDate\", vacation.endDate);\n//     formData.append(\"price\", vacation.price.toString());\n//     if (vacation.imageName) {\n//       formData.append(\"imageName\", vacation.imageName);\n//     }\n\n//     try {\n//       const response = await axios.post<VacationModel>(\n//         appConfig.vacationsUrl,\n//         formData,\n//         options\n//       );\n//       const addedVacation = response.data;\n\n//       // Dispatch the added vacation to the Redux store\n//       const action = vacationActions.addVacation(addedVacation);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to add vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Update an existing vacation\n//   public async updateVacation(id: number, formData: FormData): Promise<void> {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     const options: AxiosRequestConfig = {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//         Authorization: `Bearer ${token}`,\n//       },\n//     };\n\n//     try {\n//       const response = await axios.put<VacationModel>(\n//         `${appConfig.vacationsUrl}${id}`,\n//         formData,\n//         options\n//       );\n//       const updatedVacation = response.data;\n\n//       // Dispatch the updated vacation to the Redux store\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to update vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Delete a vacation\n//   public async deleteVacation(vacationId: number) {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     try {\n//       const response = await axios.delete<VacationModel>(\n//         `${appConfig.vacationsUrl}${vacationId}`,\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n//       const deletedVacation = response.data;\n//       const action = vacationActions.deleteVacation(deletedVacation.id);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to delete vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Toggle like on vacation\n//   public async toggleLike(vacationId: number) {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     try {\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n//       const updatedVacation = response.data;\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n// }\n\n// export const vacationsService = new VacationsService();\n\nimport axios, { AxiosRequestConfig } from \"axios\";\nimport { VacationModel } from \"../Models/VacationModel\";\nimport { store, vacationActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\n\nclass VacationsService {\n  // Fetch vacations by user ID\n  public async getAllVacationsByUserId(userId: number) {\n    try {\n      const response = await axios.get<VacationModel[]>(\n        `${appConfig.vacationsUrl}${userId}`\n      );\n      const vacations = response.data;\n      const action = vacationActions.initVacations(vacations);\n      store.dispatch(action);\n      return vacations;\n    } catch (error) {\n      console.error(\"Failed to fetch vacations:\", error);\n      throw error;\n    }\n  }\n\n  // Add a new vacation\n  public async addVacation(vacation: VacationModel) {\n    const token = store.getState().auth?.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n\n    const options: AxiosRequestConfig = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    const formData = new FormData();\n    formData.append(\"destination\", vacation.destination);\n    formData.append(\"description\", vacation.description);\n    formData.append(\"startDate\", vacation.startDate);\n    formData.append(\"endDate\", vacation.endDate);\n    formData.append(\"price\", vacation.price.toString());\n    if (vacation.imageName) {\n      formData.append(\"imageName\", vacation.imageName);\n    }\n\n    try {\n      const response = await axios.post<VacationModel>(\n        appConfig.vacationsUrl,\n        formData,\n        options\n      );\n      const addedVacation = response.data;\n\n      // Dispatch the added vacation to the Redux store\n      const action = vacationActions.addVacation(addedVacation);\n      store.dispatch(action);\n    } catch (error) {\n      console.error(\"Failed to add vacation:\", error);\n      throw error;\n    }\n  }\n\n  // Delete a vacation\n  public async deleteVacation(vacationId: number) {\n    const token = store.getState().auth?.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n\n    try {\n      const response = await axios.delete<VacationModel>(\n        `${appConfig.vacationsUrl}${vacationId}`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      const deletedVacation = response.data;\n      const action = vacationActions.deleteVacation(deletedVacation.id);\n      store.dispatch(action);\n    } catch (error) {\n      console.error(\"Failed to delete vacation:\", error);\n      throw error;\n    }\n  }\n  // הוספת toggleLike\n  public async toggleLike(vacationId: number) {\n    const token = store.getState().auth?.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n\n    try {\n      const response = await axios.patch<VacationModel>(\n        `${appConfig.vacationsUrl}/toggle-like/${vacationId}`,\n        {},\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      const updatedVacation = response.data;\n      store.dispatch(vacationActions.updateVacation(updatedVacation));\n      return updatedVacation;\n    } catch (error) {\n      console.error(\"Failed to toggle like:\", error);\n      throw error;\n    }\n  }\n}\n\nexport const vacationsService = new VacationsService();\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}