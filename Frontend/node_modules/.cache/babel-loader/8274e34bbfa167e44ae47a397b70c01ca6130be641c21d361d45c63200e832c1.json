{"ast":null,"code":"// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n//   // Fetch vacations by user ID\n//   public async getAllVacationsByUserId(userId: number) {\n//     try {\n//       const response = await axios.get<VacationModel[]>(\n//         `${appConfig.vacationsUrl}${userId}`\n//       );\n//       const vacations = response.data;\n//       const action = vacationActions.initVacations(vacations);\n//       store.dispatch(action);\n//       return vacations;\n//     } catch (error) {\n//       console.error(\"Failed to fetch vacations:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Fetch vacation by ID\n//   public async getVacationById(id: number): Promise<VacationModel> {\n//     try {\n//       const response = await axios.get<VacationModel>(\n//         `${appConfig.vacationsUrl}${id}`\n//       );\n//       return response.data;\n//     } catch (error) {\n//       console.error(\"Failed to fetch vacation by ID:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Add a new vacation\n//   public async addVacation(vacation: VacationModel) {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     const options: AxiosRequestConfig = {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//         Authorization: `Bearer ${token}`,\n//       },\n//     };\n\n//     const formData = new FormData();\n//     formData.append(\"destination\", vacation.destination);\n//     formData.append(\"description\", vacation.description);\n//     formData.append(\"startDate\", vacation.startDate);\n//     formData.append(\"endDate\", vacation.endDate);\n//     formData.append(\"price\", vacation.price.toString());\n//     if (vacation.imageName) {\n//       formData.append(\"imageName\", vacation.imageName);\n//     }\n\n//     try {\n//       const response = await axios.post<VacationModel>(\n//         appConfig.vacationsUrl,\n//         formData,\n//         options\n//       );\n//       const addedVacation = response.data;\n\n//       // Dispatch the added vacation to the Redux store\n//       const action = vacationActions.addVacation(addedVacation);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to add vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Update an existing vacation\n//   public async updateVacation(id: number, formData: FormData): Promise<void> {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     const options: AxiosRequestConfig = {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//         Authorization: `Bearer ${token}`,\n//       },\n//     };\n\n//     try {\n//       const response = await axios.put<VacationModel>(\n//         `${appConfig.vacationsUrl}${id}`,\n//         formData,\n//         options\n//       );\n//       const updatedVacation = response.data;\n\n//       // Dispatch the updated vacation to the Redux store\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to update vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Delete a vacation\n//   public async deleteVacation(vacationId: number) {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     try {\n//       const response = await axios.delete<VacationModel>(\n//         `${appConfig.vacationsUrl}${vacationId}`,\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n//       const deletedVacation = response.data;\n//       const action = vacationActions.deleteVacation(deletedVacation.id);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to delete vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Toggle like on vacation\n//   public async toggleLike(vacationId: number) {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     try {\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n//       const updatedVacation = response.data;\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n// }\n\n// export const vacationsService = new VacationsService();\n\nimport axios from \"axios\";\nimport { store, vacationActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\nclass VacationsService {\n  // Fetch vacation by ID\n  async getVacationById(vacationId) {\n    var _store$getState$auth;\n    const token = (_store$getState$auth = store.getState().auth) === null || _store$getState$auth === void 0 ? void 0 : _store$getState$auth.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n    try {\n      const response = await axios.get(`${appConfig.vacationsUrl}/${vacationId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Failed to fetch vacation by ID:\", error);\n      throw error;\n    }\n  }\n\n  // Add a new vacation\n  async addVacation(vacation) {\n    var _store$getState$auth2;\n    const token = (_store$getState$auth2 = store.getState().auth) === null || _store$getState$auth2 === void 0 ? void 0 : _store$getState$auth2.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n    const formData = new FormData();\n    formData.append(\"destination\", vacation.destination);\n    formData.append(\"description\", vacation.description);\n    formData.append(\"startDate\", vacation.startDate);\n    formData.append(\"endDate\", vacation.endDate);\n    formData.append(\"price\", vacation.price.toString());\n    if (vacation.imageName) {\n      formData.append(\"imageName\", vacation.imageName);\n    }\n    try {\n      const response = await axios.post(appConfig.vacationsUrl, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const addedVacation = response.data;\n\n      // Dispatch the added vacation to the Redux store\n      const action = vacationActions.addVacation(addedVacation);\n      store.dispatch(action);\n      return addedVacation;\n    } catch (error) {\n      console.error(\"Failed to add vacation:\", error);\n      throw error;\n    }\n  }\n\n  // Update an existing vacation\n  async updateVacation(vacationId, formData) {\n    var _store$getState$auth3;\n    const token = (_store$getState$auth3 = store.getState().auth) === null || _store$getState$auth3 === void 0 ? void 0 : _store$getState$auth3.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n    try {\n      const response = await axios.put(`${appConfig.vacationsUrl}/${vacationId}`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const updatedVacation = response.data;\n\n      // Dispatch the updated vacation to the Redux store\n      store.dispatch(vacationActions.updateVacation(updatedVacation));\n      return updatedVacation;\n    } catch (error) {\n      console.error(\"Failed to update vacation:\", error);\n      throw error;\n    }\n  }\n\n  // Delete a vacation\n  async deleteVacation(vacationId) {\n    var _store$getState$auth4;\n    const token = (_store$getState$auth4 = store.getState().auth) === null || _store$getState$auth4 === void 0 ? void 0 : _store$getState$auth4.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n    try {\n      await axios.delete(`${appConfig.vacationsUrl}/${vacationId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      store.dispatch(vacationActions.deleteVacation(vacationId));\n    } catch (error) {\n      console.error(\"Failed to delete vacation:\", error);\n      throw error;\n    }\n  }\n\n  // Toggle like on vacation\n  async toggleLike(vacationId) {\n    var _store$getState$auth5;\n    const token = (_store$getState$auth5 = store.getState().auth) === null || _store$getState$auth5 === void 0 ? void 0 : _store$getState$auth5.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n    try {\n      const response = await axios.patch(`${appConfig.vacationsUrl}/toggle-like/${vacationId}`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const updatedVacation = response.data;\n\n      // Dispatch the updated vacation to the Redux store\n      store.dispatch(vacationActions.updateVacation(updatedVacation));\n      return updatedVacation;\n    } catch (error) {\n      console.error(\"Failed to toggle like:\", error);\n      throw error;\n    }\n  }\n}\nexport const vacationsService = new VacationsService();","map":{"version":3,"names":["axios","store","vacationActions","appConfig","VacationsService","getVacationById","vacationId","_store$getState$auth","token","getState","auth","Error","response","get","vacationsUrl","headers","Authorization","data","error","console","addVacation","vacation","_store$getState$auth2","formData","FormData","append","destination","description","startDate","endDate","price","toString","imageName","post","addedVacation","action","dispatch","updateVacation","_store$getState$auth3","put","updatedVacation","deleteVacation","_store$getState$auth4","delete","toggleLike","_store$getState$auth5","patch","vacationsService"],"sources":["C:/Users/USER/Downloads/02092024ProjectVacation/Frontend/src/Services/VacationsService.ts"],"sourcesContent":["// import axios, { AxiosRequestConfig } from \"axios\";\n// import { VacationModel } from \"../Models/VacationModel\";\n// import { store, vacationActions } from \"../Redux/store\";\n// import { appConfig } from \"../Utils/AppConfig\";\n\n// class VacationsService {\n//   // Fetch vacations by user ID\n//   public async getAllVacationsByUserId(userId: number) {\n//     try {\n//       const response = await axios.get<VacationModel[]>(\n//         `${appConfig.vacationsUrl}${userId}`\n//       );\n//       const vacations = response.data;\n//       const action = vacationActions.initVacations(vacations);\n//       store.dispatch(action);\n//       return vacations;\n//     } catch (error) {\n//       console.error(\"Failed to fetch vacations:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Fetch vacation by ID\n//   public async getVacationById(id: number): Promise<VacationModel> {\n//     try {\n//       const response = await axios.get<VacationModel>(\n//         `${appConfig.vacationsUrl}${id}`\n//       );\n//       return response.data;\n//     } catch (error) {\n//       console.error(\"Failed to fetch vacation by ID:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Add a new vacation\n//   public async addVacation(vacation: VacationModel) {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     const options: AxiosRequestConfig = {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//         Authorization: `Bearer ${token}`,\n//       },\n//     };\n\n//     const formData = new FormData();\n//     formData.append(\"destination\", vacation.destination);\n//     formData.append(\"description\", vacation.description);\n//     formData.append(\"startDate\", vacation.startDate);\n//     formData.append(\"endDate\", vacation.endDate);\n//     formData.append(\"price\", vacation.price.toString());\n//     if (vacation.imageName) {\n//       formData.append(\"imageName\", vacation.imageName);\n//     }\n\n//     try {\n//       const response = await axios.post<VacationModel>(\n//         appConfig.vacationsUrl,\n//         formData,\n//         options\n//       );\n//       const addedVacation = response.data;\n\n//       // Dispatch the added vacation to the Redux store\n//       const action = vacationActions.addVacation(addedVacation);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to add vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Update an existing vacation\n//   public async updateVacation(id: number, formData: FormData): Promise<void> {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     const options: AxiosRequestConfig = {\n//       headers: {\n//         \"Content-Type\": \"multipart/form-data\",\n//         Authorization: `Bearer ${token}`,\n//       },\n//     };\n\n//     try {\n//       const response = await axios.put<VacationModel>(\n//         `${appConfig.vacationsUrl}${id}`,\n//         formData,\n//         options\n//       );\n//       const updatedVacation = response.data;\n\n//       // Dispatch the updated vacation to the Redux store\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to update vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Delete a vacation\n//   public async deleteVacation(vacationId: number) {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     try {\n//       const response = await axios.delete<VacationModel>(\n//         `${appConfig.vacationsUrl}${vacationId}`,\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n//       const deletedVacation = response.data;\n//       const action = vacationActions.deleteVacation(deletedVacation.id);\n//       store.dispatch(action);\n//     } catch (error) {\n//       console.error(\"Failed to delete vacation:\", error);\n//       throw error;\n//     }\n//   }\n\n//   // Toggle like on vacation\n//   public async toggleLike(vacationId: number) {\n//     const token = store.getState().auth?.token;\n//     if (!token) {\n//       throw new Error(\"Unauthorized access. Please log in.\");\n//     }\n\n//     try {\n//       const response = await axios.patch<VacationModel>(\n//         `${appConfig.vacationsUrl}toggle-like/${vacationId}`,\n//         {},\n//         {\n//           headers: { Authorization: `Bearer ${token}` },\n//         }\n//       );\n//       const updatedVacation = response.data;\n//       const action = vacationActions.updateVacation(updatedVacation);\n//       store.dispatch(action);\n//       return updatedVacation;\n//     } catch (error) {\n//       console.error(\"Failed to toggle like:\", error);\n//       throw error;\n//     }\n//   }\n// }\n\n// export const vacationsService = new VacationsService();\n\nimport axios, { AxiosRequestConfig } from \"axios\";\nimport { VacationModel } from \"../Models/VacationModel\";\nimport { store, vacationActions } from \"../Redux/store\";\nimport { appConfig } from \"../Utils/AppConfig\";\n\nclass VacationsService {\n  \n  // Fetch vacation by ID\n  public async getVacationById(vacationId: number): Promise<VacationModel> {\n    const token = store.getState().auth?.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n\n    try {\n      const response = await axios.get<VacationModel>(\n        `${appConfig.vacationsUrl}/${vacationId}`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      return response.data;\n    } catch (error) {\n      console.error(\"Failed to fetch vacation by ID:\", error);\n      throw error;\n    }\n  }\n\n  // Add a new vacation\n  public async addVacation(vacation: VacationModel): Promise<VacationModel> {\n    const token = store.getState().auth?.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n\n    const formData = new FormData();\n    formData.append(\"destination\", vacation.destination);\n    formData.append(\"description\", vacation.description);\n    formData.append(\"startDate\", vacation.startDate);\n    formData.append(\"endDate\", vacation.endDate);\n    formData.append(\"price\", vacation.price.toString());\n    if (vacation.imageName) {\n      formData.append(\"imageName\", vacation.imageName);\n    }\n\n    try {\n      const response = await axios.post<VacationModel>(\n        appConfig.vacationsUrl,\n        formData,\n        {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n      const addedVacation = response.data;\n\n      // Dispatch the added vacation to the Redux store\n      const action = vacationActions.addVacation(addedVacation);\n      store.dispatch(action);\n\n      return addedVacation;\n    } catch (error) {\n      console.error(\"Failed to add vacation:\", error);\n      throw error;\n    }\n  }\n\n  // Update an existing vacation\n  public async updateVacation(vacationId: number, formData: FormData): Promise<VacationModel> {\n    const token = store.getState().auth?.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n\n    try {\n      const response = await axios.put<VacationModel>(\n        `${appConfig.vacationsUrl}/${vacationId}`,\n        formData,\n        {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n      const updatedVacation = response.data;\n\n      // Dispatch the updated vacation to the Redux store\n      store.dispatch(vacationActions.updateVacation(updatedVacation));\n      return updatedVacation;\n    } catch (error) {\n      console.error(\"Failed to update vacation:\", error);\n      throw error;\n    }\n  }\n\n  // Delete a vacation\n  public async deleteVacation(vacationId: number): Promise<void> {\n    const token = store.getState().auth?.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n\n    try {\n      await axios.delete(`${appConfig.vacationsUrl}/${vacationId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      store.dispatch(vacationActions.deleteVacation(vacationId));\n    } catch (error) {\n      console.error(\"Failed to delete vacation:\", error);\n      throw error;\n    }\n  }\n\n  // Toggle like on vacation\n  public async toggleLike(vacationId: number): Promise<VacationModel> {\n    const token = store.getState().auth?.token;\n    if (!token) {\n      throw new Error(\"Unauthorized access. Please log in.\");\n    }\n\n    try {\n      const response = await axios.patch<VacationModel>(\n        `${appConfig.vacationsUrl}/toggle-like/${vacationId}`,\n        {},\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      const updatedVacation = response.data;\n\n      // Dispatch the updated vacation to the Redux store\n      store.dispatch(vacationActions.updateVacation(updatedVacation));\n      return updatedVacation;\n    } catch (error) {\n      console.error(\"Failed to toggle like:\", error);\n      throw error;\n    }\n  }\n}\n\nexport const vacationsService = new VacationsService();\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAA8B,OAAO;AAEjD,SAASC,KAAK,EAAEC,eAAe,QAAQ,gBAAgB;AACvD,SAASC,SAAS,QAAQ,oBAAoB;AAE9C,MAAMC,gBAAgB,CAAC;EAErB;EACA,MAAaC,eAAeA,CAACC,UAAkB,EAA0B;IAAA,IAAAC,oBAAA;IACvE,MAAMC,KAAK,IAAAD,oBAAA,GAAGN,KAAK,CAACQ,QAAQ,CAAC,CAAC,CAACC,IAAI,cAAAH,oBAAA,uBAArBA,oBAAA,CAAuBC,KAAK;IAC1C,IAAI,CAACA,KAAK,EAAE;MACV,MAAM,IAAIG,KAAK,CAAC,qCAAqC,CAAC;IACxD;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAC7B,GAAEV,SAAS,CAACW,YAAa,IAAGR,UAAW,EAAC,EACzC;QACES,OAAO,EAAE;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"},"metadata":{},"sourceType":"module","externalDependencies":[]}